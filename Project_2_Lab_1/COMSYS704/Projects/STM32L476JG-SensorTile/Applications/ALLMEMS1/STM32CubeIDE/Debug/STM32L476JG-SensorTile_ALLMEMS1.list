
STM32L476JG-SensorTile_ALLMEMS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c28  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800cdb8  0800cdb8  0000cdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d188  0800d188  0000d188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d18c  0800d18c  0000d18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  0800d190  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002880  200001e8  0800d378  000101e8  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  8 .bss2         00000000  200001e8  200001e8  000101e8  2**0
                  CONTENTS
  9 ._user_heap_stack 00003000  20002a68  20002a68  00012a68  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00010216  2**0
                  CONTENTS, READONLY
 12 .debug_line   000302a2  00000000  00000000  00010259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000bb  00000000  00000000  000404fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002a5fa  00000000  00000000  000405b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000057f5  00000000  00000000  0006abb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cc8  00000000  00000000  000703a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001209b2  00000000  00000000  00072070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000015f6  00000000  00000000  00192a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000119b7  00000000  00000000  00194018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00031e32  00000000  00000000  001a59cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005988  00000000  00000000  001d7804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200001e8 	.word	0x200001e8
 80041ac:	00000000 	.word	0x00000000
 80041b0:	0800cda0 	.word	0x0800cda0

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200001ec 	.word	0x200001ec
 80041cc:	0800cda0 	.word	0x0800cda0

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_drsub>:
 8004270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004274:	e002      	b.n	800427c <__adddf3>
 8004276:	bf00      	nop

08004278 <__aeabi_dsub>:
 8004278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800427c <__adddf3>:
 800427c:	b530      	push	{r4, r5, lr}
 800427e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004286:	ea94 0f05 	teq	r4, r5
 800428a:	bf08      	it	eq
 800428c:	ea90 0f02 	teqeq	r0, r2
 8004290:	bf1f      	itttt	ne
 8004292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800429a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800429e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042a2:	f000 80e2 	beq.w	800446a <__adddf3+0x1ee>
 80042a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042ae:	bfb8      	it	lt
 80042b0:	426d      	neglt	r5, r5
 80042b2:	dd0c      	ble.n	80042ce <__adddf3+0x52>
 80042b4:	442c      	add	r4, r5
 80042b6:	ea80 0202 	eor.w	r2, r0, r2
 80042ba:	ea81 0303 	eor.w	r3, r1, r3
 80042be:	ea82 0000 	eor.w	r0, r2, r0
 80042c2:	ea83 0101 	eor.w	r1, r3, r1
 80042c6:	ea80 0202 	eor.w	r2, r0, r2
 80042ca:	ea81 0303 	eor.w	r3, r1, r3
 80042ce:	2d36      	cmp	r5, #54	; 0x36
 80042d0:	bf88      	it	hi
 80042d2:	bd30      	pophi	{r4, r5, pc}
 80042d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042e4:	d002      	beq.n	80042ec <__adddf3+0x70>
 80042e6:	4240      	negs	r0, r0
 80042e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042f8:	d002      	beq.n	8004300 <__adddf3+0x84>
 80042fa:	4252      	negs	r2, r2
 80042fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004300:	ea94 0f05 	teq	r4, r5
 8004304:	f000 80a7 	beq.w	8004456 <__adddf3+0x1da>
 8004308:	f1a4 0401 	sub.w	r4, r4, #1
 800430c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004310:	db0d      	blt.n	800432e <__adddf3+0xb2>
 8004312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004316:	fa22 f205 	lsr.w	r2, r2, r5
 800431a:	1880      	adds	r0, r0, r2
 800431c:	f141 0100 	adc.w	r1, r1, #0
 8004320:	fa03 f20e 	lsl.w	r2, r3, lr
 8004324:	1880      	adds	r0, r0, r2
 8004326:	fa43 f305 	asr.w	r3, r3, r5
 800432a:	4159      	adcs	r1, r3
 800432c:	e00e      	b.n	800434c <__adddf3+0xd0>
 800432e:	f1a5 0520 	sub.w	r5, r5, #32
 8004332:	f10e 0e20 	add.w	lr, lr, #32
 8004336:	2a01      	cmp	r2, #1
 8004338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800433c:	bf28      	it	cs
 800433e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004342:	fa43 f305 	asr.w	r3, r3, r5
 8004346:	18c0      	adds	r0, r0, r3
 8004348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800434c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004350:	d507      	bpl.n	8004362 <__adddf3+0xe6>
 8004352:	f04f 0e00 	mov.w	lr, #0
 8004356:	f1dc 0c00 	rsbs	ip, ip, #0
 800435a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800435e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004366:	d31b      	bcc.n	80043a0 <__adddf3+0x124>
 8004368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800436c:	d30c      	bcc.n	8004388 <__adddf3+0x10c>
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	ea5f 0030 	movs.w	r0, r0, rrx
 8004374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004378:	f104 0401 	add.w	r4, r4, #1
 800437c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004384:	f080 809a 	bcs.w	80044bc <__adddf3+0x240>
 8004388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800438c:	bf08      	it	eq
 800438e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004392:	f150 0000 	adcs.w	r0, r0, #0
 8004396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800439a:	ea41 0105 	orr.w	r1, r1, r5
 800439e:	bd30      	pop	{r4, r5, pc}
 80043a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043a4:	4140      	adcs	r0, r0
 80043a6:	eb41 0101 	adc.w	r1, r1, r1
 80043aa:	3c01      	subs	r4, #1
 80043ac:	bf28      	it	cs
 80043ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80043b2:	d2e9      	bcs.n	8004388 <__adddf3+0x10c>
 80043b4:	f091 0f00 	teq	r1, #0
 80043b8:	bf04      	itt	eq
 80043ba:	4601      	moveq	r1, r0
 80043bc:	2000      	moveq	r0, #0
 80043be:	fab1 f381 	clz	r3, r1
 80043c2:	bf08      	it	eq
 80043c4:	3320      	addeq	r3, #32
 80043c6:	f1a3 030b 	sub.w	r3, r3, #11
 80043ca:	f1b3 0220 	subs.w	r2, r3, #32
 80043ce:	da0c      	bge.n	80043ea <__adddf3+0x16e>
 80043d0:	320c      	adds	r2, #12
 80043d2:	dd08      	ble.n	80043e6 <__adddf3+0x16a>
 80043d4:	f102 0c14 	add.w	ip, r2, #20
 80043d8:	f1c2 020c 	rsb	r2, r2, #12
 80043dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80043e0:	fa21 f102 	lsr.w	r1, r1, r2
 80043e4:	e00c      	b.n	8004400 <__adddf3+0x184>
 80043e6:	f102 0214 	add.w	r2, r2, #20
 80043ea:	bfd8      	it	le
 80043ec:	f1c2 0c20 	rsble	ip, r2, #32
 80043f0:	fa01 f102 	lsl.w	r1, r1, r2
 80043f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043f8:	bfdc      	itt	le
 80043fa:	ea41 010c 	orrle.w	r1, r1, ip
 80043fe:	4090      	lslle	r0, r2
 8004400:	1ae4      	subs	r4, r4, r3
 8004402:	bfa2      	ittt	ge
 8004404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004408:	4329      	orrge	r1, r5
 800440a:	bd30      	popge	{r4, r5, pc}
 800440c:	ea6f 0404 	mvn.w	r4, r4
 8004410:	3c1f      	subs	r4, #31
 8004412:	da1c      	bge.n	800444e <__adddf3+0x1d2>
 8004414:	340c      	adds	r4, #12
 8004416:	dc0e      	bgt.n	8004436 <__adddf3+0x1ba>
 8004418:	f104 0414 	add.w	r4, r4, #20
 800441c:	f1c4 0220 	rsb	r2, r4, #32
 8004420:	fa20 f004 	lsr.w	r0, r0, r4
 8004424:	fa01 f302 	lsl.w	r3, r1, r2
 8004428:	ea40 0003 	orr.w	r0, r0, r3
 800442c:	fa21 f304 	lsr.w	r3, r1, r4
 8004430:	ea45 0103 	orr.w	r1, r5, r3
 8004434:	bd30      	pop	{r4, r5, pc}
 8004436:	f1c4 040c 	rsb	r4, r4, #12
 800443a:	f1c4 0220 	rsb	r2, r4, #32
 800443e:	fa20 f002 	lsr.w	r0, r0, r2
 8004442:	fa01 f304 	lsl.w	r3, r1, r4
 8004446:	ea40 0003 	orr.w	r0, r0, r3
 800444a:	4629      	mov	r1, r5
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	fa21 f004 	lsr.w	r0, r1, r4
 8004452:	4629      	mov	r1, r5
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	f094 0f00 	teq	r4, #0
 800445a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800445e:	bf06      	itte	eq
 8004460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004464:	3401      	addeq	r4, #1
 8004466:	3d01      	subne	r5, #1
 8004468:	e74e      	b.n	8004308 <__adddf3+0x8c>
 800446a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800446e:	bf18      	it	ne
 8004470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004474:	d029      	beq.n	80044ca <__adddf3+0x24e>
 8004476:	ea94 0f05 	teq	r4, r5
 800447a:	bf08      	it	eq
 800447c:	ea90 0f02 	teqeq	r0, r2
 8004480:	d005      	beq.n	800448e <__adddf3+0x212>
 8004482:	ea54 0c00 	orrs.w	ip, r4, r0
 8004486:	bf04      	itt	eq
 8004488:	4619      	moveq	r1, r3
 800448a:	4610      	moveq	r0, r2
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea91 0f03 	teq	r1, r3
 8004492:	bf1e      	ittt	ne
 8004494:	2100      	movne	r1, #0
 8004496:	2000      	movne	r0, #0
 8004498:	bd30      	popne	{r4, r5, pc}
 800449a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800449e:	d105      	bne.n	80044ac <__adddf3+0x230>
 80044a0:	0040      	lsls	r0, r0, #1
 80044a2:	4149      	adcs	r1, r1
 80044a4:	bf28      	it	cs
 80044a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80044aa:	bd30      	pop	{r4, r5, pc}
 80044ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80044b0:	bf3c      	itt	cc
 80044b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80044b6:	bd30      	popcc	{r4, r5, pc}
 80044b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80044c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	bd30      	pop	{r4, r5, pc}
 80044ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044ce:	bf1a      	itte	ne
 80044d0:	4619      	movne	r1, r3
 80044d2:	4610      	movne	r0, r2
 80044d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044d8:	bf1c      	itt	ne
 80044da:	460b      	movne	r3, r1
 80044dc:	4602      	movne	r2, r0
 80044de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044e2:	bf06      	itte	eq
 80044e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044e8:	ea91 0f03 	teqeq	r1, r3
 80044ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	bf00      	nop

080044f4 <__aeabi_ui2d>:
 80044f4:	f090 0f00 	teq	r0, #0
 80044f8:	bf04      	itt	eq
 80044fa:	2100      	moveq	r1, #0
 80044fc:	4770      	bxeq	lr
 80044fe:	b530      	push	{r4, r5, lr}
 8004500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004508:	f04f 0500 	mov.w	r5, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	e750      	b.n	80043b4 <__adddf3+0x138>
 8004512:	bf00      	nop

08004514 <__aeabi_i2d>:
 8004514:	f090 0f00 	teq	r0, #0
 8004518:	bf04      	itt	eq
 800451a:	2100      	moveq	r1, #0
 800451c:	4770      	bxeq	lr
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800452c:	bf48      	it	mi
 800452e:	4240      	negmi	r0, r0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	e73e      	b.n	80043b4 <__adddf3+0x138>
 8004536:	bf00      	nop

08004538 <__aeabi_f2d>:
 8004538:	0042      	lsls	r2, r0, #1
 800453a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800453e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004546:	bf1f      	itttt	ne
 8004548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800454c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004554:	4770      	bxne	lr
 8004556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800455a:	bf08      	it	eq
 800455c:	4770      	bxeq	lr
 800455e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004562:	bf04      	itt	eq
 8004564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004568:	4770      	bxeq	lr
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004578:	e71c      	b.n	80043b4 <__adddf3+0x138>
 800457a:	bf00      	nop

0800457c <__aeabi_ul2d>:
 800457c:	ea50 0201 	orrs.w	r2, r0, r1
 8004580:	bf08      	it	eq
 8004582:	4770      	bxeq	lr
 8004584:	b530      	push	{r4, r5, lr}
 8004586:	f04f 0500 	mov.w	r5, #0
 800458a:	e00a      	b.n	80045a2 <__aeabi_l2d+0x16>

0800458c <__aeabi_l2d>:
 800458c:	ea50 0201 	orrs.w	r2, r0, r1
 8004590:	bf08      	it	eq
 8004592:	4770      	bxeq	lr
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800459a:	d502      	bpl.n	80045a2 <__aeabi_l2d+0x16>
 800459c:	4240      	negs	r0, r0
 800459e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80045a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80045aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045ae:	f43f aed8 	beq.w	8004362 <__adddf3+0xe6>
 80045b2:	f04f 0203 	mov.w	r2, #3
 80045b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ba:	bf18      	it	ne
 80045bc:	3203      	addne	r2, #3
 80045be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045c2:	bf18      	it	ne
 80045c4:	3203      	addne	r2, #3
 80045c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045ca:	f1c2 0320 	rsb	r3, r2, #32
 80045ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80045d2:	fa20 f002 	lsr.w	r0, r0, r2
 80045d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80045da:	ea40 000e 	orr.w	r0, r0, lr
 80045de:	fa21 f102 	lsr.w	r1, r1, r2
 80045e2:	4414      	add	r4, r2
 80045e4:	e6bd      	b.n	8004362 <__adddf3+0xe6>
 80045e6:	bf00      	nop

080045e8 <__aeabi_dmul>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045f6:	bf1d      	ittte	ne
 80045f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045fc:	ea94 0f0c 	teqne	r4, ip
 8004600:	ea95 0f0c 	teqne	r5, ip
 8004604:	f000 f8de 	bleq	80047c4 <__aeabi_dmul+0x1dc>
 8004608:	442c      	add	r4, r5
 800460a:	ea81 0603 	eor.w	r6, r1, r3
 800460e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800461a:	bf18      	it	ne
 800461c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004628:	d038      	beq.n	800469c <__aeabi_dmul+0xb4>
 800462a:	fba0 ce02 	umull	ip, lr, r0, r2
 800462e:	f04f 0500 	mov.w	r5, #0
 8004632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800463a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004646:	f09c 0f00 	teq	ip, #0
 800464a:	bf18      	it	ne
 800464c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800465c:	d204      	bcs.n	8004668 <__aeabi_dmul+0x80>
 800465e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004662:	416d      	adcs	r5, r5
 8004664:	eb46 0606 	adc.w	r6, r6, r6
 8004668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800466c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800467c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004680:	bf88      	it	hi
 8004682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004686:	d81e      	bhi.n	80046c6 <__aeabi_dmul+0xde>
 8004688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800468c:	bf08      	it	eq
 800468e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004692:	f150 0000 	adcs.w	r0, r0, #0
 8004696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80046a0:	ea46 0101 	orr.w	r1, r6, r1
 80046a4:	ea40 0002 	orr.w	r0, r0, r2
 80046a8:	ea81 0103 	eor.w	r1, r1, r3
 80046ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80046b0:	bfc2      	ittt	gt
 80046b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80046b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80046ba:	bd70      	popgt	{r4, r5, r6, pc}
 80046bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80046c0:	f04f 0e00 	mov.w	lr, #0
 80046c4:	3c01      	subs	r4, #1
 80046c6:	f300 80ab 	bgt.w	8004820 <__aeabi_dmul+0x238>
 80046ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046ce:	bfde      	ittt	le
 80046d0:	2000      	movle	r0, #0
 80046d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80046d6:	bd70      	pople	{r4, r5, r6, pc}
 80046d8:	f1c4 0400 	rsb	r4, r4, #0
 80046dc:	3c20      	subs	r4, #32
 80046de:	da35      	bge.n	800474c <__aeabi_dmul+0x164>
 80046e0:	340c      	adds	r4, #12
 80046e2:	dc1b      	bgt.n	800471c <__aeabi_dmul+0x134>
 80046e4:	f104 0414 	add.w	r4, r4, #20
 80046e8:	f1c4 0520 	rsb	r5, r4, #32
 80046ec:	fa00 f305 	lsl.w	r3, r0, r5
 80046f0:	fa20 f004 	lsr.w	r0, r0, r4
 80046f4:	fa01 f205 	lsl.w	r2, r1, r5
 80046f8:	ea40 0002 	orr.w	r0, r0, r2
 80046fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004708:	fa21 f604 	lsr.w	r6, r1, r4
 800470c:	eb42 0106 	adc.w	r1, r2, r6
 8004710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004714:	bf08      	it	eq
 8004716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f1c4 040c 	rsb	r4, r4, #12
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f304 	lsl.w	r3, r0, r4
 8004728:	fa20 f005 	lsr.w	r0, r0, r5
 800472c:	fa01 f204 	lsl.w	r2, r1, r4
 8004730:	ea40 0002 	orr.w	r0, r0, r2
 8004734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800473c:	f141 0100 	adc.w	r1, r1, #0
 8004740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004744:	bf08      	it	eq
 8004746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f1c4 0520 	rsb	r5, r4, #32
 8004750:	fa00 f205 	lsl.w	r2, r0, r5
 8004754:	ea4e 0e02 	orr.w	lr, lr, r2
 8004758:	fa20 f304 	lsr.w	r3, r0, r4
 800475c:	fa01 f205 	lsl.w	r2, r1, r5
 8004760:	ea43 0302 	orr.w	r3, r3, r2
 8004764:	fa21 f004 	lsr.w	r0, r1, r4
 8004768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800476c:	fa21 f204 	lsr.w	r2, r1, r4
 8004770:	ea20 0002 	bic.w	r0, r0, r2
 8004774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800477c:	bf08      	it	eq
 800477e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f094 0f00 	teq	r4, #0
 8004788:	d10f      	bne.n	80047aa <__aeabi_dmul+0x1c2>
 800478a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800478e:	0040      	lsls	r0, r0, #1
 8004790:	eb41 0101 	adc.w	r1, r1, r1
 8004794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004798:	bf08      	it	eq
 800479a:	3c01      	subeq	r4, #1
 800479c:	d0f7      	beq.n	800478e <__aeabi_dmul+0x1a6>
 800479e:	ea41 0106 	orr.w	r1, r1, r6
 80047a2:	f095 0f00 	teq	r5, #0
 80047a6:	bf18      	it	ne
 80047a8:	4770      	bxne	lr
 80047aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	eb43 0303 	adc.w	r3, r3, r3
 80047b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80047b8:	bf08      	it	eq
 80047ba:	3d01      	subeq	r5, #1
 80047bc:	d0f7      	beq.n	80047ae <__aeabi_dmul+0x1c6>
 80047be:	ea43 0306 	orr.w	r3, r3, r6
 80047c2:	4770      	bx	lr
 80047c4:	ea94 0f0c 	teq	r4, ip
 80047c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047cc:	bf18      	it	ne
 80047ce:	ea95 0f0c 	teqne	r5, ip
 80047d2:	d00c      	beq.n	80047ee <__aeabi_dmul+0x206>
 80047d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047d8:	bf18      	it	ne
 80047da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047de:	d1d1      	bne.n	8004784 <__aeabi_dmul+0x19c>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047f2:	bf06      	itte	eq
 80047f4:	4610      	moveq	r0, r2
 80047f6:	4619      	moveq	r1, r3
 80047f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047fc:	d019      	beq.n	8004832 <__aeabi_dmul+0x24a>
 80047fe:	ea94 0f0c 	teq	r4, ip
 8004802:	d102      	bne.n	800480a <__aeabi_dmul+0x222>
 8004804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004808:	d113      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800480a:	ea95 0f0c 	teq	r5, ip
 800480e:	d105      	bne.n	800481c <__aeabi_dmul+0x234>
 8004810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004814:	bf1c      	itt	ne
 8004816:	4610      	movne	r0, r2
 8004818:	4619      	movne	r1, r3
 800481a:	d10a      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800481c:	ea81 0103 	eor.w	r1, r1, r3
 8004820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800483a:	bd70      	pop	{r4, r5, r6, pc}

0800483c <__aeabi_ddiv>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800484a:	bf1d      	ittte	ne
 800484c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004850:	ea94 0f0c 	teqne	r4, ip
 8004854:	ea95 0f0c 	teqne	r5, ip
 8004858:	f000 f8a7 	bleq	80049aa <__aeabi_ddiv+0x16e>
 800485c:	eba4 0405 	sub.w	r4, r4, r5
 8004860:	ea81 0e03 	eor.w	lr, r1, r3
 8004864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800486c:	f000 8088 	beq.w	8004980 <__aeabi_ddiv+0x144>
 8004870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800487c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800488c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004894:	429d      	cmp	r5, r3
 8004896:	bf08      	it	eq
 8004898:	4296      	cmpeq	r6, r2
 800489a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800489e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80048a2:	d202      	bcs.n	80048aa <__aeabi_ddiv+0x6e>
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	1ab6      	subs	r6, r6, r2
 80048ac:	eb65 0503 	sbc.w	r5, r5, r3
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80048ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80048be:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048c6:	bf22      	ittt	cs
 80048c8:	1ab6      	subcs	r6, r6, r2
 80048ca:	4675      	movcs	r5, lr
 80048cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80048da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048de:	bf22      	ittt	cs
 80048e0:	1ab6      	subcs	r6, r6, r2
 80048e2:	4675      	movcs	r5, lr
 80048e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80048f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048f6:	bf22      	ittt	cs
 80048f8:	1ab6      	subcs	r6, r6, r2
 80048fa:	4675      	movcs	r5, lr
 80048fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	ea4f 0232 	mov.w	r2, r2, rrx
 8004906:	ebb6 0e02 	subs.w	lr, r6, r2
 800490a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800490e:	bf22      	ittt	cs
 8004910:	1ab6      	subcs	r6, r6, r2
 8004912:	4675      	movcs	r5, lr
 8004914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004918:	ea55 0e06 	orrs.w	lr, r5, r6
 800491c:	d018      	beq.n	8004950 <__aeabi_ddiv+0x114>
 800491e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800492a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800492e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800493a:	d1c0      	bne.n	80048be <__aeabi_ddiv+0x82>
 800493c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004940:	d10b      	bne.n	800495a <__aeabi_ddiv+0x11e>
 8004942:	ea41 0100 	orr.w	r1, r1, r0
 8004946:	f04f 0000 	mov.w	r0, #0
 800494a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800494e:	e7b6      	b.n	80048be <__aeabi_ddiv+0x82>
 8004950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004954:	bf04      	itt	eq
 8004956:	4301      	orreq	r1, r0
 8004958:	2000      	moveq	r0, #0
 800495a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800495e:	bf88      	it	hi
 8004960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004964:	f63f aeaf 	bhi.w	80046c6 <__aeabi_dmul+0xde>
 8004968:	ebb5 0c03 	subs.w	ip, r5, r3
 800496c:	bf04      	itt	eq
 800496e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004976:	f150 0000 	adcs.w	r0, r0, #0
 800497a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800498c:	bfc2      	ittt	gt
 800498e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004996:	bd70      	popgt	{r4, r5, r6, pc}
 8004998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800499c:	f04f 0e00 	mov.w	lr, #0
 80049a0:	3c01      	subs	r4, #1
 80049a2:	e690      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049a4:	ea45 0e06 	orr.w	lr, r5, r6
 80049a8:	e68d      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80049ae:	ea94 0f0c 	teq	r4, ip
 80049b2:	bf08      	it	eq
 80049b4:	ea95 0f0c 	teqeq	r5, ip
 80049b8:	f43f af3b 	beq.w	8004832 <__aeabi_dmul+0x24a>
 80049bc:	ea94 0f0c 	teq	r4, ip
 80049c0:	d10a      	bne.n	80049d8 <__aeabi_ddiv+0x19c>
 80049c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80049c6:	f47f af34 	bne.w	8004832 <__aeabi_dmul+0x24a>
 80049ca:	ea95 0f0c 	teq	r5, ip
 80049ce:	f47f af25 	bne.w	800481c <__aeabi_dmul+0x234>
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	e72c      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049d8:	ea95 0f0c 	teq	r5, ip
 80049dc:	d106      	bne.n	80049ec <__aeabi_ddiv+0x1b0>
 80049de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049e2:	f43f aefd 	beq.w	80047e0 <__aeabi_dmul+0x1f8>
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	e722      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049f0:	bf18      	it	ne
 80049f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049f6:	f47f aec5 	bne.w	8004784 <__aeabi_dmul+0x19c>
 80049fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049fe:	f47f af0d 	bne.w	800481c <__aeabi_dmul+0x234>
 8004a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004a06:	f47f aeeb 	bne.w	80047e0 <__aeabi_dmul+0x1f8>
 8004a0a:	e712      	b.n	8004832 <__aeabi_dmul+0x24a>

08004a0c <__gedf2>:
 8004a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8004a10:	e006      	b.n	8004a20 <__cmpdf2+0x4>
 8004a12:	bf00      	nop

08004a14 <__ledf2>:
 8004a14:	f04f 0c01 	mov.w	ip, #1
 8004a18:	e002      	b.n	8004a20 <__cmpdf2+0x4>
 8004a1a:	bf00      	nop

08004a1c <__cmpdf2>:
 8004a1c:	f04f 0c01 	mov.w	ip, #1
 8004a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a30:	bf18      	it	ne
 8004a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a36:	d01b      	beq.n	8004a70 <__cmpdf2+0x54>
 8004a38:	b001      	add	sp, #4
 8004a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a3e:	bf0c      	ite	eq
 8004a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a44:	ea91 0f03 	teqne	r1, r3
 8004a48:	bf02      	ittt	eq
 8004a4a:	ea90 0f02 	teqeq	r0, r2
 8004a4e:	2000      	moveq	r0, #0
 8004a50:	4770      	bxeq	lr
 8004a52:	f110 0f00 	cmn.w	r0, #0
 8004a56:	ea91 0f03 	teq	r1, r3
 8004a5a:	bf58      	it	pl
 8004a5c:	4299      	cmppl	r1, r3
 8004a5e:	bf08      	it	eq
 8004a60:	4290      	cmpeq	r0, r2
 8004a62:	bf2c      	ite	cs
 8004a64:	17d8      	asrcs	r0, r3, #31
 8004a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a6a:	f040 0001 	orr.w	r0, r0, #1
 8004a6e:	4770      	bx	lr
 8004a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a78:	d102      	bne.n	8004a80 <__cmpdf2+0x64>
 8004a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a7e:	d107      	bne.n	8004a90 <__cmpdf2+0x74>
 8004a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a88:	d1d6      	bne.n	8004a38 <__cmpdf2+0x1c>
 8004a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a8e:	d0d3      	beq.n	8004a38 <__cmpdf2+0x1c>
 8004a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <__aeabi_cdrcmple>:
 8004a98:	4684      	mov	ip, r0
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4662      	mov	r2, ip
 8004a9e:	468c      	mov	ip, r1
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4663      	mov	r3, ip
 8004aa4:	e000      	b.n	8004aa8 <__aeabi_cdcmpeq>
 8004aa6:	bf00      	nop

08004aa8 <__aeabi_cdcmpeq>:
 8004aa8:	b501      	push	{r0, lr}
 8004aaa:	f7ff ffb7 	bl	8004a1c <__cmpdf2>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	bf48      	it	mi
 8004ab2:	f110 0f00 	cmnmi.w	r0, #0
 8004ab6:	bd01      	pop	{r0, pc}

08004ab8 <__aeabi_dcmpeq>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff fff4 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2001      	moveq	r0, #1
 8004ac4:	2000      	movne	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmplt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffea 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmple>:
 8004ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae4:	f7ff ffe0 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ae8:	bf94      	ite	ls
 8004aea:	2001      	movls	r0, #1
 8004aec:	2000      	movhi	r0, #0
 8004aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8004af2:	bf00      	nop

08004af4 <__aeabi_dcmpge>:
 8004af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004af8:	f7ff ffce 	bl	8004a98 <__aeabi_cdrcmple>
 8004afc:	bf94      	ite	ls
 8004afe:	2001      	movls	r0, #1
 8004b00:	2000      	movhi	r0, #0
 8004b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b06:	bf00      	nop

08004b08 <__aeabi_dcmpgt>:
 8004b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b0c:	f7ff ffc4 	bl	8004a98 <__aeabi_cdrcmple>
 8004b10:	bf34      	ite	cc
 8004b12:	2001      	movcc	r0, #1
 8004b14:	2000      	movcs	r0, #0
 8004b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b1a:	bf00      	nop

08004b1c <__aeabi_d2iz>:
 8004b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004b24:	d215      	bcs.n	8004b52 <__aeabi_d2iz+0x36>
 8004b26:	d511      	bpl.n	8004b4c <__aeabi_d2iz+0x30>
 8004b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004b30:	d912      	bls.n	8004b58 <__aeabi_d2iz+0x3c>
 8004b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b42:	fa23 f002 	lsr.w	r0, r3, r2
 8004b46:	bf18      	it	ne
 8004b48:	4240      	negne	r0, r0
 8004b4a:	4770      	bx	lr
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	4770      	bx	lr
 8004b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004b56:	d105      	bne.n	8004b64 <__aeabi_d2iz+0x48>
 8004b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004b5c:	bf08      	it	eq
 8004b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004b62:	4770      	bx	lr
 8004b64:	f04f 0000 	mov.w	r0, #0
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ba4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004b70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004b72:	e003      	b.n	8004b7c <LoopCopyDataInit>

08004b74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004b76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004b78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004b7a:	3104      	adds	r1, #4

08004b7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004b7c:	480b      	ldr	r0, [pc, #44]	; (8004bac <LoopForever+0xa>)
	ldr	r3, =_edata
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004b80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004b82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004b84:	d3f6      	bcc.n	8004b74 <CopyDataInit>
	ldr	r2, =_sbss
 8004b86:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004b88:	e002      	b.n	8004b90 <LoopFillZerobss>

08004b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004b8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004b8c:	f842 3b04 	str.w	r3, [r2], #4

08004b90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <LoopForever+0x16>)
	cmp	r2, r3
 8004b92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004b94:	d3f9      	bcc.n	8004b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b96:	f001 feeb 	bl	8006970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b9a:	f007 fd47 	bl	800c62c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b9e:	f001 f9bf 	bl	8005f20 <main>

08004ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ba2:	e7fe      	b.n	8004ba2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ba4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004ba8:	0800d190 	.word	0x0800d190
	ldr	r0, =_sdata
 8004bac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004bb0:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8004bb4:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8004bb8:	20002a68 	.word	0x20002a68

08004bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bbc:	e7fe      	b.n	8004bbc <ADC1_2_IRQHandler>
	...

08004bc0 <GAP_ConnectionComplete_CB>:
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <GAP_ConnectionComplete_CB+0x10>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8004bc6:	8099      	strh	r1, [r3, #4]

#ifdef ALLMEMS1_DEBUG_CONNECTION
  ALLMEMS1_PRINTF("\r\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
#endif /* ALLMEMS1_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 8004bc8:	4b02      	ldr	r3, [pc, #8]	; (8004bd4 <GAP_ConnectionComplete_CB+0x14>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
  


}
 8004bce:	4770      	bx	lr
 8004bd0:	20000204 	.word	0x20000204
 8004bd4:	200007f8 	.word	0x200007f8

08004bd8 <AccGyroMag_AttributeModified_CB>:
 * is subscribed or not to the Acc,Gyro and Mag service
 * @param uint8_t *att_data attribute data
 * @retval None
 */
static void AccGyroMag_AttributeModified_CB(uint8_t *att_data)
{
 8004bd8:	b500      	push	{lr}
 8004bda:	b0c1      	sub	sp, #260	; 0x104
  if (att_data[0] == 01) {
 8004bdc:	7803      	ldrb	r3, [r0, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d011      	beq.n	8004c06 <AccGyroMag_AttributeModified_CB+0x2e>
    {
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
      /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
    }
  } else if (att_data[0] == 0) {
 8004be2:	b32b      	cbz	r3, 8004c30 <AccGyroMag_AttributeModified_CB+0x58>
      /* Stopping Error */
      Error_Handler();
    }      
  }

    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004be4:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <AccGyroMag_AttributeModified_CB+0x78>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f013 0f04 	tst.w	r3, #4
 8004bec:	d02e      	beq.n	8004c4c <AccGyroMag_AttributeModified_CB+0x74>
 8004bee:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <AccGyroMag_AttributeModified_CB+0x7c>)
 8004bf0:	4919      	ldr	r1, [pc, #100]	; (8004c58 <AccGyroMag_AttributeModified_CB+0x80>)
 8004bf2:	4668      	mov	r0, sp
 8004bf4:	f007 fcdc 	bl	800c5b0 <siprintf>
 8004bf8:	4601      	mov	r1, r0
 8004bfa:	4668      	mov	r0, sp
 8004bfc:	f001 fba4 	bl	8006348 <CDC_Fill_Buffer>

}
 8004c00:	b041      	add	sp, #260	; 0x104
 8004c02:	f85d fb04 	ldr.w	pc, [sp], #4
    W2ST_ON_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004c06:	4a12      	ldr	r2, [pc, #72]	; (8004c50 <AccGyroMag_AttributeModified_CB+0x78>)
 8004c08:	6813      	ldr	r3, [r2, #0]
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004c10:	210c      	movs	r1, #12
 8004c12:	4812      	ldr	r0, [pc, #72]	; (8004c5c <AccGyroMag_AttributeModified_CB+0x84>)
 8004c14:	f004 ff04 	bl	8009a20 <HAL_TIM_OC_Start_IT>
 8004c18:	b938      	cbnz	r0, 8004c2a <AccGyroMag_AttributeModified_CB+0x52>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <AccGyroMag_AttributeModified_CB+0x84>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8004c20:	490f      	ldr	r1, [pc, #60]	; (8004c60 <AccGyroMag_AttributeModified_CB+0x88>)
 8004c22:	6809      	ldr	r1, [r1, #0]
 8004c24:	440b      	add	r3, r1
 8004c26:	6413      	str	r3, [r2, #64]	; 0x40
 8004c28:	e7dc      	b.n	8004be4 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004c2a:	f001 f90d 	bl	8005e48 <Error_Handler>
 8004c2e:	e7f4      	b.n	8004c1a <AccGyroMag_AttributeModified_CB+0x42>
    W2ST_OFF_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004c30:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <AccGyroMag_AttributeModified_CB+0x78>)
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	f023 0304 	bic.w	r3, r3, #4
 8004c38:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004c3a:	210c      	movs	r1, #12
 8004c3c:	4807      	ldr	r0, [pc, #28]	; (8004c5c <AccGyroMag_AttributeModified_CB+0x84>)
 8004c3e:	f004 ffc5 	bl	8009bcc <HAL_TIM_OC_Stop_IT>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d0ce      	beq.n	8004be4 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004c46:	f001 f8ff 	bl	8005e48 <Error_Handler>
 8004c4a:	e7cb      	b.n	8004be4 <AccGyroMag_AttributeModified_CB+0xc>
    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004c4c:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <AccGyroMag_AttributeModified_CB+0x8c>)
 8004c4e:	e7cf      	b.n	8004bf0 <AccGyroMag_AttributeModified_CB+0x18>
 8004c50:	200007f8 	.word	0x200007f8
 8004c54:	0800ce18 	.word	0x0800ce18
 8004c58:	0800ce28 	.word	0x0800ce28
 8004c5c:	2000033c 	.word	0x2000033c
 8004c60:	20000004 	.word	0x20000004
 8004c64:	0800ce20 	.word	0x0800ce20

08004c68 <GAP_DisconnectionComplete_CB>:
{
 8004c68:	b530      	push	{r4, r5, lr}
 8004c6a:	b0c1      	sub	sp, #260	; 0x104
  connected = FALSE;
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <GAP_DisconnectionComplete_CB+0x48>)
 8004c70:	601d      	str	r5, [r3, #0]
  XPRINTF("<<<<<<DISCONNECTED\r\n");
 8004c72:	46ec      	mov	ip, sp
 8004c74:	4c0f      	ldr	r4, [pc, #60]	; (8004cb4 <GAP_DisconnectionComplete_CB+0x4c>)
 8004c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c80:	f84c 0b04 	str.w	r0, [ip], #4
 8004c84:	f88c 1000 	strb.w	r1, [ip]
 8004c88:	2114      	movs	r1, #20
 8004c8a:	4668      	mov	r0, sp
 8004c8c:	f001 fb5c 	bl	8006348 <CDC_Fill_Buffer>
  set_connectable = TRUE;
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <GAP_DisconnectionComplete_CB+0x50>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
  ConnectionBleStatus=0;
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <GAP_DisconnectionComplete_CB+0x54>)
 8004c98:	601d      	str	r5, [r3, #0]
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004c9a:	210c      	movs	r1, #12
 8004c9c:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <GAP_DisconnectionComplete_CB+0x58>)
 8004c9e:	f004 ff95 	bl	8009bcc <HAL_TIM_OC_Stop_IT>
 8004ca2:	b908      	cbnz	r0, 8004ca8 <GAP_DisconnectionComplete_CB+0x40>
}
 8004ca4:	b041      	add	sp, #260	; 0x104
 8004ca6:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8004ca8:	f001 f8ce 	bl	8005e48 <Error_Handler>
}
 8004cac:	e7fa      	b.n	8004ca4 <GAP_DisconnectionComplete_CB+0x3c>
 8004cae:	bf00      	nop
 8004cb0:	20000204 	.word	0x20000204
 8004cb4:	0800ce3c 	.word	0x0800ce3c
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	200007f8 	.word	0x200007f8
 8004cc0:	2000033c 	.word	0x2000033c

08004cc4 <safe_aci_gatt_update_char_value>:
{
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	b082      	sub	sp, #8
  if (breath > 0) {
 8004cc8:	4c09      	ldr	r4, [pc, #36]	; (8004cf0 <safe_aci_gatt_update_char_value+0x2c>)
 8004cca:	68a4      	ldr	r4, [r4, #8]
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	dd05      	ble.n	8004cdc <safe_aci_gatt_update_char_value+0x18>
    breath--;
 8004cd0:	3c01      	subs	r4, #1
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <safe_aci_gatt_update_char_value+0x2c>)
 8004cd4:	609c      	str	r4, [r3, #8]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 8004cd6:	2064      	movs	r0, #100	; 0x64
}
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd10      	pop	{r4, pc}
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 8004cdc:	9c04      	ldr	r4, [sp, #16]
 8004cde:	9400      	str	r4, [sp, #0]
 8004ce0:	f005 feb1 	bl	800aa46 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0f7      	beq.n	8004cd8 <safe_aci_gatt_update_char_value+0x14>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 8004ce8:	4b01      	ldr	r3, [pc, #4]	; (8004cf0 <safe_aci_gatt_update_char_value+0x2c>)
 8004cea:	221e      	movs	r2, #30
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	e7f3      	b.n	8004cd8 <safe_aci_gatt_update_char_value+0x14>
 8004cf0:	20000204 	.word	0x20000204

08004cf4 <Add_HW_SW_ServW2ST_Service>:
{
 8004cf4:	b530      	push	{r4, r5, lr}
 8004cf6:	b0cb      	sub	sp, #300	; 0x12c
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8004cf8:	231b      	movs	r3, #27
 8004cfa:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004cfe:	23c5      	movs	r3, #197	; 0xc5
 8004d00:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004d04:	23d5      	movs	r3, #213	; 0xd5
 8004d06:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004d0a:	23a5      	movs	r3, #165	; 0xa5
 8004d0c:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004d10:	2002      	movs	r0, #2
 8004d12:	f88d 011c 	strb.w	r0, [sp, #284]	; 0x11c
 8004d16:	2300      	movs	r3, #0
 8004d18:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004d1c:	22b4      	movs	r2, #180	; 0xb4
 8004d1e:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004d22:	229a      	movs	r2, #154	; 0x9a
 8004d24:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004d28:	22e1      	movs	r2, #225	; 0xe1
 8004d2a:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004d2e:	2211      	movs	r2, #17
 8004d30:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8004d34:	2201      	movs	r2, #1
 8004d36:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8004d3a:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004d3e:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8004d42:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 8004d46:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
 8004d4a:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8004d4e:	4b35      	ldr	r3, [pc, #212]	; (8004e24 <Add_HW_SW_ServW2ST_Service+0x130>)
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	230d      	movs	r3, #13
 8004d54:	a946      	add	r1, sp, #280	; 0x118
 8004d56:	f005 fdcb 	bl	800a8f0 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) {
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d13e      	bne.n	8004ddc <Add_HW_SW_ServW2ST_Service+0xe8>
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8004d5e:	231b      	movs	r3, #27
 8004d60:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004d64:	23c5      	movs	r3, #197	; 0xc5
 8004d66:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004d6a:	23d5      	movs	r3, #213	; 0xd5
 8004d6c:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004d70:	23a5      	movs	r3, #165	; 0xa5
 8004d72:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004d76:	2102      	movs	r1, #2
 8004d78:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004d82:	2236      	movs	r2, #54	; 0x36
 8004d84:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004d88:	22ac      	movs	r2, #172	; 0xac
 8004d8a:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004d8e:	22e1      	movs	r2, #225	; 0xe1
 8004d90:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004d94:	2211      	movs	r2, #17
 8004d96:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8004da0:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004da4:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8004da8:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 8004dac:	22e0      	movs	r2, #224	; 0xe0
 8004dae:	f88d 2126 	strb.w	r2, [sp, #294]	; 0x126
 8004db2:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 8004db6:	481c      	ldr	r0, [pc, #112]	; (8004e28 <Add_HW_SW_ServW2ST_Service+0x134>)
 8004db8:	f100 020e 	add.w	r2, r0, #14
 8004dbc:	9205      	str	r2, [sp, #20]
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	2210      	movs	r2, #16
 8004dc2:	9203      	str	r2, [sp, #12]
 8004dc4:	2404      	movs	r4, #4
 8004dc6:	9402      	str	r4, [sp, #8]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	9200      	str	r2, [sp, #0]
 8004dcc:	2314      	movs	r3, #20
 8004dce:	aa46      	add	r2, sp, #280	; 0x118
 8004dd0:	8980      	ldrh	r0, [r0, #12]
 8004dd2:	f005 fdd2 	bl	800a97a <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 8004dd6:	b9a0      	cbnz	r0, 8004e02 <Add_HW_SW_ServW2ST_Service+0x10e>
}
 8004dd8:	b04b      	add	sp, #300	; 0x12c
 8004dda:	bd30      	pop	{r4, r5, pc}
	  XPRINTF("Error Creating Service\r\n");
 8004ddc:	f10d 0c18 	add.w	ip, sp, #24
 8004de0:	4c12      	ldr	r4, [pc, #72]	; (8004e2c <Add_HW_SW_ServW2ST_Service+0x138>)
 8004de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004de8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004dec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004df0:	f88c 2000 	strb.w	r2, [ip]
 8004df4:	2118      	movs	r1, #24
 8004df6:	eb0d 0001 	add.w	r0, sp, r1
 8004dfa:	f001 faa5 	bl	8006348 <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004dfe:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004e00:	e7ea      	b.n	8004dd8 <Add_HW_SW_ServW2ST_Service+0xe4>
	  XPRINTF("Error Creating Characterstic\r\n");
 8004e02:	ac06      	add	r4, sp, #24
 8004e04:	4d0a      	ldr	r5, [pc, #40]	; (8004e30 <Add_HW_SW_ServW2ST_Service+0x13c>)
 8004e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e0e:	c407      	stmia	r4!, {r0, r1, r2}
 8004e10:	f824 3b02 	strh.w	r3, [r4], #2
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	7023      	strb	r3, [r4, #0]
 8004e18:	211e      	movs	r1, #30
 8004e1a:	a806      	add	r0, sp, #24
 8004e1c:	f001 fa94 	bl	8006348 <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004e20:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004e22:	e7d9      	b.n	8004dd8 <Add_HW_SW_ServW2ST_Service+0xe4>
 8004e24:	20000210 	.word	0x20000210
 8004e28:	20000204 	.word	0x20000204
 8004e2c:	0800ce54 	.word	0x0800ce54
 8004e30:	0800ce70 	.word	0x0800ce70

08004e34 <AccGyroMag_Update>:
{  
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	b0c8      	sub	sp, #288	; 0x120
 8004e38:	4606      	mov	r6, r0
 8004e3a:	460d      	mov	r5, r1
 8004e3c:	4614      	mov	r4, r2
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8004e3e:	f001 fe01 	bl	8006a44 <HAL_GetTick>
 8004e42:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8004e46:	f88d 010c 	strb.w	r0, [sp, #268]	; 0x10c
 8004e4a:	f001 fdfb 	bl	8006a44 <HAL_GetTick>
 8004e4e:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8004e52:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
  STORE_LE_16(buff+2 ,Acc->x);
 8004e56:	6833      	ldr	r3, [r6, #0]
 8004e58:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
 8004e5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004e60:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
  STORE_LE_16(buff+4 ,Acc->y);
 8004e64:	6873      	ldr	r3, [r6, #4]
 8004e66:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
 8004e6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004e6e:	f88d 3111 	strb.w	r3, [sp, #273]	; 0x111
  STORE_LE_16(buff+6 ,Acc->z);
 8004e72:	68b3      	ldr	r3, [r6, #8]
 8004e74:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
 8004e78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004e7c:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
  STORE_LE_16(buff+8 ,Gyro->x*10);
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004e86:	0052      	lsls	r2, r2, #1
 8004e88:	f88d 2114 	strb.w	r2, [sp, #276]	; 0x114
 8004e8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e90:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8004e94:	f88d 3115 	strb.w	r3, [sp, #277]	; 0x115
  STORE_LE_16(buff+10,Gyro->y*10);
 8004e98:	686b      	ldr	r3, [r5, #4]
 8004e9a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004e9e:	0052      	lsls	r2, r2, #1
 8004ea0:	f88d 2116 	strb.w	r2, [sp, #278]	; 0x116
 8004ea4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ea8:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8004eac:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
  STORE_LE_16(buff+12,Gyro->z);
 8004eb0:	68ab      	ldr	r3, [r5, #8]
 8004eb2:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004eb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004eba:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
  STORE_LE_16(buff+14,Mag->x);
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004ec4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004ec8:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
  STORE_LE_16(buff+16,Mag->y);
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
 8004ed2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004ed6:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
  STORE_LE_16(buff+18,Mag->z);
 8004eda:	68a3      	ldr	r3, [r4, #8]
 8004edc:	f88d 311e 	strb.w	r3, [sp, #286]	; 0x11e
 8004ee0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004ee4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 8004ee8:	480e      	ldr	r0, [pc, #56]	; (8004f24 <AccGyroMag_Update+0xf0>)
 8004eea:	ab43      	add	r3, sp, #268	; 0x10c
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2314      	movs	r3, #20
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	89c1      	ldrh	r1, [r0, #14]
 8004ef4:	8980      	ldrh	r0, [r0, #12]
 8004ef6:	f7ff fee5 	bl	8004cc4 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8004efa:	b908      	cbnz	r0, 8004f00 <AccGyroMag_Update+0xcc>
}
 8004efc:	b048      	add	sp, #288	; 0x120
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
      XPRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 8004f00:	ac03      	add	r4, sp, #12
 8004f02:	4d09      	ldr	r5, [pc, #36]	; (8004f28 <AccGyroMag_Update+0xf4>)
 8004f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	f824 3b02 	strh.w	r3, [r4], #2
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	7023      	strb	r3, [r4, #0]
 8004f16:	2122      	movs	r1, #34	; 0x22
 8004f18:	a803      	add	r0, sp, #12
 8004f1a:	f001 fa15 	bl	8006348 <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 8004f1e:	2047      	movs	r0, #71	; 0x47
 8004f20:	e7ec      	b.n	8004efc <AccGyroMag_Update+0xc8>
 8004f22:	bf00      	nop
 8004f24:	20000204 	.word	0x20000204
 8004f28:	0800ce90 	.word	0x0800ce90

08004f2c <setConnectable>:
{  
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	b092      	sub	sp, #72	; 0x48
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NodeName[1],NodeName[2],NodeName[3],NodeName[4],NodeName[5],NodeName[6],NodeName[7]};
 8004f30:	2609      	movs	r6, #9
 8004f32:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <setConnectable+0xe8>)
 8004f38:	f893 e001 	ldrb.w	lr, [r3, #1]
 8004f3c:	f88d e041 	strb.w	lr, [sp, #65]	; 0x41
 8004f40:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004f44:	f88d c042 	strb.w	ip, [sp, #66]	; 0x42
 8004f48:	78dc      	ldrb	r4, [r3, #3]
 8004f4a:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
 8004f4e:	7918      	ldrb	r0, [r3, #4]
 8004f50:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8004f54:	7959      	ldrb	r1, [r3, #5]
 8004f56:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8004f5a:	799a      	ldrb	r2, [r3, #6]
 8004f5c:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 8004f60:	79db      	ldrb	r3, [r3, #7]
 8004f62:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
  manuf_data[0 ] = 8U;
 8004f66:	2508      	movs	r5, #8
 8004f68:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  manuf_data[1 ] = 0x09U;
 8004f6c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
  manuf_data[2 ] = NodeName[1];/* Complete Name */
 8004f70:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
  manuf_data[3 ] = NodeName[2];
 8004f74:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
  manuf_data[4 ] = NodeName[3];
 8004f78:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  manuf_data[5 ] = NodeName[4];
 8004f7c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
  manuf_data[6 ] = NodeName[5];
 8004f80:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
  manuf_data[7 ] = NodeName[6];
 8004f84:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  manuf_data[8 ] = NodeName[7];           
 8004f88:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  manuf_data[9 ] = 15U;
 8004f8c:	230f      	movs	r3, #15
 8004f8e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  manuf_data[10] = 0xFFU;
 8004f92:	23ff      	movs	r3, #255	; 0xff
 8004f94:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  manuf_data[11] = 0x30U;/* STM Manufacter AD */
 8004f98:	2330      	movs	r3, #48	; 0x30
 8004f9a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  manuf_data[12] = 0x00U;
 8004f9e:	2400      	movs	r4, #0
 8004fa0:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  manuf_data[13] = 0x02U;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  manuf_data[14] = 0x02U; /* Board Type */
 8004faa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  manuf_data[15] = 0x08U; /* Firmware ID */
 8004fae:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
  manuf_data[16] = 0x00U;
 8004fb2:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  manuf_data[17] = 0x00U;
 8004fb6:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  manuf_data[18] = 0x00U;
 8004fba:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  manuf_data[19] = bdaddr[5];
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <setConnectable+0xec>)
 8004fc0:	795a      	ldrb	r2, [r3, #5]
 8004fc2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  manuf_data[20] = bdaddr[4];
 8004fc6:	791a      	ldrb	r2, [r3, #4]
 8004fc8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  manuf_data[21] = bdaddr[3];
 8004fcc:	78da      	ldrb	r2, [r3, #3]
 8004fce:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  manuf_data[22] = bdaddr[2];
 8004fd2:	789a      	ldrb	r2, [r3, #2]
 8004fd4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
  manuf_data[23] = bdaddr[1];
 8004fd8:	785a      	ldrb	r2, [r3, #1]
 8004fda:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
  manuf_data[24] = bdaddr[0];
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  hci_le_set_scan_resp_data(0,NULL);
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f005 fea5 	bl	800ad36 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 8004fec:	9406      	str	r4, [sp, #24]
 8004fee:	9405      	str	r4, [sp, #20]
 8004ff0:	9404      	str	r4, [sp, #16]
 8004ff2:	9403      	str	r4, [sp, #12]
 8004ff4:	ab10      	add	r3, sp, #64	; 0x40
 8004ff6:	9302      	str	r3, [sp, #8]
 8004ff8:	9501      	str	r5, [sp, #4]
 8004ffa:	9400      	str	r4, [sp, #0]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4622      	mov	r2, r4
 8005000:	4621      	mov	r1, r4
 8005002:	4620      	mov	r0, r4
 8005004:	f005 fb7c 	bl	800a700 <aci_gap_set_discoverable>
  aci_gap_update_adv_data(25, manuf_data);
 8005008:	a909      	add	r1, sp, #36	; 0x24
 800500a:	2019      	movs	r0, #25
 800500c:	f005 fc1f 	bl	800a84e <aci_gap_update_adv_data>
}
 8005010:	b012      	add	sp, #72	; 0x48
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	200006ac 	.word	0x200006ac
 8005018:	20000318 	.word	0x20000318

0800501c <Read_Request_CB>:
{
 800501c:	b508      	push	{r3, lr}
  if(connection_handle != 0)
 800501e:	4b03      	ldr	r3, [pc, #12]	; (800502c <Read_Request_CB+0x10>)
 8005020:	8898      	ldrh	r0, [r3, #4]
 8005022:	b900      	cbnz	r0, 8005026 <Read_Request_CB+0xa>
}
 8005024:	bd08      	pop	{r3, pc}
    aci_gatt_allow_read(connection_handle);
 8005026:	f005 fd46 	bl	800aab6 <aci_gatt_allow_read>
}
 800502a:	e7fb      	b.n	8005024 <Read_Request_CB+0x8>
 800502c:	20000204 	.word	0x20000204

08005030 <Attribute_Modified_CB>:
{
 8005030:	b508      	push	{r3, lr}
    	if(attr_handle == AccGyroMagCharHandle + 2) {
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <Attribute_Modified_CB+0x18>)
 8005034:	89db      	ldrh	r3, [r3, #14]
 8005036:	3302      	adds	r3, #2
 8005038:	4298      	cmp	r0, r3
 800503a:	d000      	beq.n	800503e <Attribute_Modified_CB+0xe>
}
 800503c:	bd08      	pop	{r3, pc}
      AccGyroMag_AttributeModified_CB(att_data);
 800503e:	4608      	mov	r0, r1
 8005040:	f7ff fdca 	bl	8004bd8 <AccGyroMag_AttributeModified_CB>
}
 8005044:	e7fa      	b.n	800503c <Attribute_Modified_CB+0xc>
 8005046:	bf00      	nop
 8005048:	20000204 	.word	0x20000204

0800504c <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 800504c:	b530      	push	{r4, r5, lr}
 800504e:	b0c1      	sub	sp, #260	; 0x104
 8005050:	4605      	mov	r5, r0
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  XPRINTF("HCI_Event_CB\r\n\r\n");
 8005052:	46ec      	mov	ip, sp
 8005054:	4c1d      	ldr	r4, [pc, #116]	; (80050cc <HCI_Event_CB+0x80>)
 8005056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005058:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f88c 3000 	strb.w	r3, [ip]
 8005062:	2110      	movs	r1, #16
 8005064:	4668      	mov	r0, sp
 8005066:	f001 f96f 	bl	8006348 <CDC_Fill_Buffer>

  if(hci_pckt->type != HCI_EVENT_PKT) {
 800506a:	782b      	ldrb	r3, [r5, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d106      	bne.n	800507e <HCI_Event_CB+0x32>
    return;
  }
  
  switch(event_pckt->evt){
 8005070:	786b      	ldrb	r3, [r5, #1]
 8005072:	2b3e      	cmp	r3, #62	; 0x3e
 8005074:	d008      	beq.n	8005088 <HCI_Event_CB+0x3c>
 8005076:	2bff      	cmp	r3, #255	; 0xff
 8005078:	d010      	beq.n	800509c <HCI_Event_CB+0x50>
 800507a:	2b05      	cmp	r3, #5
 800507c:	d001      	beq.n	8005082 <HCI_Event_CB+0x36>
        break;
      }
    }
    break;
  }
}
 800507e:	b041      	add	sp, #260	; 0x104
 8005080:	bd30      	pop	{r4, r5, pc}
      GAP_DisconnectionComplete_CB();
 8005082:	f7ff fdf1 	bl	8004c68 <GAP_DisconnectionComplete_CB>
    break;
 8005086:	e7fa      	b.n	800507e <HCI_Event_CB+0x32>
      switch(evt->subevent){
 8005088:	78eb      	ldrb	r3, [r5, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d1f7      	bne.n	800507e <HCI_Event_CB+0x32>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800508e:	f8b5 1005 	ldrh.w	r1, [r5, #5]
 8005092:	f105 0009 	add.w	r0, r5, #9
 8005096:	f7ff fd93 	bl	8004bc0 <GAP_ConnectionComplete_CB>
        break;
 800509a:	e7f0      	b.n	800507e <HCI_Event_CB+0x32>
      switch(blue_evt->ecode){
 800509c:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 80050a0:	f640 4201 	movw	r2, #3073	; 0xc01
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d008      	beq.n	80050ba <HCI_Event_CB+0x6e>
 80050a8:	f640 4214 	movw	r2, #3092	; 0xc14
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d1e6      	bne.n	800507e <HCI_Event_CB+0x32>
          Read_Request_CB(pr->attr_handle);                    
 80050b0:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 80050b4:	f7ff ffb2 	bl	800501c <Read_Request_CB>
        break;
 80050b8:	e7e1      	b.n	800507e <HCI_Event_CB+0x32>
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 80050ba:	7a6a      	ldrb	r2, [r5, #9]
 80050bc:	f105 010c 	add.w	r1, r5, #12
 80050c0:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 80050c4:	f7ff ffb4 	bl	8005030 <Attribute_Modified_CB>
        break;
 80050c8:	e7d9      	b.n	800507e <HCI_Event_CB+0x32>
 80050ca:	bf00      	nop
 80050cc:	0800ceb4 	.word	0x0800ceb4

080050d0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d2:	b0c9      	sub	sp, #292	; 0x124
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80050d4:	f002 fc24 	bl	8007920 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050d8:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <HCI_TL_SPI_Init+0xb4>)
 80050da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80050e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80050e8:	9200      	str	r2, [sp, #0]
 80050ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ee:	f042 0204 	orr.w	r2, r2, #4
 80050f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80050f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f6:	f002 0204 	and.w	r2, r2, #4
 80050fa:	9201      	str	r2, [sp, #4]
 80050fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005100:	f042 0202 	orr.w	r2, r2, #2
 8005104:	64da      	str	r2, [r3, #76]	; 0x4c
 8005106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	9302      	str	r3, [sp, #8]
 800510e:	9b02      	ldr	r3, [sp, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005110:	4e1d      	ldr	r6, [pc, #116]	; (8005188 <HCI_TL_SPI_Init+0xb8>)
 8005112:	2201      	movs	r2, #1
 8005114:	2104      	movs	r1, #4
 8005116:	4630      	mov	r0, r6
 8005118:	f001 fe91 	bl	8006e3e <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800511c:	2320      	movs	r3, #32
 800511e:	9343      	str	r3, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HCI_TL_SPI_Init+0xbc>)
 8005122:	9344      	str	r3, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2400      	movs	r4, #0
 8005126:	9445      	str	r4, [sp, #276]	; 0x114
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8005128:	a943      	add	r1, sp, #268	; 0x10c
 800512a:	4819      	ldr	r0, [pc, #100]	; (8005190 <HCI_TL_SPI_Init+0xc0>)
 800512c:	f001 fcfc 	bl	8006b28 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8005130:	2501      	movs	r5, #1
 8005132:	9543      	str	r5, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005134:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005138:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800513a:	a943      	add	r1, sp, #268	; 0x10c
 800513c:	4815      	ldr	r0, [pc, #84]	; (8005194 <HCI_TL_SPI_Init+0xc4>)
 800513e:	f001 fcf3 	bl	8006b28 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8005142:	2704      	movs	r7, #4
 8005144:	9743      	str	r7, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005146:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514a:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800514c:	a943      	add	r1, sp, #268	; 0x10c
 800514e:	4630      	mov	r0, r6
 8005150:	f001 fcea 	bl	8006b28 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005154:	462a      	mov	r2, r5
 8005156:	4639      	mov	r1, r7
 8005158:	4630      	mov	r0, r6
 800515a:	f001 fe70 	bl	8006e3e <HAL_GPIO_WritePin>

  XPRINTF("\r\nIntialised HCI SPI.\r\n");
 800515e:	f10d 0c0c 	add.w	ip, sp, #12
 8005162:	4c0d      	ldr	r4, [pc, #52]	; (8005198 <HCI_TL_SPI_Init+0xc8>)
 8005164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005166:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800516a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800516e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005172:	2117      	movs	r1, #23
 8005174:	a803      	add	r0, sp, #12
 8005176:	f001 f8e7 	bl	8006348 <CDC_Fill_Buffer>
    
  return BSP_SPI1_Init();
 800517a:	f001 fb8b 	bl	8006894 <BSP_SPI1_Init>
}
 800517e:	b049      	add	sp, #292	; 0x124
 8005180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	48000400 	.word	0x48000400
 800518c:	10110000 	.word	0x10110000
 8005190:	48000800 	.word	0x48000800
 8005194:	48001c00 	.word	0x48001c00
 8005198:	0800cec8 	.word	0x0800cec8

0800519c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800519c:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800519e:	2120      	movs	r1, #32
 80051a0:	4806      	ldr	r0, [pc, #24]	; (80051bc <HCI_TL_SPI_DeInit+0x20>)
 80051a2:	f001 fdad 	bl	8006d00 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 80051a6:	2104      	movs	r1, #4
 80051a8:	4805      	ldr	r0, [pc, #20]	; (80051c0 <HCI_TL_SPI_DeInit+0x24>)
 80051aa:	f001 fda9 	bl	8006d00 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80051ae:	2101      	movs	r1, #1
 80051b0:	4804      	ldr	r0, [pc, #16]	; (80051c4 <HCI_TL_SPI_DeInit+0x28>)
 80051b2:	f001 fda5 	bl	8006d00 <HAL_GPIO_DeInit>
  return 0;
}
 80051b6:	2000      	movs	r0, #0
 80051b8:	bd08      	pop	{r3, pc}
 80051ba:	bf00      	nop
 80051bc:	48000800 	.word	0x48000800
 80051c0:	48000400 	.word	0x48000400
 80051c4:	48001c00 	.word	0x48001c00

080051c8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80051c8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80051ca:	4c09      	ldr	r4, [pc, #36]	; (80051f0 <HCI_TL_SPI_Reset+0x28>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	2101      	movs	r1, #1
 80051d0:	4620      	mov	r0, r4
 80051d2:	f001 fe34 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80051d6:	2005      	movs	r0, #5
 80051d8:	f000 fe00 	bl	8005ddc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80051dc:	2201      	movs	r2, #1
 80051de:	4611      	mov	r1, r2
 80051e0:	4620      	mov	r0, r4
 80051e2:	f001 fe2c 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80051e6:	2005      	movs	r0, #5
 80051e8:	f000 fdf8 	bl	8005ddc <HAL_Delay>
  return 0;
}  
 80051ec:	2000      	movs	r0, #0
 80051ee:	bd10      	pop	{r4, pc}
 80051f0:	48001c00 	.word	0x48001c00

080051f4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	4606      	mov	r6, r0
 80051fa:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 80051fc:	23ff      	movs	r3, #255	; 0xff
 80051fe:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8005202:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <HCI_TL_SPI_Receive+0x84>)
 8005204:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005208:	9002      	str	r0, [sp, #8]
 800520a:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800520e:	2200      	movs	r2, #0
 8005210:	2104      	movs	r1, #4
 8005212:	481a      	ldr	r0, [pc, #104]	; (800527c <HCI_TL_SPI_Receive+0x88>)
 8005214:	f001 fe13 	bl	8006e3e <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8005218:	2205      	movs	r2, #5
 800521a:	4669      	mov	r1, sp
 800521c:	a802      	add	r0, sp, #8
 800521e:	f001 fafd 	bl	800681c <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8005222:	f89d 3000 	ldrb.w	r3, [sp]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d008      	beq.n	800523c <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 800522a:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800522c:	2201      	movs	r2, #1
 800522e:	2104      	movs	r1, #4
 8005230:	4812      	ldr	r0, [pc, #72]	; (800527c <HCI_TL_SPI_Receive+0x88>)
 8005232:	f001 fe04 	bl	8006e3e <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8005236:	4620      	mov	r0, r4
 8005238:	b004      	add	sp, #16
 800523a:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800523c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005240:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0) {
 8005244:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005248:	d014      	beq.n	8005274 <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 800524a:	42ab      	cmp	r3, r5
 800524c:	d800      	bhi.n	8005250 <HCI_TL_SPI_Receive+0x5c>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800524e:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 8005250:	2400      	movs	r4, #0
 8005252:	e00b      	b.n	800526c <HCI_TL_SPI_Receive+0x78>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8005254:	2201      	movs	r2, #1
 8005256:	f10d 010e 	add.w	r1, sp, #14
 800525a:	f10d 000f 	add.w	r0, sp, #15
 800525e:	f001 fadd 	bl	800681c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8005262:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005266:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 8005268:	3401      	adds	r4, #1
 800526a:	b2e4      	uxtb	r4, r4
 800526c:	b2a3      	uxth	r3, r4
 800526e:	42ab      	cmp	r3, r5
 8005270:	d3f0      	bcc.n	8005254 <HCI_TL_SPI_Receive+0x60>
 8005272:	e7db      	b.n	800522c <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 8005274:	2400      	movs	r4, #0
 8005276:	e7d9      	b.n	800522c <HCI_TL_SPI_Receive+0x38>
 8005278:	0800cdb8 	.word	0x0800cdb8
 800527c:	48000400 	.word	0x48000400

08005280 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b085      	sub	sp, #20
 8005284:	4607      	mov	r7, r0
 8005286:	460e      	mov	r6, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8005288:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <HCI_TL_SPI_Send+0x7c>)
 800528a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800528e:	9002      	str	r0, [sp, #8]
 8005290:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8005294:	f001 fbd6 	bl	8006a44 <HAL_GetTick>
 8005298:	4605      	mov	r5, r0
 800529a:	e011      	b.n	80052c0 <HCI_TL_SPI_Send+0x40>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 800529c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80052a0:	42b3      	cmp	r3, r6
 80052a2:	d21e      	bcs.n	80052e2 <HCI_TL_SPI_Send+0x62>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80052a4:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80052a8:	2201      	movs	r2, #1
 80052aa:	2104      	movs	r1, #4
 80052ac:	4814      	ldr	r0, [pc, #80]	; (8005300 <HCI_TL_SPI_Send+0x80>)
 80052ae:	f001 fdc6 	bl	8006e3e <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80052b2:	f001 fbc7 	bl	8006a44 <HAL_GetTick>
 80052b6:	1b40      	subs	r0, r0, r5
 80052b8:	280f      	cmp	r0, #15
 80052ba:	d819      	bhi.n	80052f0 <HCI_TL_SPI_Send+0x70>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80052bc:	2c00      	cmp	r4, #0
 80052be:	da19      	bge.n	80052f4 <HCI_TL_SPI_Send+0x74>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80052c0:	2200      	movs	r2, #0
 80052c2:	2104      	movs	r1, #4
 80052c4:	480e      	ldr	r0, [pc, #56]	; (8005300 <HCI_TL_SPI_Send+0x80>)
 80052c6:	f001 fdba 	bl	8006e3e <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80052ca:	2205      	movs	r2, #5
 80052cc:	4669      	mov	r1, sp
 80052ce:	a802      	add	r0, sp, #8
 80052d0:	f001 faa4 	bl	800681c <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 80052d4:	f89d 3000 	ldrb.w	r3, [sp]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d0df      	beq.n	800529c <HCI_TL_SPI_Send+0x1c>
      result = -1;
 80052dc:	f04f 34ff 	mov.w	r4, #4294967295
 80052e0:	e7e2      	b.n	80052a8 <HCI_TL_SPI_Send+0x28>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80052e2:	4632      	mov	r2, r6
 80052e4:	4907      	ldr	r1, [pc, #28]	; (8005304 <HCI_TL_SPI_Send+0x84>)
 80052e6:	4638      	mov	r0, r7
 80052e8:	f001 fa98 	bl	800681c <BSP_SPI1_SendRecv>
    result = 0;
 80052ec:	2400      	movs	r4, #0
 80052ee:	e7db      	b.n	80052a8 <HCI_TL_SPI_Send+0x28>
      result = -3;
 80052f0:	f06f 0402 	mvn.w	r4, #2
  
  return result;
}
 80052f4:	4620      	mov	r0, r4
 80052f6:	b005      	add	sp, #20
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fa:	bf00      	nop
 80052fc:	0800cdc0 	.word	0x0800cdc0
 8005300:	48000400 	.word	0x48000400
 8005304:	20000218 	.word	0x20000218

08005308 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8005308:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800530a:	2120      	movs	r1, #32
 800530c:	4803      	ldr	r0, [pc, #12]	; (800531c <IsDataAvailable+0x14>)
 800530e:	f001 fd8f 	bl	8006e30 <HAL_GPIO_ReadPin>
} 
 8005312:	2801      	cmp	r0, #1
 8005314:	bf14      	ite	ne
 8005316:	2000      	movne	r0, #0
 8005318:	2001      	moveq	r0, #1
 800531a:	bd08      	pop	{r3, pc}
 800531c:	48000800 	.word	0x48000800

08005320 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8005320:	b500      	push	{lr}
 8005322:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <hci_tl_lowlevel_init+0x38>)
 8005326:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <hci_tl_lowlevel_init+0x3c>)
 800532a:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <hci_tl_lowlevel_init+0x40>)
 800532e:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <hci_tl_lowlevel_init+0x44>)
 8005332:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <hci_tl_lowlevel_init+0x48>)
 8005336:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <hci_tl_lowlevel_init+0x4c>)
 800533a:	9307      	str	r3, [sp, #28]
  
  hci_register_io_bus (&fops);
 800533c:	a801      	add	r0, sp, #4
 800533e:	f005 fdbb 	bl	800aeb8 <hci_register_io_bus>
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  //HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
  //HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x03, 0x00);
 8005342:	2200      	movs	r2, #0
 8005344:	2103      	movs	r1, #3
 8005346:	2017      	movs	r0, #23
 8005348:	f001 fb94 	bl	8006a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800534c:	2017      	movs	r0, #23
 800534e:	f001 fbc9 	bl	8006ae4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8005352:	b009      	add	sp, #36	; 0x24
 8005354:	f85d fb04 	ldr.w	pc, [sp], #4
 8005358:	080050d1 	.word	0x080050d1
 800535c:	0800519d 	.word	0x0800519d
 8005360:	08005281 	.word	0x08005281
 8005364:	080051f5 	.word	0x080051f5
 8005368:	080051c9 	.word	0x080051c9
 800536c:	08006849 	.word	0x08006849

08005370 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8005370:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8005372:	f7ff ffc9 	bl	8005308 <IsDataAvailable>
 8005376:	b120      	cbz	r0, 8005382 <hci_tl_lowlevel_isr+0x12>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8005378:	2000      	movs	r0, #0
 800537a:	f005 fe77 	bl	800b06c <hci_notify_asynch_evt>
 800537e:	2800      	cmp	r0, #0
 8005380:	d0f7      	beq.n	8005372 <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8005382:	bd08      	pop	{r3, pc}

08005384 <SystemClock_Config>:
  *            PLL_Q                          = 4
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void) {
 8005384:	b510      	push	{r4, lr}
 8005386:	b0ba      	sub	sp, #232	; 0xe8
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005388:	2400      	movs	r4, #0
 800538a:	9435      	str	r4, [sp, #212]	; 0xd4
 800538c:	9436      	str	r4, [sp, #216]	; 0xd8
 800538e:	9437      	str	r4, [sp, #220]	; 0xdc
 8005390:	9438      	str	r4, [sp, #224]	; 0xe0
 8005392:	9439      	str	r4, [sp, #228]	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005394:	2244      	movs	r2, #68	; 0x44
 8005396:	4621      	mov	r1, r4
 8005398:	a824      	add	r0, sp, #144	; 0x90
 800539a:	f007 f929 	bl	800c5f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800539e:	2288      	movs	r2, #136	; 0x88
 80053a0:	4621      	mov	r1, r4
 80053a2:	a802      	add	r0, sp, #8
 80053a4:	f007 f924 	bl	800c5f0 <memset>

  __HAL_RCC_PWR_CLK_ENABLE();
 80053a8:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <SystemClock_Config+0xd0>)
 80053aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053b0:	659a      	str	r2, [r3, #88]	; 0x58
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 80053bc:	f002 fa98 	bl	80078f0 <HAL_PWR_EnableBkUpAccess>

  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80053c0:	2304      	movs	r3, #4
 80053c2:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80053c4:	2301      	movs	r3, #1
 80053c6:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80053c8:	a824      	add	r0, sp, #144	; 0x90
 80053ca:	f002 fb53 	bl	8007a74 <HAL_RCC_OscConfig>
 80053ce:	b100      	cbz	r0, 80053d2 <SystemClock_Config+0x4e>
    while (1);
 80053d0:	e7fe      	b.n	80053d0 <SystemClock_Config+0x4c>
  }

  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 80053d2:	f003 faa1 	bl	8008918 <HAL_RCCEx_DisableLSECSS>

  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80053d6:	2310      	movs	r3, #16
 80053d8:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80053da:	2301      	movs	r3, #1
 80053dc:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80053de:	2200      	movs	r2, #0
 80053e0:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80053e2:	22b0      	movs	r2, #176	; 0xb0
 80053e4:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053e6:	2202      	movs	r2, #2
 80053e8:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80053ea:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 6;
 80053ec:	2306      	movs	r3, #6
 80053ee:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 40;
 80053f0:	2328      	movs	r3, #40	; 0x28
 80053f2:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = 7;
 80053f4:	2307      	movs	r3, #7
 80053f6:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80053f8:	2304      	movs	r3, #4
 80053fa:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR = 4;
 80053fc:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80053fe:	a824      	add	r0, sp, #144	; 0x90
 8005400:	f002 fb38 	bl	8007a74 <HAL_RCC_OscConfig>
 8005404:	b100      	cbz	r0, 8005408 <SystemClock_Config+0x84>
    while (1);
 8005406:	e7fe      	b.n	8005406 <SystemClock_Config+0x82>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800540c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800540e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005412:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8005414:	a802      	add	r0, sp, #8
 8005416:	f003 f855 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>
 800541a:	b100      	cbz	r0, 800541e <SystemClock_Config+0x9a>
    while (1);
 800541c:	e7fe      	b.n	800541c <SystemClock_Config+0x98>
  }

  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 800541e:	f003 fa89 	bl	8008934 <HAL_RCCEx_EnableMSIPLLMode>

  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005426:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8005428:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800542c:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800542e:	a802      	add	r0, sp, #8
 8005430:	f003 f848 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005434:	230f      	movs	r3, #15
 8005436:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005438:	2303      	movs	r3, #3
 800543a:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800543c:	2300      	movs	r3, #0
 800543e:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005440:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005442:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8005444:	2104      	movs	r1, #4
 8005446:	a835      	add	r0, sp, #212	; 0xd4
 8005448:	f002 fe2a 	bl	80080a0 <HAL_RCC_ClockConfig>
 800544c:	b100      	cbz	r0, 8005450 <SystemClock_Config+0xcc>
    while (1);
 800544e:	e7fe      	b.n	800544e <SystemClock_Config+0xca>
  }
}
 8005450:	b03a      	add	sp, #232	; 0xe8
 8005452:	bd10      	pop	{r4, pc}
 8005454:	40021000 	.word	0x40021000

08005458 <BSP_LSM303AGR_WriteReg_Acc>:
static int32_t BSP_LSM303AGR_WriteReg_Acc(uint16_t Reg, uint8_t* pdata, uint16_t len) {
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	460d      	mov	r5, r1
 800545e:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005460:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_ACC_CS_LOW();
 8005464:	2200      	movs	r2, #0
 8005466:	2110      	movs	r1, #16
 8005468:	480f      	ldr	r0, [pc, #60]	; (80054a8 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 800546a:	f001 fce8 	bl	8006e3e <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1) {
 800546e:	2101      	movs	r1, #1
 8005470:	f10d 0007 	add.w	r0, sp, #7
 8005474:	f001 f9c0 	bl	80067f8 <BSP_SPI2_Send>
 8005478:	2801      	cmp	r0, #1
 800547a:	d00f      	beq.n	800549c <BSP_LSM303AGR_WriteReg_Acc+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800547c:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len) {
 8005480:	4621      	mov	r1, r4
 8005482:	4628      	mov	r0, r5
 8005484:	f001 f9b8 	bl	80067f8 <BSP_SPI2_Send>
 8005488:	42a0      	cmp	r0, r4
 800548a:	d109      	bne.n	80054a0 <BSP_LSM303AGR_WriteReg_Acc+0x48>
  LSM_ACC_CS_HIGH();
 800548c:	2201      	movs	r2, #1
 800548e:	2110      	movs	r1, #16
 8005490:	4805      	ldr	r0, [pc, #20]	; (80054a8 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8005492:	f001 fcd4 	bl	8006e3e <HAL_GPIO_WritePin>
}
 8005496:	4630      	mov	r0, r6
 8005498:	b002      	add	sp, #8
 800549a:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 800549c:	2600      	movs	r6, #0
 800549e:	e7ef      	b.n	8005480 <BSP_LSM303AGR_WriteReg_Acc+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80054a0:	f06f 0605 	mvn.w	r6, #5
 80054a4:	e7f2      	b.n	800548c <BSP_LSM303AGR_WriteReg_Acc+0x34>
 80054a6:	bf00      	nop
 80054a8:	48000800 	.word	0x48000800

080054ac <startAcc>:
static void startAcc() { //#CS704 - Write SPI commands to initiliase Accelerometer
 80054ac:	b510      	push	{r4, lr}
 80054ae:	b082      	sub	sp, #8
  inData = 0b00000000; // No Filtering
 80054b0:	2400      	movs	r4, #0
 80054b2:	f88d 4007 	strb.w	r4, [sp, #7]
  BSP_LSM303AGR_WriteReg_Acc(0x21, &inData, 1);
 80054b6:	2201      	movs	r2, #1
 80054b8:	f10d 0107 	add.w	r1, sp, #7
 80054bc:	2021      	movs	r0, #33	; 0x21
 80054be:	f7ff ffcb 	bl	8005458 <BSP_LSM303AGR_WriteReg_Acc>
  inData = 0b00000000; // No inturrepts, or fifo watermark
 80054c2:	f88d 4007 	strb.w	r4, [sp, #7]
  BSP_LSM303AGR_WriteReg_Acc(0x22, &inData, 1);
 80054c6:	2201      	movs	r2, #1
 80054c8:	f10d 0107 	add.w	r1, sp, #7
 80054cc:	2022      	movs	r0, #34	; 0x22
 80054ce:	f7ff ffc3 	bl	8005458 <BSP_LSM303AGR_WriteReg_Acc>
  inData = 0b10001001; // non con write, Big Endian,  +- 2g, High Accuracy Mode, No Self Test, No 3-Wire SPI Interface
 80054d2:	2389      	movs	r3, #137	; 0x89
 80054d4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSP_LSM303AGR_WriteReg_Acc(0x23, &inData, 1);
 80054d8:	2201      	movs	r2, #1
 80054da:	f10d 0107 	add.w	r1, sp, #7
 80054de:	2023      	movs	r0, #35	; 0x23
 80054e0:	f7ff ffba 	bl	8005458 <BSP_LSM303AGR_WriteReg_Acc>
  inData = 0b00000000; // Dont Reboot Memory, FIFO Disabled, null, null, int request not latched, no 4d, no latch, no 4d
 80054e4:	f88d 4007 	strb.w	r4, [sp, #7]
  BSP_LSM303AGR_WriteReg_Acc(0x24, &inData, 1);
 80054e8:	2201      	movs	r2, #1
 80054ea:	f10d 0107 	add.w	r1, sp, #7
 80054ee:	2024      	movs	r0, #36	; 0x24
 80054f0:	f7ff ffb2 	bl	8005458 <BSP_LSM303AGR_WriteReg_Acc>
  inData = 0b00000000; // No interrupts
 80054f4:	f88d 4007 	strb.w	r4, [sp, #7]
  BSP_LSM303AGR_WriteReg_Acc(0x25, &inData, 1);
 80054f8:	2201      	movs	r2, #1
 80054fa:	f10d 0107 	add.w	r1, sp, #7
 80054fe:	2025      	movs	r0, #37	; 0x25
 8005500:	f7ff ffaa 	bl	8005458 <BSP_LSM303AGR_WriteReg_Acc>
  inData = 0b00100111; // 10Hz, Not Low Power, all Axii enabled
 8005504:	2327      	movs	r3, #39	; 0x27
 8005506:	f88d 3007 	strb.w	r3, [sp, #7]
  BSP_LSM303AGR_WriteReg_Acc(0x20, &inData, 1);
 800550a:	2201      	movs	r2, #1
 800550c:	f10d 0107 	add.w	r1, sp, #7
 8005510:	2020      	movs	r0, #32
 8005512:	f7ff ffa1 	bl	8005458 <BSP_LSM303AGR_WriteReg_Acc>
}
 8005516:	b002      	add	sp, #8
 8005518:	bd10      	pop	{r4, pc}
	...

0800551c <BSP_LSM303AGR_WriteReg_Mag>:
static int32_t BSP_LSM303AGR_WriteReg_Mag(uint16_t Reg, uint8_t* pdata, uint16_t len) {
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	460d      	mov	r5, r1
 8005522:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005524:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_MAG_CS_LOW();
 8005528:	2200      	movs	r2, #0
 800552a:	2102      	movs	r1, #2
 800552c:	480f      	ldr	r0, [pc, #60]	; (800556c <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 800552e:	f001 fc86 	bl	8006e3e <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1) {
 8005532:	2101      	movs	r1, #1
 8005534:	f10d 0007 	add.w	r0, sp, #7
 8005538:	f001 f95e 	bl	80067f8 <BSP_SPI2_Send>
 800553c:	2801      	cmp	r0, #1
 800553e:	d00f      	beq.n	8005560 <BSP_LSM303AGR_WriteReg_Mag+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005540:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len) {
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	f001 f956 	bl	80067f8 <BSP_SPI2_Send>
 800554c:	42a0      	cmp	r0, r4
 800554e:	d109      	bne.n	8005564 <BSP_LSM303AGR_WriteReg_Mag+0x48>
  LSM_MAG_CS_HIGH();
 8005550:	2201      	movs	r2, #1
 8005552:	2102      	movs	r1, #2
 8005554:	4805      	ldr	r0, [pc, #20]	; (800556c <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 8005556:	f001 fc72 	bl	8006e3e <HAL_GPIO_WritePin>
}
 800555a:	4630      	mov	r0, r6
 800555c:	b002      	add	sp, #8
 800555e:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 8005560:	2600      	movs	r6, #0
 8005562:	e7ef      	b.n	8005544 <BSP_LSM303AGR_WriteReg_Mag+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005564:	f06f 0605 	mvn.w	r6, #5
 8005568:	e7f2      	b.n	8005550 <BSP_LSM303AGR_WriteReg_Mag+0x34>
 800556a:	bf00      	nop
 800556c:	48000400 	.word	0x48000400

08005570 <startMag>:
static void startMag() { //#CS704 - Write SPI commands to initiliase Magnetometer
 8005570:	b510      	push	{r4, lr}
 8005572:	b082      	sub	sp, #8
  inData = 0b00000000; // No temp comp, no reboot, no reset, no low power, 10Hz, continous mode
 8005574:	2400      	movs	r4, #0
 8005576:	f88d 4007 	strb.w	r4, [sp, #7]
  BSP_LSM303AGR_WriteReg_Mag(0x60, &inData, 1);
 800557a:	2201      	movs	r2, #1
 800557c:	f10d 0107 	add.w	r1, sp, #7
 8005580:	2060      	movs	r0, #96	; 0x60
 8005582:	f7ff ffcb 	bl	800551c <BSP_LSM303AGR_WriteReg_Mag>
  inData = 0b00000000; // null, null, null, idk and some other stuff
 8005586:	f88d 4007 	strb.w	r4, [sp, #7]
  BSP_LSM303AGR_WriteReg_Mag(0x61, &inData, 1);
 800558a:	2201      	movs	r2, #1
 800558c:	f10d 0107 	add.w	r1, sp, #7
 8005590:	2061      	movs	r0, #97	; 0x61
 8005592:	f7ff ffc3 	bl	800551c <BSP_LSM303AGR_WriteReg_Mag>
  inData = 0b00000001;
 8005596:	2201      	movs	r2, #1
 8005598:	f88d 2007 	strb.w	r2, [sp, #7]
  BSP_LSM303AGR_WriteReg_Mag(0x62, &inData, 1);
 800559c:	f10d 0107 	add.w	r1, sp, #7
 80055a0:	2062      	movs	r0, #98	; 0x62
 80055a2:	f7ff ffbb 	bl	800551c <BSP_LSM303AGR_WriteReg_Mag>
}
 80055a6:	b002      	add	sp, #8
 80055a8:	bd10      	pop	{r4, pc}
	...

080055ac <Init_BlueNRG_Stack>:
static void Init_BlueNRG_Stack(void) {
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	b0d3      	sub	sp, #332	; 0x14c
  char customName[8] = "CSys704";
 80055b0:	4a6c      	ldr	r2, [pc, #432]	; (8005764 <Init_BlueNRG_Stack+0x1b8>)
 80055b2:	ab4e      	add	r3, sp, #312	; 0x138
 80055b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055b8:	e883 0003 	stmia.w	r3, {r0, r1}
  for (int i = 0; i < 7; i++)
 80055bc:	2300      	movs	r3, #0
 80055be:	2b06      	cmp	r3, #6
 80055c0:	dc08      	bgt.n	80055d4 <Init_BlueNRG_Stack+0x28>
    BoardName[i] = customName[i];
 80055c2:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 80055c6:	446a      	add	r2, sp
 80055c8:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80055cc:	f802 1c08 	strb.w	r1, [r2, #-8]
  for (int i = 0; i < 7; i++)
 80055d0:	3301      	adds	r3, #1
 80055d2:	e7f4      	b.n	80055be <Init_BlueNRG_Stack+0x12>
  BoardName[7] = 0;
 80055d4:	2100      	movs	r1, #0
 80055d6:	f88d 1147 	strb.w	r1, [sp, #327]	; 0x147
  hci_init(HCI_Event_CB, NULL);
 80055da:	4863      	ldr	r0, [pc, #396]	; (8005768 <Init_BlueNRG_Stack+0x1bc>)
 80055dc:	f005 fc42 	bl	800ae64 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80055e0:	f50d 7197 	add.w	r1, sp, #302	; 0x12e
 80055e4:	a84c      	add	r0, sp, #304	; 0x130
 80055e6:	f005 fb24 	bl	800ac32 <getBlueNRGVersion>
  aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, 6, &data_len_out, bdaddr);
 80055ea:	4c60      	ldr	r4, [pc, #384]	; (800576c <Init_BlueNRG_Stack+0x1c0>)
 80055ec:	4623      	mov	r3, r4
 80055ee:	f20d 1231 	addw	r2, sp, #305	; 0x131
 80055f2:	2106      	movs	r1, #6
 80055f4:	2080      	movs	r0, #128	; 0x80
 80055f6:	f005 fab8 	bl	800ab6a <aci_hal_read_config_data>
  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80055fa:	7963      	ldrb	r3, [r4, #5]
 80055fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005600:	2bc0      	cmp	r3, #192	; 0xc0
 8005602:	d016      	beq.n	8005632 <Init_BlueNRG_Stack+0x86>
    XPRINTF("\r\nStatic Random address not well formed.\r\n");
 8005604:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8005608:	4c59      	ldr	r4, [pc, #356]	; (8005770 <Init_BlueNRG_Stack+0x1c4>)
 800560a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800560c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005612:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005616:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800561a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800561e:	f82c 2b02 	strh.w	r2, [ip], #2
 8005622:	0c12      	lsrs	r2, r2, #16
 8005624:	f88c 2000 	strb.w	r2, [ip]
 8005628:	212a      	movs	r1, #42	; 0x2a
 800562a:	a80b      	add	r0, sp, #44	; 0x2c
 800562c:	f000 fe8c 	bl	8006348 <CDC_Fill_Buffer>
    while (1);
 8005630:	e7fe      	b.n	8005630 <Init_BlueNRG_Stack+0x84>
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, data_len_out,
 8005632:	4a4e      	ldr	r2, [pc, #312]	; (800576c <Init_BlueNRG_Stack+0x1c0>)
 8005634:	f89d 1131 	ldrb.w	r1, [sp, #305]	; 0x131
 8005638:	2000      	movs	r0, #0
 800563a:	f005 fa63 	bl	800ab04 <aci_hal_write_config_data>
  hci_reset();
 800563e:	f005 fb21 	bl	800ac84 <hci_reset>
  ret = aci_gatt_init();
 8005642:	f005 f934 	bl	800a8ae <aci_gatt_init>
  if (ret) {
 8005646:	bb38      	cbnz	r0, 8005698 <Init_BlueNRG_Stack+0xec>
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005648:	f50d 7399 	add.w	r3, sp, #306	; 0x132
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	ab4d      	add	r3, sp, #308	; 0x134
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	f50d 739b 	add.w	r3, sp, #310	; 0x136
 8005656:	2207      	movs	r2, #7
 8005658:	2100      	movs	r1, #0
 800565a:	2001      	movs	r0, #1
 800565c:	f005 f818 	bl	800a690 <aci_gap_init_IDB05A1>
  if (ret != BLE_STATUS_SUCCESS) {
 8005660:	bb48      	cbnz	r0, 80056b6 <Init_BlueNRG_Stack+0x10a>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8005662:	ab50      	add	r3, sp, #320	; 0x140
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	2307      	movs	r3, #7
 8005668:	2200      	movs	r2, #0
 800566a:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 800566e:	f8bd 0136 	ldrh.w	r0, [sp, #310]	; 0x136
 8005672:	f005 f9e8 	bl	800aa46 <aci_gatt_update_char_value>
  if (ret) {
 8005676:	b348      	cbz	r0, 80056cc <Init_BlueNRG_Stack+0x120>
    XPRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8005678:	ac0b      	add	r4, sp, #44	; 0x2c
 800567a:	4d3e      	ldr	r5, [pc, #248]	; (8005774 <Init_BlueNRG_Stack+0x1c8>)
 800567c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800567e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005684:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005688:	f844 0b04 	str.w	r0, [r4], #4
 800568c:	8021      	strh	r1, [r4, #0]
 800568e:	2125      	movs	r1, #37	; 0x25
 8005690:	a80b      	add	r0, sp, #44	; 0x2c
 8005692:	f000 fe59 	bl	8006348 <CDC_Fill_Buffer>
    while (1);
 8005696:	e7fe      	b.n	8005696 <Init_BlueNRG_Stack+0xea>
    XPRINTF("\r\nGATT_Init failed\r\n");
 8005698:	ac0b      	add	r4, sp, #44	; 0x2c
 800569a:	4d37      	ldr	r5, [pc, #220]	; (8005778 <Init_BlueNRG_Stack+0x1cc>)
 800569c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800569e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80056a4:	f844 0b04 	str.w	r0, [r4], #4
 80056a8:	7021      	strb	r1, [r4, #0]
 80056aa:	2114      	movs	r1, #20
 80056ac:	a80b      	add	r0, sp, #44	; 0x2c
 80056ae:	f000 fe4b 	bl	8006348 <CDC_Fill_Buffer>
}
 80056b2:	b053      	add	sp, #332	; 0x14c
 80056b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    XPRINTF("\r\nGAP_Init failed\r\n");
 80056b6:	ac0b      	add	r4, sp, #44	; 0x2c
 80056b8:	4d30      	ldr	r5, [pc, #192]	; (800577c <Init_BlueNRG_Stack+0x1d0>)
 80056ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	2113      	movs	r1, #19
 80056c4:	a80b      	add	r0, sp, #44	; 0x2c
 80056c6:	f000 fe3f 	bl	8006348 <CDC_Fill_Buffer>
    goto fail;
 80056ca:	e7f2      	b.n	80056b2 <Init_BlueNRG_Stack+0x106>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80056cc:	2001      	movs	r0, #1
 80056ce:	9003      	str	r0, [sp, #12]
 80056d0:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <Init_BlueNRG_Stack+0x1d4>)
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	2100      	movs	r1, #0
 80056d6:	9101      	str	r1, [sp, #4]
 80056d8:	2310      	movs	r3, #16
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	2307      	movs	r3, #7
 80056de:	460a      	mov	r2, r1
 80056e0:	f005 f86e 	bl	800a7c0 <aci_gap_set_auth_requirement>
  if (ret != BLE_STATUS_SUCCESS) {
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d12d      	bne.n	8005744 <Init_BlueNRG_Stack+0x198>
  XPRINTF("SERVER: BLE Stack Initialized \r\n"
 80056e8:	f89d 2130 	ldrb.w	r2, [sp, #304]	; 0x130
 80056ec:	f8bd 112e 	ldrh.w	r1, [sp, #302]	; 0x12e
 80056f0:	f001 000f 	and.w	r0, r1, #15
 80056f4:	4b1d      	ldr	r3, [pc, #116]	; (800576c <Init_BlueNRG_Stack+0x1c0>)
 80056f6:	795c      	ldrb	r4, [r3, #5]
 80056f8:	791f      	ldrb	r7, [r3, #4]
 80056fa:	f893 e003 	ldrb.w	lr, [r3, #3]
 80056fe:	789d      	ldrb	r5, [r3, #2]
 8005700:	785e      	ldrb	r6, [r3, #1]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	9309      	str	r3, [sp, #36]	; 0x24
 8005706:	9608      	str	r6, [sp, #32]
 8005708:	9507      	str	r5, [sp, #28]
 800570a:	f8cd e018 	str.w	lr, [sp, #24]
 800570e:	9705      	str	r7, [sp, #20]
 8005710:	9404      	str	r4, [sp, #16]
 8005712:	ab50      	add	r3, sp, #320	; 0x140
 8005714:	9303      	str	r3, [sp, #12]
 8005716:	3061      	adds	r0, #97	; 0x61
 8005718:	9002      	str	r0, [sp, #8]
 800571a:	f3c1 1303 	ubfx	r3, r1, #4, #4
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	0a09      	lsrs	r1, r1, #8
 8005722:	9100      	str	r1, [sp, #0]
 8005724:	f002 030f 	and.w	r3, r2, #15
 8005728:	0912      	lsrs	r2, r2, #4
 800572a:	4916      	ldr	r1, [pc, #88]	; (8005784 <Init_BlueNRG_Stack+0x1d8>)
 800572c:	a80b      	add	r0, sp, #44	; 0x2c
 800572e:	f006 ff3f 	bl	800c5b0 <siprintf>
 8005732:	4601      	mov	r1, r0
 8005734:	a80b      	add	r0, sp, #44	; 0x2c
 8005736:	f000 fe07 	bl	8006348 <CDC_Fill_Buffer>
  aci_hal_set_tx_power_level(1, 4);
 800573a:	2104      	movs	r1, #4
 800573c:	2001      	movs	r0, #1
 800573e:	f005 fa50 	bl	800abe2 <aci_hal_set_tx_power_level>
  return;
 8005742:	e7b6      	b.n	80056b2 <Init_BlueNRG_Stack+0x106>
    XPRINTF("\r\nGAP setting Authentication failed\r\n");
 8005744:	ac0b      	add	r4, sp, #44	; 0x2c
 8005746:	4d10      	ldr	r5, [pc, #64]	; (8005788 <Init_BlueNRG_Stack+0x1dc>)
 8005748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800574a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800574c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800574e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005750:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005754:	f844 0b04 	str.w	r0, [r4], #4
 8005758:	8021      	strh	r1, [r4, #0]
 800575a:	2125      	movs	r1, #37	; 0x25
 800575c:	a80b      	add	r0, sp, #44	; 0x2c
 800575e:	f000 fdf3 	bl	8006348 <CDC_Fill_Buffer>
    goto fail;
 8005762:	e7a6      	b.n	80056b2 <Init_BlueNRG_Stack+0x106>
 8005764:	0800cffc 	.word	0x0800cffc
 8005768:	0800504d 	.word	0x0800504d
 800576c:	20000318 	.word	0x20000318
 8005770:	0800cee0 	.word	0x0800cee0
 8005774:	0800cf38 	.word	0x0800cf38
 8005778:	0800cf0c 	.word	0x0800cf0c
 800577c:	0800cf24 	.word	0x0800cf24
 8005780:	0001e240 	.word	0x0001e240
 8005784:	0800cf88 	.word	0x0800cf88
 8005788:	0800cf60 	.word	0x0800cf60

0800578c <Init_BlueNRG_Custom_Services>:
static void Init_BlueNRG_Custom_Services(void) {
 800578c:	b510      	push	{r4, lr}
 800578e:	b0c0      	sub	sp, #256	; 0x100
  ret = Add_HW_SW_ServW2ST_Service();
 8005790:	f7ff fab0 	bl	8004cf4 <Add_HW_SW_ServW2ST_Service>
  if (ret == BLE_STATUS_SUCCESS) {
 8005794:	b998      	cbnz	r0, 80057be <Init_BlueNRG_Custom_Services+0x32>
    XPRINTF("HW & SW Service W2ST added successfully\r\n");
 8005796:	46ec      	mov	ip, sp
 8005798:	4c11      	ldr	r4, [pc, #68]	; (80057e0 <Init_BlueNRG_Custom_Services+0x54>)
 800579a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800579c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80057aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80057ae:	f8ac 2000 	strh.w	r2, [ip]
 80057b2:	2129      	movs	r1, #41	; 0x29
 80057b4:	4668      	mov	r0, sp
 80057b6:	f000 fdc7 	bl	8006348 <CDC_Fill_Buffer>
}
 80057ba:	b040      	add	sp, #256	; 0x100
 80057bc:	bd10      	pop	{r4, pc}
    XPRINTF("\r\nError while adding HW & SW Service W2ST\r\n");
 80057be:	46ec      	mov	ip, sp
 80057c0:	4c08      	ldr	r4, [pc, #32]	; (80057e4 <Init_BlueNRG_Custom_Services+0x58>)
 80057c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80057d2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80057d6:	212b      	movs	r1, #43	; 0x2b
 80057d8:	4668      	mov	r0, sp
 80057da:	f000 fdb5 	bl	8006348 <CDC_Fill_Buffer>
}
 80057de:	e7ec      	b.n	80057ba <Init_BlueNRG_Custom_Services+0x2e>
 80057e0:	0800d004 	.word	0x0800d004
 80057e4:	0800d030 	.word	0x0800d030

080057e8 <SendMotionData>:
static void SendMotionData(void) {
 80057e8:	b508      	push	{r3, lr}
  AccGyroMag_Update(&ACC_Value, (BSP_MOTION_SENSOR_Axes_t*)&COMP_Value, &MAG_Value);
 80057ea:	4804      	ldr	r0, [pc, #16]	; (80057fc <SendMotionData+0x14>)
 80057ec:	f100 0208 	add.w	r2, r0, #8
 80057f0:	f100 0110 	add.w	r1, r0, #16
 80057f4:	301c      	adds	r0, #28
 80057f6:	f7ff fb1d 	bl	8004e34 <AccGyroMag_Update>
}
 80057fa:	bd08      	pop	{r3, pc}
 80057fc:	20000318 	.word	0x20000318

08005800 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim) {
 8005800:	b508      	push	{r3, lr}
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8005802:	7f03      	ldrb	r3, [r0, #28]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d000      	beq.n	800580a <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
 8005808:	bd08      	pop	{r3, pc}
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800580a:	210c      	movs	r1, #12
 800580c:	f003 fed0 	bl	80095b0 <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8005810:	4b04      	ldr	r3, [pc, #16]	; (8005824 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8005812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005814:	4904      	ldr	r1, [pc, #16]	; (8005828 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8005816:	6809      	ldr	r1, [r1, #0]
 8005818:	4408      	add	r0, r1
 800581a:	6410      	str	r0, [r2, #64]	; 0x40
    SendAccGyroMag = 1;
 800581c:	2201      	movs	r2, #1
 800581e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005820:	e7f2      	b.n	8005808 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 8005822:	bf00      	nop
 8005824:	20000318 	.word	0x20000318
 8005828:	20000004 	.word	0x20000004

0800582c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800582c:	b508      	push	{r3, lr}
  if (htim == (&TimEnvHandle)) {
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005830:	4298      	cmp	r0, r3
 8005832:	d003      	beq.n	800583c <HAL_TIM_PeriodElapsedCallback+0x10>
  } else if (htim == (&TimHandle)) {
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8005836:	4298      	cmp	r0, r3
 8005838:	d005      	beq.n	8005846 <HAL_TIM_PeriodElapsedCallback+0x1a>
}
 800583a:	bd08      	pop	{r3, pc}
    ReadSensor = 1;
 800583c:	3b74      	subs	r3, #116	; 0x74
 800583e:	2201      	movs	r2, #1
 8005840:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005844:	e7f9      	b.n	800583a <HAL_TIM_PeriodElapsedCallback+0xe>
    CDC_TIM_PeriodElapsedCallback(htim);
 8005846:	f000 fd9f 	bl	8006388 <CDC_TIM_PeriodElapsedCallback>
}
 800584a:	e7f6      	b.n	800583a <HAL_TIM_PeriodElapsedCallback+0xe>
 800584c:	2000038c 	.word	0x2000038c
 8005850:	20000800 	.word	0x20000800

08005854 <Sensor_IO_SPI_CS_Init_All>:
uint8_t Sensor_IO_SPI_CS_Init_All(void) {
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	b08b      	sub	sp, #44	; 0x2c
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 800585a:	4b72      	ldr	r3, [pc, #456]	; (8005a24 <Sensor_IO_SPI_CS_Init_All+0x1d0>)
 800585c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800585e:	f042 0202 	orr.w	r2, r2, #2
 8005862:	64da      	str	r2, [r3, #76]	; 0x4c
 8005864:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005866:	f002 0202 	and.w	r2, r2, #2
 800586a:	9200      	str	r2, [sp, #0]
 800586c:	9a00      	ldr	r2, [sp, #0]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 800586e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005870:	f042 0202 	orr.w	r2, r2, #2
 8005874:	64da      	str	r2, [r3, #76]	; 0x4c
 8005876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005878:	f002 0202 	and.w	r2, r2, #2
 800587c:	9201      	str	r2, [sp, #4]
 800587e:	9a01      	ldr	r2, [sp, #4]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8005880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005882:	f042 0204 	orr.w	r2, r2, #4
 8005886:	64da      	str	r2, [r3, #76]	; 0x4c
 8005888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800588a:	f002 0204 	and.w	r2, r2, #4
 800588e:	9202      	str	r2, [sp, #8]
 8005890:	9a02      	ldr	r2, [sp, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8005892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	64da      	str	r2, [r3, #76]	; 0x4c
 800589a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	9303      	str	r3, [sp, #12]
 80058a2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 80058a4:	4d60      	ldr	r5, [pc, #384]	; (8005a28 <Sensor_IO_SPI_CS_Init_All+0x1d4>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058ac:	4628      	mov	r0, r5
 80058ae:	f001 fac6 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 80058b2:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8005a2c <Sensor_IO_SPI_CS_Init_All+0x1d8>
 80058b6:	2201      	movs	r2, #1
 80058b8:	2110      	movs	r1, #16
 80058ba:	4640      	mov	r0, r8
 80058bc:	f001 fabf 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 80058c0:	2201      	movs	r2, #1
 80058c2:	2102      	movs	r1, #2
 80058c4:	4628      	mov	r0, r5
 80058c6:	f001 faba 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80058ca:	2201      	movs	r2, #1
 80058cc:	2108      	movs	r1, #8
 80058ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058d2:	f001 fab4 	bl	8006e3e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80058d6:	2303      	movs	r3, #3
 80058d8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058da:	2600      	movs	r6, #0
 80058dc:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058de:	2401      	movs	r4, #1
 80058e0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 80058e2:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 80058e6:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 80058ea:	a905      	add	r1, sp, #20
 80058ec:	4628      	mov	r0, r5
 80058ee:	f001 f91b 	bl	8006b28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 80058f2:	4622      	mov	r2, r4
 80058f4:	4649      	mov	r1, r9
 80058f6:	4628      	mov	r0, r5
 80058f8:	f001 faa1 	bl	8006e3e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 80058fc:	2710      	movs	r7, #16
 80058fe:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8005900:	a905      	add	r1, sp, #20
 8005902:	4640      	mov	r0, r8
 8005904:	f001 f910 	bl	8006b28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 8005908:	4622      	mov	r2, r4
 800590a:	4639      	mov	r1, r7
 800590c:	4640      	mov	r0, r8
 800590e:	f001 fa96 	bl	8006e3e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 8005912:	f04f 0b02 	mov.w	fp, #2
 8005916:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 800591a:	a905      	add	r1, sp, #20
 800591c:	4628      	mov	r0, r5
 800591e:	f001 f903 	bl	8006b28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005922:	4622      	mov	r2, r4
 8005924:	4659      	mov	r1, fp
 8005926:	4628      	mov	r0, r5
 8005928:	f001 fa89 	bl	8006e3e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 800592c:	f04f 0a08 	mov.w	sl, #8
 8005930:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8005934:	a905      	add	r1, sp, #20
 8005936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800593a:	f001 f8f5 	bl	8006b28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800593e:	4622      	mov	r2, r4
 8005940:	4651      	mov	r1, sl
 8005942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005946:	f001 fa7a 	bl	8006e3e <HAL_GPIO_WritePin>
  if (BSP_SPI2_Init() == BSP_ERROR_NONE) {
 800594a:	f000 fff7 	bl	800693c <BSP_SPI2_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 800594e:	4632      	mov	r2, r6
 8005950:	4659      	mov	r1, fp
 8005952:	4628      	mov	r0, r5
 8005954:	f001 fa73 	bl	8006e3e <HAL_GPIO_WritePin>
  inData[0] = (0x62U);
 8005958:	2362      	movs	r3, #98	; 0x62
 800595a:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 800595e:	4621      	mov	r1, r4
 8005960:	eb0d 0007 	add.w	r0, sp, r7
 8005964:	f000 ff48 	bl	80067f8 <BSP_SPI2_Send>
  inData[0] = 0x20;
 8005968:	2320      	movs	r3, #32
 800596a:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 800596e:	4621      	mov	r1, r4
 8005970:	eb0d 0007 	add.w	r0, sp, r7
 8005974:	f000 ff40 	bl	80067f8 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005978:	4622      	mov	r2, r4
 800597a:	4659      	mov	r1, fp
 800597c:	4628      	mov	r0, r5
 800597e:	f001 fa5e 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_RESET);
 8005982:	4632      	mov	r2, r6
 8005984:	4639      	mov	r1, r7
 8005986:	4640      	mov	r0, r8
 8005988:	f001 fa59 	bl	8006e3e <HAL_GPIO_WritePin>
  inData[0] = (0x23U);
 800598c:	2323      	movs	r3, #35	; 0x23
 800598e:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 8005992:	4621      	mov	r1, r4
 8005994:	eb0d 0007 	add.w	r0, sp, r7
 8005998:	f000 ff2e 	bl	80067f8 <BSP_SPI2_Send>
  inData[0] = 0x01;
 800599c:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 80059a0:	4621      	mov	r1, r4
 80059a2:	eb0d 0007 	add.w	r0, sp, r7
 80059a6:	f000 ff27 	bl	80067f8 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 80059aa:	4622      	mov	r2, r4
 80059ac:	4639      	mov	r1, r7
 80059ae:	4640      	mov	r0, r8
 80059b0:	f001 fa45 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 80059b4:	4632      	mov	r2, r6
 80059b6:	4651      	mov	r1, sl
 80059b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059bc:	f001 fa3f 	bl	8006e3e <HAL_GPIO_WritePin>
  inData[0] = (0x10U);
 80059c0:	f88d 7010 	strb.w	r7, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 80059c4:	4621      	mov	r1, r4
 80059c6:	eb0d 0007 	add.w	r0, sp, r7
 80059ca:	f000 ff15 	bl	80067f8 <BSP_SPI2_Send>
  inData[0] = 0x01;
 80059ce:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 80059d2:	4621      	mov	r1, r4
 80059d4:	eb0d 0007 	add.w	r0, sp, r7
 80059d8:	f000 ff0e 	bl	80067f8 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80059dc:	4622      	mov	r2, r4
 80059de:	4651      	mov	r1, sl
 80059e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059e4:	f001 fa2b 	bl	8006e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 80059e8:	4632      	mov	r2, r6
 80059ea:	4649      	mov	r1, r9
 80059ec:	4628      	mov	r0, r5
 80059ee:	f001 fa26 	bl	8006e3e <HAL_GPIO_WritePin>
  inData[0] = (0x12U);
 80059f2:	2312      	movs	r3, #18
 80059f4:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 80059f8:	4621      	mov	r1, r4
 80059fa:	eb0d 0007 	add.w	r0, sp, r7
 80059fe:	f000 fefb 	bl	80067f8 <BSP_SPI2_Send>
  inData[0] = 0x0C;
 8005a02:	230c      	movs	r3, #12
 8005a04:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData, 1);
 8005a08:	4621      	mov	r1, r4
 8005a0a:	eb0d 0007 	add.w	r0, sp, r7
 8005a0e:	f000 fef3 	bl	80067f8 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005a12:	4622      	mov	r2, r4
 8005a14:	4649      	mov	r1, r9
 8005a16:	4628      	mov	r0, r5
 8005a18:	f001 fa11 	bl	8006e3e <HAL_GPIO_WritePin>
}
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	b00b      	add	sp, #44	; 0x2c
 8005a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a24:	40021000 	.word	0x40021000
 8005a28:	48000400 	.word	0x48000400
 8005a2c:	48000800 	.word	0x48000800

08005a30 <LSM303AGR_SPI_Read_nBytes>:
void LSM303AGR_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t* val, uint16_t nBytesToRead) {
 8005a30:	b410      	push	{r4}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a32:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8005a34:	6804      	ldr	r4, [r0, #0]
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a3c:	6023      	str	r3, [r4, #0]
  while (nBytesToRead > 1U) {
 8005a3e:	2a01      	cmp	r2, #1
 8005a40:	d90a      	bls.n	8005a58 <LSM303AGR_SPI_Read_nBytes+0x28>
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE) {
 8005a42:	6803      	ldr	r3, [r0, #0]
 8005a44:	689c      	ldr	r4, [r3, #8]
 8005a46:	f014 0f01 	tst.w	r4, #1
 8005a4a:	d0f8      	beq.n	8005a3e <LSM303AGR_SPI_Read_nBytes+0xe>
      *val = *(__IO uint8_t*) & xSpiHandle->Instance->DR;
 8005a4c:	7b1b      	ldrb	r3, [r3, #12]
 8005a4e:	f801 3b01 	strb.w	r3, [r1], #1
      nBytesToRead--;
 8005a52:	3a01      	subs	r2, #1
 8005a54:	b292      	uxth	r2, r2
 8005a56:	e7f2      	b.n	8005a3e <LSM303AGR_SPI_Read_nBytes+0xe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005a60:	6802      	ldr	r2, [r0, #0]
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a68:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a6a:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005a6c:	6803      	ldr	r3, [r0, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	f012 0f01 	tst.w	r2, #1
 8005a74:	d0fa      	beq.n	8005a6c <LSM303AGR_SPI_Read_nBytes+0x3c>
  *val = *(__IO uint8_t*) & xSpiHandle->Instance->DR;
 8005a76:	7b1b      	ldrb	r3, [r3, #12]
 8005a78:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005a7a:	6803      	ldr	r3, [r0, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a82:	d1fa      	bne.n	8005a7a <LSM303AGR_SPI_Read_nBytes+0x4a>
}
 8005a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <LSM303AGR_SPI_Read>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005a8a:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8005a8c:	6802      	ldr	r2, [r0, #0]
 8005a8e:	6813      	ldr	r3, [r2, #0]
 8005a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a94:	6013      	str	r3, [r2, #0]
  __asm("dsb\n");
 8005a96:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005a9a:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005a9e:	6802      	ldr	r2, [r0, #0]
 8005aa0:	6813      	ldr	r3, [r2, #0]
 8005aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005aa8:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005aaa:	6803      	ldr	r3, [r0, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	f012 0f01 	tst.w	r2, #1
 8005ab2:	d0fa      	beq.n	8005aaa <LSM303AGR_SPI_Read+0x20>
  *val = *(__IO uint8_t*) & xSpiHandle->Instance->DR;
 8005ab4:	7b1b      	ldrb	r3, [r3, #12]
 8005ab6:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005ab8:	6803      	ldr	r3, [r0, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ac0:	d1fa      	bne.n	8005ab8 <LSM303AGR_SPI_Read+0x2e>
}
 8005ac2:	4770      	bx	lr

08005ac4 <LSM303AGR_SPI_Write>:
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005ac4:	6803      	ldr	r3, [r0, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	f012 0f02 	tst.w	r2, #2
 8005acc:	d0fa      	beq.n	8005ac4 <LSM303AGR_SPI_Write>
  *((__IO uint8_t*) & xSpiHandle->Instance->DR) = val;
 8005ace:	7319      	strb	r1, [r3, #12]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005ad0:	6803      	ldr	r3, [r0, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005ad8:	d1fa      	bne.n	8005ad0 <LSM303AGR_SPI_Write+0xc>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005ae0:	d1fb      	bne.n	8005ada <LSM303AGR_SPI_Write+0x16>
}
 8005ae2:	4770      	bx	lr

08005ae4 <BSP_LSM303AGR_ReadReg_Mag>:
static int32_t BSP_LSM303AGR_ReadReg_Mag(uint16_t Reg, uint8_t* pdata, uint16_t len) {
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005aea:	b2c7      	uxtb	r7, r0
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 8005aec:	2200      	movs	r2, #0
 8005aee:	2102      	movs	r1, #2
 8005af0:	4818      	ldr	r0, [pc, #96]	; (8005b54 <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005af2:	f001 f9a4 	bl	8006e3e <HAL_GPIO_WritePin>
  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005af6:	4e18      	ldr	r6, [pc, #96]	; (8005b58 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005af8:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff ffe1 	bl	8005ac4 <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005b02:	6832      	ldr	r2, [r6, #0]
 8005b04:	6813      	ldr	r3, [r2, #0]
 8005b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0a:	6013      	str	r3, [r2, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005b0c:	6832      	ldr	r2, [r6, #0]
 8005b0e:	6813      	ldr	r3, [r2, #0]
 8005b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b14:	6013      	str	r3, [r2, #0]
  if (len > 1) {
 8005b16:	2c01      	cmp	r4, #1
 8005b18:	d916      	bls.n	8005b48 <BSP_LSM303AGR_ReadReg_Mag+0x64>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ff86 	bl	8005a30 <LSM303AGR_SPI_Read_nBytes>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005b24:	2201      	movs	r2, #1
 8005b26:	2102      	movs	r1, #2
 8005b28:	480a      	ldr	r0, [pc, #40]	; (8005b54 <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005b2a:	f001 f988 	bl	8006e3e <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005b30:	6811      	ldr	r1, [r2, #0]
 8005b32:	680b      	ldr	r3, [r1, #0]
 8005b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b38:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	6813      	ldr	r3, [r2, #0]
 8005b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b42:	6013      	str	r3, [r2, #0]
}
 8005b44:	2000      	movs	r0, #0
 8005b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4803      	ldr	r0, [pc, #12]	; (8005b58 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005b4c:	f7ff ff9d 	bl	8005a8a <LSM303AGR_SPI_Read>
 8005b50:	e7e8      	b.n	8005b24 <BSP_LSM303AGR_ReadReg_Mag+0x40>
 8005b52:	bf00      	nop
 8005b54:	48000400 	.word	0x48000400
 8005b58:	20002564 	.word	0x20002564

08005b5c <readMag>:
static void readMag() { //#CS704 - Read Magnetometer Data over SPI
 8005b5c:	b500      	push	{lr}
 8005b5e:	b083      	sub	sp, #12
  BSP_LSM303AGR_ReadReg_Mag(0x67, &valueReady, 1); // read acc status reg
 8005b60:	2201      	movs	r2, #1
 8005b62:	eb0d 0102 	add.w	r1, sp, r2
 8005b66:	2067      	movs	r0, #103	; 0x67
 8005b68:	f7ff ffbc 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  valueReady = valueReady & (1 << 3); // filter for XYZ New bit
 8005b6c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	f88d 3001 	strb.w	r3, [sp, #1]
  while (!valueReady) { // if value ready bit not ready
 8005b78:	e00b      	b.n	8005b92 <readMag+0x36>
    BSP_LSM303AGR_ReadReg_Mag(0x27, &valueReady, 1); // read acc status reg
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	eb0d 0102 	add.w	r1, sp, r2
 8005b80:	2027      	movs	r0, #39	; 0x27
 8005b82:	f7ff ffaf 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
    valueReady = valueReady & (1 << 3); // filter for XYZ New bit
 8005b86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	f88d 3001 	strb.w	r3, [sp, #1]
  while (!valueReady) { // if value ready bit not ready
 8005b92:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0ef      	beq.n	8005b7a <readMag+0x1e>
  BSP_LSM303AGR_ReadReg_Mag(0x68, &xFirst, 1);
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f10d 0107 	add.w	r1, sp, #7
 8005ba0:	2068      	movs	r0, #104	; 0x68
 8005ba2:	f7ff ff9f 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  BSP_LSM303AGR_ReadReg_Mag(0x69, &xSecond, 1);
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f10d 0106 	add.w	r1, sp, #6
 8005bac:	2069      	movs	r0, #105	; 0x69
 8005bae:	f7ff ff99 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  BSP_LSM303AGR_ReadReg_Mag(0x6A, &yFirst, 1);
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f10d 0105 	add.w	r1, sp, #5
 8005bb8:	206a      	movs	r0, #106	; 0x6a
 8005bba:	f7ff ff93 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  BSP_LSM303AGR_ReadReg_Mag(0x6B, &ySecond, 1);
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	a901      	add	r1, sp, #4
 8005bc2:	206b      	movs	r0, #107	; 0x6b
 8005bc4:	f7ff ff8e 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  BSP_LSM303AGR_ReadReg_Mag(0x6C, &zFirst, 1);
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f10d 0103 	add.w	r1, sp, #3
 8005bce:	206c      	movs	r0, #108	; 0x6c
 8005bd0:	f7ff ff88 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  BSP_LSM303AGR_ReadReg_Mag(0x6D, &zSecond, 1);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f10d 0102 	add.w	r1, sp, #2
 8005bda:	206d      	movs	r0, #109	; 0x6d
 8005bdc:	f7ff ff82 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  xValue = (xSecond << 8) | xFirst;
 8005be0:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005be4:	0209      	lsls	r1, r1, #8
 8005be6:	b209      	sxth	r1, r1
 8005be8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bec:	4319      	orrs	r1, r3
  yValue = (ySecond << 8) | yFirst;
 8005bee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005bf2:	0212      	lsls	r2, r2, #8
 8005bf4:	b212      	sxth	r2, r2
 8005bf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005bfa:	431a      	orrs	r2, r3
  zValue = (zSecond << 8) | zFirst;
 8005bfc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005c08:	4303      	orrs	r3, r0
  MAG_Value.x = xValue;
 8005c0a:	4803      	ldr	r0, [pc, #12]	; (8005c18 <readMag+0xbc>)
 8005c0c:	8101      	strh	r1, [r0, #8]
  MAG_Value.y = yValue;
 8005c0e:	8142      	strh	r2, [r0, #10]
  MAG_Value.z = zValue;
 8005c10:	8183      	strh	r3, [r0, #12]
}
 8005c12:	b003      	add	sp, #12
 8005c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c18:	20000318 	.word	0x20000318

08005c1c <BSP_LSM303AGR_ReadReg_Acc>:
static int32_t BSP_LSM303AGR_ReadReg_Acc(uint16_t Reg, uint8_t* pdata, uint16_t len) {
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	460d      	mov	r5, r1
 8005c20:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005c22:	b2c6      	uxtb	r6, r0
  LSM_ACC_CS_LOW();
 8005c24:	2200      	movs	r2, #0
 8005c26:	2110      	movs	r1, #16
 8005c28:	481c      	ldr	r0, [pc, #112]	; (8005c9c <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005c2a:	f001 f908 	bl	8006e3e <HAL_GPIO_WritePin>
  if (len > 1) {
 8005c2e:	2c01      	cmp	r4, #1
 8005c30:	d928      	bls.n	8005c84 <BSP_LSM303AGR_ReadReg_Acc+0x68>
    LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80 | 0x40);
 8005c32:	f046 01c0 	orr.w	r1, r6, #192	; 0xc0
 8005c36:	481a      	ldr	r0, [pc, #104]	; (8005ca0 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005c38:	f7ff ff44 	bl	8005ac4 <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005c3e:	6811      	ldr	r1, [r2, #0]
 8005c40:	680b      	ldr	r3, [r1, #0]
 8005c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c46:	600b      	str	r3, [r1, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c50:	6013      	str	r3, [r2, #0]
  if (len > 1) {
 8005c52:	2c01      	cmp	r4, #1
 8005c54:	d91c      	bls.n	8005c90 <BSP_LSM303AGR_ReadReg_Acc+0x74>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005c56:	4622      	mov	r2, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4811      	ldr	r0, [pc, #68]	; (8005ca0 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005c5c:	f7ff fee8 	bl	8005a30 <LSM303AGR_SPI_Read_nBytes>
  LSM_ACC_CS_HIGH();
 8005c60:	2201      	movs	r2, #1
 8005c62:	2110      	movs	r1, #16
 8005c64:	480d      	ldr	r0, [pc, #52]	; (8005c9c <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005c66:	f001 f8ea 	bl	8006e3e <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005c6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ca0 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005c6c:	6811      	ldr	r1, [r2, #0]
 8005c6e:	680b      	ldr	r3, [r1, #0]
 8005c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c74:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	6813      	ldr	r3, [r2, #0]
 8005c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7e:	6013      	str	r3, [r2, #0]
}
 8005c80:	2000      	movs	r0, #0
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
    LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005c84:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8005c88:	4805      	ldr	r0, [pc, #20]	; (8005ca0 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005c8a:	f7ff ff1b 	bl	8005ac4 <LSM303AGR_SPI_Write>
 8005c8e:	e7d5      	b.n	8005c3c <BSP_LSM303AGR_ReadReg_Acc+0x20>
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005c90:	4629      	mov	r1, r5
 8005c92:	4803      	ldr	r0, [pc, #12]	; (8005ca0 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005c94:	f7ff fef9 	bl	8005a8a <LSM303AGR_SPI_Read>
 8005c98:	e7e2      	b.n	8005c60 <BSP_LSM303AGR_ReadReg_Acc+0x44>
 8005c9a:	bf00      	nop
 8005c9c:	48000800 	.word	0x48000800
 8005ca0:	20002564 	.word	0x20002564

08005ca4 <InitLSM>:
static void InitLSM() {
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	b0c4      	sub	sp, #272	; 0x110
  Sensor_IO_SPI_CS_Init_All();
 8005ca8:	f7ff fdd4 	bl	8005854 <Sensor_IO_SPI_CS_Init_All>
  inData[0] = 0x01;
 8005cac:	2401      	movs	r4, #1
 8005cae:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
  BSP_LSM303AGR_WriteReg_Acc(0x23, inData, 1);
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	a941      	add	r1, sp, #260	; 0x104
 8005cb6:	2023      	movs	r0, #35	; 0x23
 8005cb8:	f7ff fbce 	bl	8005458 <BSP_LSM303AGR_WriteReg_Acc>
  inData[0] = 0x20;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
  BSP_LSM303AGR_WriteReg_Mag(0x62U, inData, 1);
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	a941      	add	r1, sp, #260	; 0x104
 8005cc6:	2062      	movs	r0, #98	; 0x62
 8005cc8:	f7ff fc28 	bl	800551c <BSP_LSM303AGR_WriteReg_Mag>
  BSP_LSM303AGR_ReadReg_Mag(0x4F, inData, 1);
 8005ccc:	4622      	mov	r2, r4
 8005cce:	a941      	add	r1, sp, #260	; 0x104
 8005cd0:	204f      	movs	r0, #79	; 0x4f
 8005cd2:	f7ff ff07 	bl	8005ae4 <BSP_LSM303AGR_ReadReg_Mag>
  XPRINTF("IAM Mag= %d,%d", inData[0], inData[1]); // PRINTER
 8005cd6:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 8005cda:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 8005cde:	490d      	ldr	r1, [pc, #52]	; (8005d14 <InitLSM+0x70>)
 8005ce0:	a801      	add	r0, sp, #4
 8005ce2:	f006 fc65 	bl	800c5b0 <siprintf>
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	a801      	add	r0, sp, #4
 8005cea:	f000 fb2d 	bl	8006348 <CDC_Fill_Buffer>
  BSP_LSM303AGR_ReadReg_Acc(0x0F, inData, 1);
 8005cee:	4622      	mov	r2, r4
 8005cf0:	a941      	add	r1, sp, #260	; 0x104
 8005cf2:	200f      	movs	r0, #15
 8005cf4:	f7ff ff92 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  XPRINTF("IAM Acc= %d,%d", inData[0], inData[1]); // PRINTER
 8005cf8:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 8005cfc:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 8005d00:	4905      	ldr	r1, [pc, #20]	; (8005d18 <InitLSM+0x74>)
 8005d02:	a801      	add	r0, sp, #4
 8005d04:	f006 fc54 	bl	800c5b0 <siprintf>
 8005d08:	4601      	mov	r1, r0
 8005d0a:	a801      	add	r0, sp, #4
 8005d0c:	f000 fb1c 	bl	8006348 <CDC_Fill_Buffer>
}
 8005d10:	b044      	add	sp, #272	; 0x110
 8005d12:	bd10      	pop	{r4, pc}
 8005d14:	0800d05c 	.word	0x0800d05c
 8005d18:	0800d06c 	.word	0x0800d06c

08005d1c <readAcc>:
static void readAcc() {
 8005d1c:	b500      	push	{lr}
 8005d1e:	b083      	sub	sp, #12
  BSP_LSM303AGR_ReadReg_Acc(0x27, &valueReady, 1); // read acc status reg
 8005d20:	2201      	movs	r2, #1
 8005d22:	eb0d 0102 	add.w	r1, sp, r2
 8005d26:	2027      	movs	r0, #39	; 0x27
 8005d28:	f7ff ff78 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  valueReady = valueReady & (1 << 3); // filter for XYZ New bit
 8005d2c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	f88d 3001 	strb.w	r3, [sp, #1]
  while (!valueReady) { // if value ready bit not ready
 8005d38:	e00b      	b.n	8005d52 <readAcc+0x36>
    BSP_LSM303AGR_ReadReg_Acc(0x27, &valueReady, 1); // read acc status reg
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	eb0d 0102 	add.w	r1, sp, r2
 8005d40:	2027      	movs	r0, #39	; 0x27
 8005d42:	f7ff ff6b 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
    valueReady = valueReady & (1 << 3); // filter for XYZ New bit
 8005d46:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	f88d 3001 	strb.w	r3, [sp, #1]
  while (!valueReady) { // if value ready bit not ready
 8005d52:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ef      	beq.n	8005d3a <readAcc+0x1e>
  BSP_LSM303AGR_ReadReg_Acc(0x28, &xFirst, 1);
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f10d 0107 	add.w	r1, sp, #7
 8005d60:	2028      	movs	r0, #40	; 0x28
 8005d62:	f7ff ff5b 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  BSP_LSM303AGR_ReadReg_Acc(0x29, &xSecond, 1);
 8005d66:	2201      	movs	r2, #1
 8005d68:	f10d 0106 	add.w	r1, sp, #6
 8005d6c:	2029      	movs	r0, #41	; 0x29
 8005d6e:	f7ff ff55 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  BSP_LSM303AGR_ReadReg_Acc(0x2A, &yFirst, 1);
 8005d72:	2201      	movs	r2, #1
 8005d74:	f10d 0105 	add.w	r1, sp, #5
 8005d78:	202a      	movs	r0, #42	; 0x2a
 8005d7a:	f7ff ff4f 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  BSP_LSM303AGR_ReadReg_Acc(0x2B, &ySecond, 1);
 8005d7e:	2201      	movs	r2, #1
 8005d80:	a901      	add	r1, sp, #4
 8005d82:	202b      	movs	r0, #43	; 0x2b
 8005d84:	f7ff ff4a 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  BSP_LSM303AGR_ReadReg_Acc(0x2C, &zFirst, 1);
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f10d 0103 	add.w	r1, sp, #3
 8005d8e:	202c      	movs	r0, #44	; 0x2c
 8005d90:	f7ff ff44 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  BSP_LSM303AGR_ReadReg_Acc(0x2D, &zSecond, 1);
 8005d94:	2201      	movs	r2, #1
 8005d96:	f10d 0102 	add.w	r1, sp, #2
 8005d9a:	202d      	movs	r0, #45	; 0x2d
 8005d9c:	f7ff ff3e 	bl	8005c1c <BSP_LSM303AGR_ReadReg_Acc>
  xValue = (xSecond << 8) | xFirst;
 8005da0:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005da4:	0209      	lsls	r1, r1, #8
 8005da6:	b209      	sxth	r1, r1
 8005da8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005dac:	4319      	orrs	r1, r3
  yValue = (ySecond << 8) | yFirst;
 8005dae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005db2:	0212      	lsls	r2, r2, #8
 8005db4:	b212      	sxth	r2, r2
 8005db6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005dba:	431a      	orrs	r2, r3
  zValue = (zSecond << 8) | zFirst;
 8005dbc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	b21b      	sxth	r3, r3
 8005dc4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005dc8:	4303      	orrs	r3, r0
  ACC_Value.x = xValue;
 8005dca:	4803      	ldr	r0, [pc, #12]	; (8005dd8 <readAcc+0xbc>)
 8005dcc:	8381      	strh	r1, [r0, #28]
  ACC_Value.y = yValue;
 8005dce:	83c2      	strh	r2, [r0, #30]
  ACC_Value.z = zValue;
 8005dd0:	8403      	strh	r3, [r0, #32]
}
 8005dd2:	b003      	add	sp, #12
 8005dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dd8:	20000318 	.word	0x20000318

08005ddc <HAL_Delay>:
  *        on variable incremented.
  * @note This is a user implementation using WFI state
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay) {
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8005de2:	f000 fe2f 	bl	8006a44 <HAL_GetTick>
 8005de6:	4604      	mov	r4, r0
  while ((HAL_GetTick() - tickstart) < Delay) {
 8005de8:	e000      	b.n	8005dec <HAL_Delay+0x10>
    __WFI();
 8005dea:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < Delay) {
 8005dec:	f000 fe2a 	bl	8006a44 <HAL_GetTick>
 8005df0:	1b00      	subs	r0, r0, r4
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	4298      	cmp	r0, r3
 8005df6:	d3f8      	bcc.n	8005dea <HAL_Delay+0xe>
  }
}
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd10      	pop	{r4, pc}

08005dfc <InitTargetPlatform>:
void InitTargetPlatform(void) {
 8005dfc:	b510      	push	{r4, lr}
  HAL_PWREx_EnableVddUSB();
 8005dfe:	f001 fd87 	bl	8007910 <HAL_PWREx_EnableVddUSB>
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 8005e02:	4c0d      	ldr	r4, [pc, #52]	; (8005e38 <InitTargetPlatform+0x3c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	490d      	ldr	r1, [pc, #52]	; (8005e3c <InitTargetPlatform+0x40>)
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f005 fb7f 	bl	800b50c <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 8005e0e:	490c      	ldr	r1, [pc, #48]	; (8005e40 <InitTargetPlatform+0x44>)
 8005e10:	4620      	mov	r0, r4
 8005e12:	f005 fb92 	bl	800b53a <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 8005e16:	490b      	ldr	r1, [pc, #44]	; (8005e44 <InitTargetPlatform+0x48>)
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f005 fb42 	bl	800b4a2 <USBD_CDC_RegisterInterface>
  USBD_Start(&USBD_Device);
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f005 fba2 	bl	800b568 <USBD_Start>
  HAL_Delay(5000);
 8005e24:	f241 3088 	movw	r0, #5000	; 0x1388
 8005e28:	f7ff ffd8 	bl	8005ddc <HAL_Delay>
  BSP_LED_Init(LED1);
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f000 fc41 	bl	80066b4 <BSP_LED_Init>
  InitLSM(); //N4S  //TODO: Fix maybe
 8005e32:	f7ff ff37 	bl	8005ca4 <InitLSM>
}
 8005e36:	bd10      	pop	{r4, pc}
 8005e38:	200003dc 	.word	0x200003dc
 8005e3c:	20000058 	.word	0x20000058
 8005e40:	20000160 	.word	0x20000160
 8005e44:	20000010 	.word	0x20000010

08005e48 <Error_Handler>:
  * @param  None
  * @retval None
  */
void Error_Handler(void) {
  /* User may add here some code to deal with this error */
  while (1) {
 8005e48:	e7fe      	b.n	8005e48 <Error_Handler>
	...

08005e4c <InitTimers>:
static void InitTimers(void) {
 8005e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4e:	b089      	sub	sp, #36	; 0x24
  uwPrescalerValue = (uint32_t)((SystemCoreClock / 10000) - 1);
 8005e50:	4f2d      	ldr	r7, [pc, #180]	; (8005f08 <InitTimers+0xbc>)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	4e2d      	ldr	r6, [pc, #180]	; (8005f0c <InitTimers+0xc0>)
 8005e56:	fba6 2303 	umull	r2, r3, r6, r3
 8005e5a:	0b5b      	lsrs	r3, r3, #13
 8005e5c:	3b01      	subs	r3, #1
  TimEnvHandle.Instance = TIM4;
 8005e5e:	4c2c      	ldr	r4, [pc, #176]	; (8005f10 <InitTimers+0xc4>)
 8005e60:	4a2c      	ldr	r2, [pc, #176]	; (8005f14 <InitTimers+0xc8>)
 8005e62:	6762      	str	r2, [r4, #116]	; 0x74
  TimEnvHandle.Init.Period = 655;
 8005e64:	f240 228f 	movw	r2, #655	; 0x28f
 8005e68:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  TimEnvHandle.Init.Prescaler = uwPrescalerValue;
 8005e6c:	67a3      	str	r3, [r4, #120]	; 0x78
  TimEnvHandle.Init.ClockDivision = 0;
 8005e6e:	2500      	movs	r5, #0
 8005e70:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  TimEnvHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e74:	67e5      	str	r5, [r4, #124]	; 0x7c
  if (HAL_TIM_Base_Init(&TimEnvHandle) != HAL_OK) {
 8005e76:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8005e7a:	f003 fce7 	bl	800984c <HAL_TIM_Base_Init>
  uwPrescalerValue = (uint32_t)((SystemCoreClock / 10000) - 1);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	fba6 6303 	umull	r6, r3, r6, r3
 8005e84:	0b5b      	lsrs	r3, r3, #13
 8005e86:	3b01      	subs	r3, #1
  TimCCHandle.Instance = TIM1;
 8005e88:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <InitTimers+0xcc>)
 8005e8a:	6262      	str	r2, [r4, #36]	; 0x24
  TimCCHandle.Init.Period = 65535;
 8005e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e90:	6322      	str	r2, [r4, #48]	; 0x30
  TimCCHandle.Init.Prescaler = uwPrescalerValue;
 8005e92:	62a3      	str	r3, [r4, #40]	; 0x28
  TimCCHandle.Init.ClockDivision = 0;
 8005e94:	6365      	str	r5, [r4, #52]	; 0x34
  TimCCHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e96:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK) {
 8005e98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e9c:	f003 fd06 	bl	80098ac <HAL_TIM_OC_Init>
 8005ea0:	bb40      	cbnz	r0, 8005ef4 <InitTimers+0xa8>
  sConfig.OCMode = TIM_OCMODE_TOGGLE;
 8005ea2:	2330      	movs	r3, #48	; 0x30
 8005ea4:	9301      	str	r3, [sp, #4]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	9303      	str	r3, [sp, #12]
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 8005eaa:	2364      	movs	r3, #100	; 0x64
 8005eac:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK) {
 8005eae:	2200      	movs	r2, #0
 8005eb0:	a901      	add	r1, sp, #4
 8005eb2:	481a      	ldr	r0, [pc, #104]	; (8005f1c <InitTimers+0xd0>)
 8005eb4:	f003 fd70 	bl	8009998 <HAL_TIM_OC_ConfigChannel>
 8005eb8:	b9f0      	cbnz	r0, 8005ef8 <InitTimers+0xac>
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 8005eba:	23c8      	movs	r3, #200	; 0xc8
 8005ebc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK) {
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	eb0d 0102 	add.w	r1, sp, r2
 8005ec4:	4815      	ldr	r0, [pc, #84]	; (8005f1c <InitTimers+0xd0>)
 8005ec6:	f003 fd67 	bl	8009998 <HAL_TIM_OC_ConfigChannel>
 8005eca:	b9b8      	cbnz	r0, 8005efc <InitTimers+0xb0>
  sConfig.Pulse = DEFAULT_uhCCR3_Val;
 8005ecc:	f240 2371 	movw	r3, #625	; 0x271
 8005ed0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK) {
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	a901      	add	r1, sp, #4
 8005ed6:	4811      	ldr	r0, [pc, #68]	; (8005f1c <InitTimers+0xd0>)
 8005ed8:	f003 fd5e 	bl	8009998 <HAL_TIM_OC_ConfigChannel>
 8005edc:	b980      	cbnz	r0, 8005f00 <InitTimers+0xb4>
  sConfig.Pulse = DEFAULT_uhCCR4_Val;
 8005ede:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005ee2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK) {
 8005ee4:	220c      	movs	r2, #12
 8005ee6:	a901      	add	r1, sp, #4
 8005ee8:	480c      	ldr	r0, [pc, #48]	; (8005f1c <InitTimers+0xd0>)
 8005eea:	f003 fd55 	bl	8009998 <HAL_TIM_OC_ConfigChannel>
 8005eee:	b948      	cbnz	r0, 8005f04 <InitTimers+0xb8>
}
 8005ef0:	b009      	add	sp, #36	; 0x24
 8005ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8005ef4:	f7ff ffa8 	bl	8005e48 <Error_Handler>
    Error_Handler();
 8005ef8:	f7ff ffa6 	bl	8005e48 <Error_Handler>
    Error_Handler();
 8005efc:	f7ff ffa4 	bl	8005e48 <Error_Handler>
    Error_Handler();
 8005f00:	f7ff ffa2 	bl	8005e48 <Error_Handler>
    Error_Handler();
 8005f04:	f7ff ffa0 	bl	8005e48 <Error_Handler>
 8005f08:	2000007c 	.word	0x2000007c
 8005f0c:	d1b71759 	.word	0xd1b71759
 8005f10:	20000318 	.word	0x20000318
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	2000033c 	.word	0x2000033c

08005f20 <main>:
int main(void) {
 8005f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f22:	b0c1      	sub	sp, #260	; 0x104
  HAL_Init();
 8005f24:	f000 fd72 	bl	8006a0c <HAL_Init>
  SystemClock_Config();
 8005f28:	f7ff fa2c 	bl	8005384 <SystemClock_Config>
  InitTargetPlatform();
 8005f2c:	f7ff ff66 	bl	8005dfc <InitTargetPlatform>
  Init_BlueNRG_Stack();
 8005f30:	f7ff fb3c 	bl	80055ac <Init_BlueNRG_Stack>
  Init_BlueNRG_Custom_Services();
 8005f34:	f7ff fc2a 	bl	800578c <Init_BlueNRG_Custom_Services>
  InitTimers();
 8005f38:	f7ff ff88 	bl	8005e4c <InitTimers>
  if (HAL_TIM_Base_Start_IT(&TimEnvHandle) != HAL_OK) {
 8005f3c:	4846      	ldr	r0, [pc, #280]	; (8006058 <main+0x138>)
 8005f3e:	f003 faf1 	bl	8009524 <HAL_TIM_Base_Start_IT>
 8005f42:	b108      	cbz	r0, 8005f48 <main+0x28>
    Error_Handler();
 8005f44:	f7ff ff80 	bl	8005e48 <Error_Handler>
  connected = FALSE;
 8005f48:	4b44      	ldr	r3, [pc, #272]	; (800605c <main+0x13c>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
  NodeName[1] = 'B';
 8005f4e:	4b44      	ldr	r3, [pc, #272]	; (8006060 <main+0x140>)
 8005f50:	2242      	movs	r2, #66	; 0x42
 8005f52:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
  NodeName[2] = 'e';
 8005f56:	2265      	movs	r2, #101	; 0x65
 8005f58:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
  NodeName[3] = 'c';
 8005f5c:	2263      	movs	r2, #99	; 0x63
 8005f5e:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
  NodeName[4] = 'k';
 8005f62:	226b      	movs	r2, #107	; 0x6b
 8005f64:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
  NodeName[5] = '7';
 8005f68:	2237      	movs	r2, #55	; 0x37
 8005f6a:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
  NodeName[6] = '0';
 8005f6e:	2230      	movs	r2, #48	; 0x30
 8005f70:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
  NodeName[7] = '4';
 8005f74:	2234      	movs	r2, #52	; 0x34
 8005f76:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
  startMag();
 8005f7a:	f7ff faf9 	bl	8005570 <startMag>
  startAcc();
 8005f7e:	f7ff fa95 	bl	80054ac <startAcc>
 8005f82:	e04a      	b.n	800601a <main+0xfa>
      if (!(HAL_GetTick() & 0x3FF)) {
 8005f84:	f000 fd5e 	bl	8006a44 <HAL_GetTick>
 8005f88:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d148      	bne.n	8006022 <main+0x102>
        BSP_LED_Toggle(LED1);
 8005f90:	f000 fbd0 	bl	8006734 <BSP_LED_Toggle>
 8005f94:	e045      	b.n	8006022 <main+0x102>
      setConnectable();
 8005f96:	f7fe ffc9 	bl	8004f2c <setConnectable>
      set_connectable = FALSE;
 8005f9a:	4b32      	ldr	r3, [pc, #200]	; (8006064 <main+0x144>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	e043      	b.n	800602a <main+0x10a>
      HCI_ProcessEvent = 0;
 8005fa2:	4b2f      	ldr	r3, [pc, #188]	; (8006060 <main+0x140>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
      hci_user_evt_proc();
 8005faa:	f005 f83d 	bl	800b028 <hci_user_evt_proc>
 8005fae:	e041      	b.n	8006034 <main+0x114>
      ReadSensor = 0;
 8005fb0:	4d2b      	ldr	r5, [pc, #172]	; (8006060 <main+0x140>)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
      readMag();
 8005fb8:	f7ff fdd0 	bl	8005b5c <readMag>
      readAcc();
 8005fbc:	f7ff feae 	bl	8005d1c <readAcc>
      heading = atan2(MAG_Value.y, MAG_Value.x) * 180 / 3.14159;
 8005fc0:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 8005fc4:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 8005fc8:	f7fe faa4 	bl	8004514 <__aeabi_i2d>
 8005fcc:	4606      	mov	r6, r0
 8005fce:	460f      	mov	r7, r1
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7fe fa9f 	bl	8004514 <__aeabi_i2d>
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	463b      	mov	r3, r7
 8005fda:	f005 ffc5 	bl	800bf68 <atan2>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <main+0x148>)
 8005fe2:	f7fe fb01 	bl	80045e8 <__aeabi_dmul>
 8005fe6:	a31a      	add	r3, pc, #104	; (adr r3, 8006050 <main+0x130>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fe fc26 	bl	800483c <__aeabi_ddiv>
      XPRINTF("heading: %d\r\n", (int)heading);
 8005ff0:	f7fe fd94 	bl	8004b1c <__aeabi_d2iz>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	491c      	ldr	r1, [pc, #112]	; (800606c <main+0x14c>)
 8005ffa:	4668      	mov	r0, sp
 8005ffc:	f006 fad8 	bl	800c5b0 <siprintf>
 8006000:	4601      	mov	r1, r0
 8006002:	4668      	mov	r0, sp
 8006004:	f000 f9a0 	bl	8006348 <CDC_Fill_Buffer>
      COMP_Value.x = (int)heading + 180;
 8006008:	34b4      	adds	r4, #180	; 0xb4
 800600a:	612c      	str	r4, [r5, #16]
 800600c:	e017      	b.n	800603e <main+0x11e>
      SendMotionData();
 800600e:	f7ff fbeb 	bl	80057e8 <SendMotionData>
      SendAccGyroMag = 0;
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <main+0x140>)
 8006014:	2200      	movs	r2, #0
 8006016:	671a      	str	r2, [r3, #112]	; 0x70
    __WFI();
 8006018:	bf30      	wfi
    if (!connected) {
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <main+0x13c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0b0      	beq.n	8005f84 <main+0x64>
    if (set_connectable) {
 8006022:	4b10      	ldr	r3, [pc, #64]	; (8006064 <main+0x144>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1b5      	bne.n	8005f96 <main+0x76>
    if (HCI_ProcessEvent) {
 800602a:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <main+0x140>)
 800602c:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1b6      	bne.n	8005fa2 <main+0x82>
    if (ReadSensor) {
 8006034:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <main+0x140>)
 8006036:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1b8      	bne.n	8005fb0 <main+0x90>
    SendAccGyroMag = 1;
 800603e:	4b08      	ldr	r3, [pc, #32]	; (8006060 <main+0x140>)
 8006040:	2201      	movs	r2, #1
 8006042:	671a      	str	r2, [r3, #112]	; 0x70
    if (SendAccGyroMag) {
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0e6      	beq.n	8006018 <main+0xf8>
 800604a:	e7e0      	b.n	800600e <main+0xee>
 800604c:	f3af 8000 	nop.w
 8006050:	f01b866e 	.word	0xf01b866e
 8006054:	400921f9 	.word	0x400921f9
 8006058:	2000038c 	.word	0x2000038c
 800605c:	20000204 	.word	0x20000204
 8006060:	20000318 	.word	0x20000318
 8006064:	20000000 	.word	0x20000000
 8006068:	40668000 	.word	0x40668000
 800606c:	0800d07c 	.word	0x0800d07c

08006070 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
  switch (GPIO_Pin) {
 8006070:	2820      	cmp	r0, #32
 8006072:	d000      	beq.n	8006076 <HAL_GPIO_EXTI_Callback+0x6>
 8006074:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006076:	b508      	push	{r3, lr}
  case HCI_TL_SPI_EXTI_PIN:
    hci_tl_lowlevel_isr();
 8006078:	f7ff f97a 	bl	8005370 <hci_tl_lowlevel_isr>
    HCI_ProcessEvent = 1;
 800607c:	4b02      	ldr	r3, [pc, #8]	; (8006088 <HAL_GPIO_EXTI_Callback+0x18>)
 800607e:	2201      	movs	r2, #1
 8006080:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c

    //  case BSP_LSM6DSM_INT2:
    //    MEMSInterrupt=1;
    //    break;
  }
}
 8006084:	bd08      	pop	{r3, pc}
 8006086:	bf00      	nop
 8006088:	20000318 	.word	0x20000318

0800608c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800608c:	b530      	push	{r4, r5, lr}
 800608e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006090:	4c16      	ldr	r4, [pc, #88]	; (80060ec <HAL_PCD_MspInit+0x60>)
 8006092:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	64e3      	str	r3, [r4, #76]	; 0x4c
 800609a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	9b01      	ldr	r3, [sp, #4]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80060a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80060a8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060aa:	2302      	movs	r3, #2
 80060ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ae:	2500      	movs	r5, #0
 80060b0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b2:	2303      	movs	r3, #3
 80060b4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060b6:	230a      	movs	r3, #10
 80060b8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ba:	a903      	add	r1, sp, #12
 80060bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060c0:	f000 fd32 	bl	8006b28 <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 80060cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80060ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d2:	9302      	str	r3, [sp, #8]
 80060d4:	9b02      	ldr	r3, [sp, #8]

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80060d6:	462a      	mov	r2, r5
 80060d8:	2106      	movs	r1, #6
 80060da:	2043      	movs	r0, #67	; 0x43
 80060dc:	f000 fcca 	bl	8006a74 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80060e0:	2043      	movs	r0, #67	; 0x43
 80060e2:	f000 fcff 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
}
 80060e6:	b009      	add	sp, #36	; 0x24
 80060e8:	bd30      	pop	{r4, r5, pc}
 80060ea:	bf00      	nop
 80060ec:	40021000 	.word	0x40021000

080060f0 <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060f0:	b500      	push	{lr}
 80060f2:	b083      	sub	sp, #12
  if (htim->Instance == TIM4) {
 80060f4:	6803      	ldr	r3, [r0, #0]
 80060f6:	4a17      	ldr	r2, [pc, #92]	; (8006154 <HAL_TIM_Base_MspInit+0x64>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d005      	beq.n	8006108 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  #endif /* ALLMEMS1_MOTIONFA */
  } else if (htim->Instance == TIM5) {
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <HAL_TIM_Base_MspInit+0x68>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d015      	beq.n	800612e <HAL_TIM_Base_MspInit+0x3e>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }

}  
 8006102:	b003      	add	sp, #12
 8006104:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006108:	4b14      	ldr	r3, [pc, #80]	; (800615c <HAL_TIM_Base_MspInit+0x6c>)
 800610a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800610c:	f042 0204 	orr.w	r2, r2, #4
 8006110:	659a      	str	r2, [r3, #88]	; 0x58
 8006112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 800611c:	2200      	movs	r2, #0
 800611e:	210f      	movs	r1, #15
 8006120:	201e      	movs	r0, #30
 8006122:	f000 fca7 	bl	8006a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006126:	201e      	movs	r0, #30
 8006128:	f000 fcdc 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
 800612c:	e7e9      	b.n	8006102 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <HAL_TIM_Base_MspInit+0x6c>)
 8006130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006132:	f042 0208 	orr.w	r2, r2, #8
 8006136:	659a      	str	r2, [r3, #88]	; 0x58
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 8006142:	2200      	movs	r2, #0
 8006144:	210f      	movs	r1, #15
 8006146:	2032      	movs	r0, #50	; 0x32
 8006148:	f000 fc94 	bl	8006a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800614c:	2032      	movs	r0, #50	; 0x32
 800614e:	f000 fcc9 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
}  
 8006152:	e7d6      	b.n	8006102 <HAL_TIM_Base_MspInit+0x12>
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40021000 	.word	0x40021000

08006160 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8006160:	b500      	push	{lr}
 8006162:	b083      	sub	sp, #12
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <HAL_TIM_OC_MspInit+0x30>)
 8006166:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616c:	661a      	str	r2, [r3, #96]	; 0x60
 800616e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8006178:	2200      	movs	r2, #0
 800617a:	2108      	movs	r1, #8
 800617c:	201b      	movs	r0, #27
 800617e:	f000 fc79 	bl	8006a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006182:	201b      	movs	r0, #27
 8006184:	f000 fcae 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
}
 8006188:	b003      	add	sp, #12
 800618a:	f85d fb04 	ldr.w	pc, [sp], #4
 800618e:	bf00      	nop
 8006190:	40021000 	.word	0x40021000

08006194 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006194:	4770      	bx	lr

08006196 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006196:	e7fe      	b.n	8006196 <HardFault_Handler>

08006198 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006198:	e7fe      	b.n	8006198 <MemManage_Handler>

0800619a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800619a:	e7fe      	b.n	800619a <BusFault_Handler>

0800619c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800619c:	e7fe      	b.n	800619c <UsageFault_Handler>

0800619e <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800619e:	4770      	bx	lr

080061a0 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80061a0:	4770      	bx	lr

080061a2 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80061a2:	4770      	bx	lr

080061a4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80061a4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80061a6:	f000 fc41 	bl	8006a2c <HAL_IncTick>
}
 80061aa:	bd08      	pop	{r3, pc}

080061ac <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80061ac:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimEnvHandle);
 80061ae:	4802      	ldr	r0, [pc, #8]	; (80061b8 <TIM4_IRQHandler+0xc>)
 80061b0:	f003 fa1a 	bl	80095e8 <HAL_TIM_IRQHandler>
}
 80061b4:	bd08      	pop	{r3, pc}
 80061b6:	bf00      	nop
 80061b8:	2000038c 	.word	0x2000038c

080061bc <TIM5_IRQHandler>:
  * @retval None
  */
void TIM5_IRQHandler(void)
{  

}
 80061bc:	4770      	bx	lr
	...

080061c0 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 80061c0:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimCCHandle);
 80061c2:	4802      	ldr	r0, [pc, #8]	; (80061cc <TIM1_CC_IRQHandler+0xc>)
 80061c4:	f003 fa10 	bl	80095e8 <HAL_TIM_IRQHandler>
}
 80061c8:	bd08      	pop	{r3, pc}
 80061ca:	bf00      	nop
 80061cc:	2000033c 	.word	0x2000033c

080061d0 <EXTI3_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 80061d0:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80061d2:	2008      	movs	r0, #8
 80061d4:	f000 fe42 	bl	8006e5c <HAL_GPIO_EXTI_IRQHandler>
//  SW_BV_send_Callback();

}
 80061d8:	bd08      	pop	{r3, pc}

080061da <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 80061da:	b508      	push	{r3, lr}
  //HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
  HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
 80061dc:	2020      	movs	r0, #32
 80061de:	f000 fe3d 	bl	8006e5c <HAL_GPIO_EXTI_IRQHandler>
}
 80061e2:	bd08      	pop	{r3, pc}

080061e4 <EXTI2_IRQHandler>:
  * @retval None
  */
void EXTI2_IRQHandler( void )
{
//  HAL_GPIO_EXTI_IRQHandler(BSP_LSM6DSM_INT2);
}
 80061e4:	4770      	bx	lr
	...

080061e8 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 80061e8:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 80061ea:	4802      	ldr	r0, [pc, #8]	; (80061f4 <OTG_FS_IRQHandler+0xc>)
 80061ec:	f000 ffa0 	bl	8007130 <HAL_PCD_IRQHandler>
}
 80061f0:	bd08      	pop	{r3, pc}
 80061f2:	bf00      	nop
 80061f4:	2000205c 	.word	0x2000205c

080061f8 <TIM8_UP_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM8_IRQHandler(void)
{
 80061f8:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimHandle);
 80061fa:	4802      	ldr	r0, [pc, #8]	; (8006204 <TIM8_UP_IRQHandler+0xc>)
 80061fc:	f003 f9f4 	bl	80095e8 <HAL_TIM_IRQHandler>
}
 8006200:	bd08      	pop	{r3, pc}
 8006202:	bf00      	nop
 8006204:	20000800 	.word	0x20000800

08006208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006208:	b510      	push	{r4, lr}
 800620a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800620c:	4a0c      	ldr	r2, [pc, #48]	; (8006240 <_sbrk+0x38>)
 800620e:	490d      	ldr	r1, [pc, #52]	; (8006244 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006210:	480d      	ldr	r0, [pc, #52]	; (8006248 <_sbrk+0x40>)
 8006212:	6800      	ldr	r0, [r0, #0]
 8006214:	b140      	cbz	r0, 8006228 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006216:	480c      	ldr	r0, [pc, #48]	; (8006248 <_sbrk+0x40>)
 8006218:	6800      	ldr	r0, [r0, #0]
 800621a:	4403      	add	r3, r0
 800621c:	1a52      	subs	r2, r2, r1
 800621e:	4293      	cmp	r3, r2
 8006220:	d806      	bhi.n	8006230 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <_sbrk+0x40>)
 8006224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006226:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006228:	4807      	ldr	r0, [pc, #28]	; (8006248 <_sbrk+0x40>)
 800622a:	4c08      	ldr	r4, [pc, #32]	; (800624c <_sbrk+0x44>)
 800622c:	6004      	str	r4, [r0, #0]
 800622e:	e7f2      	b.n	8006216 <_sbrk+0xe>
    errno = ENOMEM;
 8006230:	f006 f9f6 	bl	800c620 <__errno>
 8006234:	230c      	movs	r3, #12
 8006236:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	e7f3      	b.n	8006226 <_sbrk+0x1e>
 800623e:	bf00      	nop
 8006240:	20018000 	.word	0x20018000
 8006244:	00002000 	.word	0x00002000
 8006248:	200007fc 	.word	0x200007fc
 800624c:	20002a68 	.word	0x20002a68

08006250 <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 8006250:	2000      	movs	r0, #0
 8006252:	4770      	bx	lr

08006254 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 8006254:	2820      	cmp	r0, #32
 8006256:	d003      	beq.n	8006260 <CDC_Itf_Control+0xc>
 8006258:	2821      	cmp	r0, #33	; 0x21
 800625a:	d014      	beq.n	8006286 <CDC_Itf_Control+0x32>
  default:
    break;
  }
  
  return (USBD_OK);
}
 800625c:	2000      	movs	r0, #0
 800625e:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8006260:	780b      	ldrb	r3, [r1, #0]
 8006262:	784a      	ldrb	r2, [r1, #1]
 8006264:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8006268:	788a      	ldrb	r2, [r1, #2]
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800626a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 800626e:	78ca      	ldrb	r2, [r1, #3]
 8006270:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8006274:	4a0c      	ldr	r2, [pc, #48]	; (80062a8 <CDC_Itf_Control+0x54>)
 8006276:	6013      	str	r3, [r2, #0]
    LineCoding.format     = pbuf[4];
 8006278:	790b      	ldrb	r3, [r1, #4]
 800627a:	7113      	strb	r3, [r2, #4]
    LineCoding.paritytype = pbuf[5];
 800627c:	794b      	ldrb	r3, [r1, #5]
 800627e:	7153      	strb	r3, [r2, #5]
    LineCoding.datatype   = pbuf[6];
 8006280:	798b      	ldrb	r3, [r1, #6]
 8006282:	7193      	strb	r3, [r2, #6]
    break;
 8006284:	e7ea      	b.n	800625c <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8006286:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <CDC_Itf_Control+0x54>)
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800628c:	785a      	ldrb	r2, [r3, #1]
 800628e:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8006290:	789a      	ldrb	r2, [r3, #2]
 8006292:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8006294:	78da      	ldrb	r2, [r3, #3]
 8006296:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8006298:	791a      	ldrb	r2, [r3, #4]
 800629a:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800629c:	795a      	ldrb	r2, [r3, #5]
 800629e:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 80062a0:	799b      	ldrb	r3, [r3, #6]
 80062a2:	718b      	strb	r3, [r1, #6]
    break;
 80062a4:	e7da      	b.n	800625c <CDC_Itf_Control+0x8>
 80062a6:	bf00      	nop
 80062a8:	20000008 	.word	0x20000008

080062ac <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 80062ac:	2000      	movs	r0, #0
 80062ae:	4770      	bx	lr

080062b0 <CDC_TIM_Config>:
  * @brief  CDC_TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
 80062b0:	b508      	push	{r3, lr}
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 80062b2:	4809      	ldr	r0, [pc, #36]	; (80062d8 <CDC_TIM_Config+0x28>)
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <CDC_TIM_Config+0x2c>)
 80062b6:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 80062b8:	f241 3387 	movw	r3, #4999	; 0x1387
 80062bc:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 80062be:	234f      	movs	r3, #79	; 0x4f
 80062c0:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062c6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 80062c8:	f003 fac0 	bl	800984c <HAL_TIM_Base_Init>
 80062cc:	b900      	cbnz	r0, 80062d0 <CDC_TIM_Config+0x20>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 80062ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80062d0:	f7ff fdba 	bl	8005e48 <Error_Handler>
}
 80062d4:	e7fb      	b.n	80062ce <CDC_TIM_Config+0x1e>
 80062d6:	bf00      	nop
 80062d8:	20000800 	.word	0x20000800
 80062dc:	40013400 	.word	0x40013400

080062e0 <CDC_Itf_Init>:
{
 80062e0:	b530      	push	{r4, r5, lr}
 80062e2:	b083      	sub	sp, #12
  TIMx_CLK_ENABLE();
 80062e4:	4b15      	ldr	r3, [pc, #84]	; (800633c <CDC_Itf_Init+0x5c>)
 80062e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ec:	661a      	str	r2, [r3, #96]	; 0x60
 80062ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 80062f8:	2200      	movs	r2, #0
 80062fa:	2106      	movs	r1, #6
 80062fc:	202c      	movs	r0, #44	; 0x2c
 80062fe:	f000 fbb9 	bl	8006a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8006302:	202c      	movs	r0, #44	; 0x2c
 8006304:	f000 fbee 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
  CDC_TIM_Config();
 8006308:	f7ff ffd2 	bl	80062b0 <CDC_TIM_Config>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800630c:	480c      	ldr	r0, [pc, #48]	; (8006340 <CDC_Itf_Init+0x60>)
 800630e:	f003 f909 	bl	8009524 <HAL_TIM_Base_Start_IT>
 8006312:	b978      	cbnz	r0, 8006334 <CDC_Itf_Init+0x54>
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 8006314:	4d0a      	ldr	r5, [pc, #40]	; (8006340 <CDC_Itf_Init+0x60>)
 8006316:	4c0b      	ldr	r4, [pc, #44]	; (8006344 <CDC_Itf_Init+0x64>)
 8006318:	2200      	movs	r2, #0
 800631a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800631e:	4620      	mov	r0, r4
 8006320:	f005 f8c6 	bl	800b4b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 8006324:	f605 014c 	addw	r1, r5, #2124	; 0x84c
 8006328:	4620      	mov	r0, r4
 800632a:	f005 f8cc 	bl	800b4c6 <USBD_CDC_SetRxBuffer>
}
 800632e:	2000      	movs	r0, #0
 8006330:	b003      	add	sp, #12
 8006332:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8006334:	f7ff fd88 	bl	8005e48 <Error_Handler>
 8006338:	e7ec      	b.n	8006314 <CDC_Itf_Init+0x34>
 800633a:	bf00      	nop
 800633c:	40021000 	.word	0x40021000
 8006340:	20000800 	.word	0x20000800
 8006344:	200003dc 	.word	0x200003dc

08006348 <CDC_Fill_Buffer>:
  for (i = 0; i < TotalLen; i++)
 8006348:	2200      	movs	r2, #0
 800634a:	428a      	cmp	r2, r1
 800634c:	d215      	bcs.n	800637a <CDC_Fill_Buffer+0x32>
{
 800634e:	b530      	push	{r4, r5, lr}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 8006350:	4d0b      	ldr	r5, [pc, #44]	; (8006380 <CDC_Fill_Buffer+0x38>)
 8006352:	f855 3cac 	ldr.w	r3, [r5, #-172]
 8006356:	f810 e002 	ldrb.w	lr, [r0, r2]
 800635a:	4c0a      	ldr	r4, [pc, #40]	; (8006384 <CDC_Fill_Buffer+0x3c>)
 800635c:	eb04 0c03 	add.w	ip, r4, r3
 8006360:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8006364:	3301      	adds	r3, #1
 8006366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800636a:	f845 3cac 	str.w	r3, [r5, #-172]
  for (i = 0; i < TotalLen; i++)
 800636e:	3201      	adds	r2, #1
 8006370:	b292      	uxth	r2, r2
 8006372:	428a      	cmp	r2, r1
 8006374:	d3ec      	bcc.n	8006350 <CDC_Fill_Buffer+0x8>
}
 8006376:	2000      	movs	r0, #0
 8006378:	bd30      	pop	{r4, r5, pc}
 800637a:	2000      	movs	r0, #0
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	200018f8 	.word	0x200018f8
 8006384:	20000800 	.word	0x20000800

08006388 <CDC_TIM_PeriodElapsedCallback>:
{
 8006388:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 800638a:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 800638c:	f852 3ca8 	ldr.w	r3, [r2, #-168]
 8006390:	f852 4cac 	ldr.w	r4, [r2, #-172]
 8006394:	42a3      	cmp	r3, r4
 8006396:	d016      	beq.n	80063c6 <CDC_TIM_PeriodElapsedCallback+0x3e>
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8006398:	d916      	bls.n	80063c8 <CDC_TIM_PeriodElapsedCallback+0x40>
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 800639a:	f5c3 6400 	rsb	r4, r3, #2048	; 0x800
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 800639e:	4d0e      	ldr	r5, [pc, #56]	; (80063d8 <CDC_TIM_PeriodElapsedCallback+0x50>)
 80063a0:	4622      	mov	r2, r4
 80063a2:	490e      	ldr	r1, [pc, #56]	; (80063dc <CDC_TIM_PeriodElapsedCallback+0x54>)
 80063a4:	4419      	add	r1, r3
 80063a6:	4628      	mov	r0, r5
 80063a8:	f005 f882 	bl	800b4b0 <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 80063ac:	4628      	mov	r0, r5
 80063ae:	f005 f893 	bl	800b4d8 <USBD_CDC_TransmitPacket>
 80063b2:	b940      	cbnz	r0, 80063c6 <CDC_TIM_PeriodElapsedCallback+0x3e>
      UserTxBufPtrOut += buffsize;
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 80063b6:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80063ba:	4422      	add	r2, r4
 80063bc:	f843 2ca8 	str.w	r2, [r3, #-168]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 80063c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80063c4:	d002      	beq.n	80063cc <CDC_TIM_PeriodElapsedCallback+0x44>
}
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80063c8:	1ae4      	subs	r4, r4, r3
 80063ca:	e7e8      	b.n	800639e <CDC_TIM_PeriodElapsedCallback+0x16>
        UserTxBufPtrOut = 0;
 80063cc:	2200      	movs	r2, #0
 80063ce:	f843 2ca8 	str.w	r2, [r3, #-168]
}
 80063d2:	e7f8      	b.n	80063c6 <CDC_TIM_PeriodElapsedCallback+0x3e>
 80063d4:	200018f8 	.word	0x200018f8
 80063d8:	200003dc 	.word	0x200003dc
 80063dc:	2000084c 	.word	0x2000084c

080063e0 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80063e0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80063e2:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80063e6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80063ea:	f005 f8d2 	bl	800b592 <USBD_LL_SetupStage>
}
 80063ee:	bd08      	pop	{r3, pc}

080063f0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80063f0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063f2:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80063f6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80063fa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80063fe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006402:	f005 f8f2 	bl	800b5ea <USBD_LL_DataOutStage>
}
 8006406:	bd08      	pop	{r3, pc}

08006408 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006408:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800640a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800640e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006414:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006418:	f005 f923 	bl	800b662 <USBD_LL_DataInStage>
}
 800641c:	bd08      	pop	{r3, pc}

0800641e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800641e:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 8006420:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006424:	f005 f9c3 	bl	800b7ae <USBD_LL_SOF>
}
 8006428:	bd08      	pop	{r3, pc}

0800642a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800642e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006432:	f005 f975 	bl	800b720 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8006436:	2101      	movs	r1, #1
 8006438:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800643c:	f005 f99d 	bl	800b77a <USBD_LL_SetSpeed>
}
 8006440:	bd10      	pop	{r4, pc}

08006442 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006442:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 8006444:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006448:	f005 f99a 	bl	800b780 <USBD_LL_Suspend>
}
 800644c:	bd08      	pop	{r3, pc}

0800644e <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800644e:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 8006450:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006454:	f005 f99e 	bl	800b794 <USBD_LL_Resume>
}
 8006458:	bd08      	pop	{r3, pc}

0800645a <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800645a:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800645c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006460:	f005 f9cd 	bl	800b7fe <USBD_LL_IsoOUTIncomplete>
}
 8006464:	bd08      	pop	{r3, pc}

08006466 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006466:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8006468:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800646c:	f005 f9b3 	bl	800b7d6 <USBD_LL_IsoINIncomplete>
}
 8006470:	bd08      	pop	{r3, pc}

08006472 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006472:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 8006474:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006478:	f005 f9d5 	bl	800b826 <USBD_LL_DevConnected>
}
 800647c:	bd08      	pop	{r3, pc}

0800647e <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800647e:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 8006480:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006484:	f005 f9d1 	bl	800b82a <USBD_LL_DevDisconnected>
}
 8006488:	bd08      	pop	{r3, pc}
	...

0800648c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800648c:	b570      	push	{r4, r5, r6, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800648e:	4c15      	ldr	r4, [pc, #84]	; (80064e4 <USBD_LL_Init+0x58>)
 8006490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006494:	6023      	str	r3, [r4, #0]
  hpcd.Init.dev_endpoints = 5;
 8006496:	2305      	movs	r3, #5
 8006498:	6063      	str	r3, [r4, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 800649a:	2500      	movs	r5, #0
 800649c:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800649e:	2640      	movs	r6, #64	; 0x40
 80064a0:	6166      	str	r6, [r4, #20]
  hpcd.Init.dma_enable = 0;
 80064a2:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 80064a4:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 80064a6:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 80064a8:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80064aa:	2302      	movs	r3, #2
 80064ac:	61a3      	str	r3, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 80064ae:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 80064b0:	60e3      	str	r3, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 80064b2:	62e5      	str	r5, [r4, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 80064b4:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  pdev->pData = &hpcd;
 80064b8:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fd40 	bl	8006f42 <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 80064c2:	2180      	movs	r1, #128	; 0x80
 80064c4:	4620      	mov	r0, r4
 80064c6:	f001 f9fa 	bl	80078be <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 80064ca:	4632      	mov	r2, r6
 80064cc:	4629      	mov	r1, r5
 80064ce:	4620      	mov	r0, r4
 80064d0:	f001 f9cf 	bl	8007872 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 80064d4:	2280      	movs	r2, #128	; 0x80
 80064d6:	2101      	movs	r1, #1
 80064d8:	4620      	mov	r0, r4
 80064da:	f001 f9ca 	bl	8007872 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 80064de:	4628      	mov	r0, r5
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
 80064e2:	bf00      	nop
 80064e4:	2000205c 	.word	0x2000205c

080064e8 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064e8:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80064ea:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80064ee:	f000 fdc6 	bl	800707e <HAL_PCD_Start>
  return USBD_OK;
}
 80064f2:	2000      	movs	r0, #0
 80064f4:	bd08      	pop	{r3, pc}

080064f6 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80064f6:	b508      	push	{r3, lr}
 80064f8:	4694      	mov	ip, r2
 80064fa:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 80064fc:	4663      	mov	r3, ip
 80064fe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006502:	f001 f86b 	bl	80075dc <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8006506:	2000      	movs	r0, #0
 8006508:	bd08      	pop	{r3, pc}

0800650a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800650a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800650c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006510:	f001 f8a9 	bl	8007666 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8006514:	2000      	movs	r0, #0
 8006516:	bd08      	pop	{r3, pc}

08006518 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006518:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800651a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800651e:	f001 f92a 	bl	8007776 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8006522:	2000      	movs	r0, #0
 8006524:	bd08      	pop	{r3, pc}

08006526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006526:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006528:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800652c:	f001 f966 	bl	80077fc <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8006530:	2000      	movs	r0, #0
 8006532:	bd08      	pop	{r3, pc}

08006534 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006534:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 8006538:	f011 0f80 	tst.w	r1, #128	; 0x80
 800653c:	d108      	bne.n	8006550 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800653e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006542:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006546:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800654a:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 800654e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006550:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006554:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006558:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800655c:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8006560:	4770      	bx	lr

08006562 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006562:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006564:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006568:	f001 f824 	bl	80075b4 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800656c:	2000      	movs	r0, #0
 800656e:	bd08      	pop	{r3, pc}

08006570 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8006570:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006572:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006576:	f001 f8db 	bl	8007730 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800657a:	2000      	movs	r0, #0
 800657c:	bd08      	pop	{r3, pc}

0800657e <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 800657e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006580:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006584:	f001 f8a8 	bl	80076d8 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8006588:	2000      	movs	r0, #0
 800658a:	bd08      	pop	{r3, pc}

0800658c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800658c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800658e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006592:	f001 f8c4 	bl	800771e <HAL_PCD_EP_GetRxCount>
}
 8006596:	bd08      	pop	{r3, pc}

08006598 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8006598:	2312      	movs	r3, #18
 800659a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 800659c:	4800      	ldr	r0, [pc, #0]	; (80065a0 <USBD_VCP_DeviceDescriptor+0x8>)
 800659e:	4770      	bx	lr
 80065a0:	20000024 	.word	0x20000024

080065a4 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 80065a4:	2304      	movs	r3, #4
 80065a6:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 80065a8:	4800      	ldr	r0, [pc, #0]	; (80065ac <USBD_VCP_LangIDStrDescriptor+0x8>)
 80065aa:	4770      	bx	lr
 80065ac:	20000038 	.word	0x20000038

080065b0 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d21e      	bcs.n	80065f4 <IntToUnicode+0x44>
{
 80065b6:	b500      	push	{lr}
 80065b8:	e010      	b.n	80065dc <IntToUnicode+0x2c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80065ba:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 80065be:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }
    
    value = value << 4;
 80065c2:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 80065c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065c8:	f10c 0c01 	add.w	ip, ip, #1
 80065cc:	f04f 0e00 	mov.w	lr, #0
 80065d0:	f801 e00c 	strb.w	lr, [r1, ip]
  for( idx = 0 ; idx < len ; idx ++)
 80065d4:	3301      	adds	r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	4293      	cmp	r3, r2
 80065da:	d209      	bcs.n	80065f0 <IntToUnicode+0x40>
    if( ((value >> 28)) < 0xA )
 80065dc:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80065e0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80065e4:	d2e9      	bcs.n	80065ba <IntToUnicode+0xa>
      pbuf[ 2* idx] = (value >> 28) + '0';
 80065e6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80065ea:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80065ee:	e7e8      	b.n	80065c2 <IntToUnicode+0x12>
  }
}
 80065f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <Get_SerialNum>:
{
 80065f8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <Get_SerialNum+0x30>)
 80065fc:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8006600:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8006604:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8006608:	18c0      	adds	r0, r0, r3
 800660a:	d100      	bne.n	800660e <Get_SerialNum+0x16>
}
 800660c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800660e:	4d07      	ldr	r5, [pc, #28]	; (800662c <Get_SerialNum+0x34>)
 8006610:	2208      	movs	r2, #8
 8006612:	f105 011a 	add.w	r1, r5, #26
 8006616:	f7ff ffcb 	bl	80065b0 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800661a:	2204      	movs	r2, #4
 800661c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8006620:	4620      	mov	r0, r4
 8006622:	f7ff ffc5 	bl	80065b0 <IntToUnicode>
}
 8006626:	e7f1      	b.n	800660c <Get_SerialNum+0x14>
 8006628:	1fff7000 	.word	0x1fff7000
 800662c:	20000024 	.word	0x20000024

08006630 <USBD_VCP_SerialStrDescriptor>:
{
 8006630:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006632:	231a      	movs	r3, #26
 8006634:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8006636:	f7ff ffdf 	bl	80065f8 <Get_SerialNum>
}
 800663a:	4801      	ldr	r0, [pc, #4]	; (8006640 <USBD_VCP_SerialStrDescriptor+0x10>)
 800663c:	bd08      	pop	{r3, pc}
 800663e:	bf00      	nop
 8006640:	2000003c 	.word	0x2000003c

08006644 <USBD_VCP_ProductStrDescriptor>:
{  
 8006644:	b510      	push	{r4, lr}
 8006646:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8006648:	4c03      	ldr	r4, [pc, #12]	; (8006658 <USBD_VCP_ProductStrDescriptor+0x14>)
 800664a:	4621      	mov	r1, r4
 800664c:	4803      	ldr	r0, [pc, #12]	; (800665c <USBD_VCP_ProductStrDescriptor+0x18>)
 800664e:	f005 fc2c 	bl	800beaa <USBD_GetString>
}
 8006652:	4620      	mov	r0, r4
 8006654:	bd10      	pop	{r4, pc}
 8006656:	bf00      	nop
 8006658:	20002464 	.word	0x20002464
 800665c:	0800d08c 	.word	0x0800d08c

08006660 <USBD_VCP_ManufacturerStrDescriptor>:
{
 8006660:	b510      	push	{r4, lr}
 8006662:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006664:	4c03      	ldr	r4, [pc, #12]	; (8006674 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8006666:	4621      	mov	r1, r4
 8006668:	4803      	ldr	r0, [pc, #12]	; (8006678 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 800666a:	f005 fc1e 	bl	800beaa <USBD_GetString>
}
 800666e:	4620      	mov	r0, r4
 8006670:	bd10      	pop	{r4, pc}
 8006672:	bf00      	nop
 8006674:	20002464 	.word	0x20002464
 8006678:	0800d0b0 	.word	0x0800d0b0

0800667c <USBD_VCP_ConfigStrDescriptor>:
{ 
 800667c:	b510      	push	{r4, lr}
 800667e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8006680:	4c03      	ldr	r4, [pc, #12]	; (8006690 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8006682:	4621      	mov	r1, r4
 8006684:	4803      	ldr	r0, [pc, #12]	; (8006694 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8006686:	f005 fc10 	bl	800beaa <USBD_GetString>
}
 800668a:	4620      	mov	r0, r4
 800668c:	bd10      	pop	{r4, pc}
 800668e:	bf00      	nop
 8006690:	20002464 	.word	0x20002464
 8006694:	0800d0c4 	.word	0x0800d0c4

08006698 <USBD_VCP_InterfaceStrDescriptor>:
{
 8006698:	b510      	push	{r4, lr}
 800669a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800669c:	4c03      	ldr	r4, [pc, #12]	; (80066ac <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800669e:	4621      	mov	r1, r4
 80066a0:	4803      	ldr	r0, [pc, #12]	; (80066b0 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 80066a2:	f005 fc02 	bl	800beaa <USBD_GetString>
}
 80066a6:	4620      	mov	r0, r4
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	bf00      	nop
 80066ac:	20002464 	.word	0x20002464
 80066b0:	0800d0d0 	.word	0x0800d0d0

080066b4 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 80066b4:	b510      	push	{r4, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80066ba:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <BSP_LED_Init+0x74>)
 80066bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80066c2:	659a      	str	r2, [r3, #88]	; 0x58
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 80066ce:	f001 f927 	bl	8007920 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80066d2:	b94c      	cbnz	r4, 80066e8 <BSP_LED_Init+0x34>
 80066d4:	4b14      	ldr	r3, [pc, #80]	; (8006728 <BSP_LED_Init+0x74>)
 80066d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	2c01      	cmp	r4, #1
 80066ea:	d011      	beq.n	8006710 <BSP_LED_Init+0x5c>
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <BSP_LED_Init+0x78>)
 80066ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80066f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066f4:	2301      	movs	r3, #1
 80066f6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80066fc:	2302      	movs	r3, #2
 80066fe:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006700:	a903      	add	r1, sp, #12
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <BSP_LED_Init+0x7c>)
 8006704:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006708:	f000 fa0e 	bl	8006b28 <HAL_GPIO_Init>
}
 800670c:	b008      	add	sp, #32
 800670e:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <BSP_LED_Init+0x74>)
 8006712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006714:	f042 0201 	orr.w	r2, r2, #1
 8006718:	64da      	str	r2, [r3, #76]	; 0x4c
 800671a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	9b02      	ldr	r3, [sp, #8]
 8006724:	e7e2      	b.n	80066ec <BSP_LED_Init+0x38>
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
 800672c:	0800cdc8 	.word	0x0800cdc8
 8006730:	20000074 	.word	0x20000074

08006734 <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8006734:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <BSP_LED_Toggle+0x14>)
 8006738:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 800673c:	4b03      	ldr	r3, [pc, #12]	; (800674c <BSP_LED_Toggle+0x18>)
 800673e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006742:	f000 fb81 	bl	8006e48 <HAL_GPIO_TogglePin>
}
 8006746:	bd08      	pop	{r3, pc}
 8006748:	0800cdc8 	.word	0x0800cdc8
 800674c:	20000074 	.word	0x20000074

08006750 <SPI2_MspInit>:
  return ret;
}


static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006750:	b500      	push	{lr}
 8006752:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006754:	4b11      	ldr	r3, [pc, #68]	; (800679c <SPI2_MspInit+0x4c>)
 8006756:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800675c:	659a      	str	r2, [r3, #88]	; 0x58
 800675e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006760:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006764:	9201      	str	r2, [sp, #4]
 8006766:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800676a:	f042 0202 	orr.w	r2, r2, #2
 800676e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	9302      	str	r3, [sp, #8]
 8006778:	9b02      	ldr	r3, [sp, #8]

    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800677a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800677e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006780:	2302      	movs	r3, #2
 8006782:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006784:	2201      	movs	r2, #1
 8006786:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006788:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800678a:	2305      	movs	r3, #5
 800678c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800678e:	a903      	add	r1, sp, #12
 8006790:	4803      	ldr	r0, [pc, #12]	; (80067a0 <SPI2_MspInit+0x50>)
 8006792:	f000 f9c9 	bl	8006b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8006796:	b009      	add	sp, #36	; 0x24
 8006798:	f85d fb04 	ldr.w	pc, [sp], #4
 800679c:	40021000 	.word	0x40021000
 80067a0:	48000400 	.word	0x48000400

080067a4 <SPI1_MspInit>:
{
 80067a4:	b500      	push	{lr}
 80067a6:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 80067a8:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <SPI1_MspInit+0x50>)
 80067aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067b0:	661a      	str	r2, [r3, #96]	; 0x60
 80067b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067b8:	9201      	str	r2, [sp, #4]
 80067ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	9302      	str	r3, [sp, #8]
 80067cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80067ce:	23e0      	movs	r3, #224	; 0xe0
 80067d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d2:	2302      	movs	r3, #2
 80067d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067d6:	2301      	movs	r3, #1
 80067d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067da:	2303      	movs	r3, #3
 80067dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80067de:	2305      	movs	r3, #5
 80067e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e2:	a903      	add	r1, sp, #12
 80067e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067e8:	f000 f99e 	bl	8006b28 <HAL_GPIO_Init>
}
 80067ec:	b009      	add	sp, #36	; 0x24
 80067ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80067f2:	bf00      	nop
 80067f4:	40021000 	.word	0x40021000

080067f8 <BSP_SPI2_Send>:
{
 80067f8:	b510      	push	{r4, lr}
 80067fa:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80067fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006800:	460a      	mov	r2, r1
 8006802:	4601      	mov	r1, r0
 8006804:	4804      	ldr	r0, [pc, #16]	; (8006818 <BSP_SPI2_Send+0x20>)
 8006806:	f002 fa37 	bl	8008c78 <HAL_SPI_Transmit>
 800680a:	b908      	cbnz	r0, 8006810 <BSP_SPI2_Send+0x18>
      ret = len;
 800680c:	4620      	mov	r0, r4
}
 800680e:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006810:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8006814:	e7fb      	b.n	800680e <BSP_SPI2_Send+0x16>
 8006816:	bf00      	nop
 8006818:	20002564 	.word	0x20002564

0800681c <BSP_SPI1_SendRecv>:
{
 800681c:	b510      	push	{r4, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8006822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	460a      	mov	r2, r1
 800682c:	4601      	mov	r1, r0
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <BSP_SPI1_SendRecv+0x28>)
 8006830:	f002 fb3c 	bl	8008eac <HAL_SPI_TransmitReceive>
 8006834:	b910      	cbnz	r0, 800683c <BSP_SPI1_SendRecv+0x20>
      ret = len;
 8006836:	4620      	mov	r0, r4
}
 8006838:	b002      	add	sp, #8
 800683a:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800683c:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8006840:	e7fa      	b.n	8006838 <BSP_SPI1_SendRecv+0x1c>
 8006842:	bf00      	nop
 8006844:	200025c8 	.word	0x200025c8

08006848 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8006848:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800684a:	f000 f8fb 	bl	8006a44 <HAL_GetTick>
}
 800684e:	bd08      	pop	{r3, pc}

08006850 <MX_SPI1_Init>:
{
 8006850:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 8006852:	4a0f      	ldr	r2, [pc, #60]	; (8006890 <MX_SPI1_Init+0x40>)
 8006854:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006856:	f44f 7282 	mov.w	r2, #260	; 0x104
 800685a:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800685c:	2200      	movs	r2, #0
 800685e:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006860:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006864:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006866:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006868:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800686a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800686e:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006870:	2118      	movs	r1, #24
 8006872:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006874:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006876:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006878:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800687a:	2107      	movs	r1, #7
 800687c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800687e:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006880:	2208      	movs	r2, #8
 8006882:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006884:	f002 f96a 	bl	8008b5c <HAL_SPI_Init>
 8006888:	b100      	cbz	r0, 800688c <MX_SPI1_Init+0x3c>
    ret = HAL_ERROR;
 800688a:	2001      	movs	r0, #1
}
 800688c:	bd08      	pop	{r3, pc}
 800688e:	bf00      	nop
 8006890:	40013000 	.word	0x40013000

08006894 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8006894:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 8006896:	480a      	ldr	r0, [pc, #40]	; (80068c0 <BSP_SPI1_Init+0x2c>)
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <BSP_SPI1_Init+0x30>)
 800689a:	f840 3f64 	str.w	r3, [r0, #100]!
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 800689e:	f002 fd0a 	bl	80092b6 <HAL_SPI_GetState>
 80068a2:	b108      	cbz	r0, 80068a8 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80068a4:	2000      	movs	r0, #0
}
 80068a6:	bd10      	pop	{r4, pc}
    SPI1_MspInit(&hbusspi1);
 80068a8:	4c07      	ldr	r4, [pc, #28]	; (80068c8 <BSP_SPI1_Init+0x34>)
 80068aa:	4620      	mov	r0, r4
 80068ac:	f7ff ff7a 	bl	80067a4 <SPI1_MspInit>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff ffcd 	bl	8006850 <MX_SPI1_Init>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d0f5      	beq.n	80068a6 <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 80068ba:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80068be:	e7f2      	b.n	80068a6 <BSP_SPI1_Init+0x12>
 80068c0:	20002564 	.word	0x20002564
 80068c4:	40013000 	.word	0x40013000
 80068c8:	200025c8 	.word	0x200025c8

080068cc <MX_SPI2_Init>:
{
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4604      	mov	r4, r0
  hspi->Instance = SPI2;
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <MX_SPI2_Init+0x6c>)
 80068d2:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80068d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80068d8:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 80068da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068de:	6083      	str	r3, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80068e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80068e4:	60c3      	str	r3, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80068e6:	2302      	movs	r3, #2
 80068e8:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80068ea:	2301      	movs	r3, #1
 80068ec:	6143      	str	r3, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80068ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f2:	6183      	str	r3, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80068f4:	2330      	movs	r3, #48	; 0x30
 80068f6:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80068f8:	2300      	movs	r3, #0
 80068fa:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80068fc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068fe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8006900:	2207      	movs	r2, #7
 8006902:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006904:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006906:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006908:	f002 f928 	bl	8008b5c <HAL_SPI_Init>
 800690c:	4605      	mov	r5, r0
 800690e:	b100      	cbz	r0, 8006912 <MX_SPI2_Init+0x46>
    ret = HAL_ERROR;
 8006910:	2501      	movs	r5, #1
  HAL_Delay(5);
 8006912:	2005      	movs	r0, #5
 8006914:	f7ff fa62 	bl	8005ddc <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006920:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 8006922:	2005      	movs	r0, #5
 8006924:	f7ff fa5a 	bl	8005ddc <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8006928:	6822      	ldr	r2, [r4, #0]
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006930:	6013      	str	r3, [r2, #0]
}
 8006932:	4628      	mov	r0, r5
 8006934:	bd38      	pop	{r3, r4, r5, pc}
 8006936:	bf00      	nop
 8006938:	40003800 	.word	0x40003800

0800693c <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 800693c:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 800693e:	480a      	ldr	r0, [pc, #40]	; (8006968 <BSP_SPI2_Init+0x2c>)
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <BSP_SPI2_Init+0x30>)
 8006942:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 8006944:	f002 fcb7 	bl	80092b6 <HAL_SPI_GetState>
 8006948:	b108      	cbz	r0, 800694e <BSP_SPI2_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 800694a:	2000      	movs	r0, #0
}
 800694c:	bd10      	pop	{r4, pc}
    SPI2_MspInit(&hbusspi2);
 800694e:	4c06      	ldr	r4, [pc, #24]	; (8006968 <BSP_SPI2_Init+0x2c>)
 8006950:	4620      	mov	r0, r4
 8006952:	f7ff fefd 	bl	8006750 <SPI2_MspInit>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8006956:	4620      	mov	r0, r4
 8006958:	f7ff ffb8 	bl	80068cc <MX_SPI2_Init>
 800695c:	2800      	cmp	r0, #0
 800695e:	d0f5      	beq.n	800694c <BSP_SPI2_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8006960:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006964:	e7f2      	b.n	800694c <BSP_SPI2_Init+0x10>
 8006966:	bf00      	nop
 8006968:	20002564 	.word	0x20002564
 800696c:	40003800 	.word	0x40003800

08006970 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006970:	490f      	ldr	r1, [pc, #60]	; (80069b0 <SystemInit+0x40>)
 8006972:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800697e:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <SystemInit+0x44>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006988:	2000      	movs	r0, #0
 800698a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8006992:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006996:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006998:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800699c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069a4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80069a6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069a8:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <SystemInit+0x48>)
 80069aa:	608b      	str	r3, [r1, #8]
#endif
}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00
 80069b4:	40021000 	.word	0x40021000
 80069b8:	08004000 	.word	0x08004000

080069bc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80069bc:	4770      	bx	lr
	...

080069c0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80069c0:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <HAL_InitTick+0x44>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b90b      	cbnz	r3, 80069ca <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80069c6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80069c8:	4770      	bx	lr
{
 80069ca:	b510      	push	{r4, lr}
 80069cc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80069ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069d6:	4a0c      	ldr	r2, [pc, #48]	; (8006a08 <HAL_InitTick+0x48>)
 80069d8:	6810      	ldr	r0, [r2, #0]
 80069da:	fbb0 f0f3 	udiv	r0, r0, r3
 80069de:	f000 f88f 	bl	8006b00 <HAL_SYSTICK_Config>
 80069e2:	b968      	cbnz	r0, 8006a00 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069e4:	2c0f      	cmp	r4, #15
 80069e6:	d901      	bls.n	80069ec <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80069e8:	2001      	movs	r0, #1
 80069ea:	e00a      	b.n	8006a02 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069ec:	2200      	movs	r2, #0
 80069ee:	4621      	mov	r1, r4
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	f000 f83e 	bl	8006a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80069f8:	4b02      	ldr	r3, [pc, #8]	; (8006a04 <HAL_InitTick+0x44>)
 80069fa:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80069fc:	2000      	movs	r0, #0
 80069fe:	e000      	b.n	8006a02 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
}
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	20000080 	.word	0x20000080
 8006a08:	2000007c 	.word	0x2000007c

08006a0c <HAL_Init>:
{
 8006a0c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a0e:	2003      	movs	r0, #3
 8006a10:	f000 f81e 	bl	8006a50 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a14:	200f      	movs	r0, #15
 8006a16:	f7ff ffd3 	bl	80069c0 <HAL_InitTick>
 8006a1a:	b110      	cbz	r0, 8006a22 <HAL_Init+0x16>
    status = HAL_ERROR;
 8006a1c:	2401      	movs	r4, #1
}
 8006a1e:	4620      	mov	r0, r4
 8006a20:	bd10      	pop	{r4, pc}
 8006a22:	4604      	mov	r4, r0
    HAL_MspInit();
 8006a24:	f7ff ffca 	bl	80069bc <HAL_MspInit>
 8006a28:	e7f9      	b.n	8006a1e <HAL_Init+0x12>
	...

08006a2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <HAL_IncTick+0x10>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	4a03      	ldr	r2, [pc, #12]	; (8006a40 <HAL_IncTick+0x14>)
 8006a32:	6811      	ldr	r1, [r2, #0]
 8006a34:	440b      	add	r3, r1
 8006a36:	6013      	str	r3, [r2, #0]
}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000080 	.word	0x20000080
 8006a40:	2000262c 	.word	0x2000262c

08006a44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006a44:	4b01      	ldr	r3, [pc, #4]	; (8006a4c <HAL_GetTick+0x8>)
 8006a46:	6818      	ldr	r0, [r3, #0]
}
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	2000262c 	.word	0x2000262c

08006a50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a50:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006a52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a5c:	0200      	lsls	r0, r0, #8
 8006a5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a62:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006a6c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006a6e:	4770      	bx	lr
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a74:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a76:	4b19      	ldr	r3, [pc, #100]	; (8006adc <HAL_NVIC_SetPriority+0x68>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a7e:	f1c3 0c07 	rsb	ip, r3, #7
 8006a82:	f1bc 0f04 	cmp.w	ip, #4
 8006a86:	bf28      	it	cs
 8006a88:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a8c:	f103 0e04 	add.w	lr, r3, #4
 8006a90:	f1be 0f06 	cmp.w	lr, #6
 8006a94:	d918      	bls.n	8006ac8 <HAL_NVIC_SetPriority+0x54>
 8006a96:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a98:	f04f 3eff 	mov.w	lr, #4294967295
 8006a9c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006aa0:	ea21 010c 	bic.w	r1, r1, ip
 8006aa4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa6:	fa0e fe03 	lsl.w	lr, lr, r3
 8006aaa:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aae:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	db0b      	blt.n	8006acc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ab4:	0112      	lsls	r2, r2, #4
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006abc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006ac0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006ac4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e7e5      	b.n	8006a98 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006acc:	f000 000f 	and.w	r0, r0, #15
 8006ad0:	0112      	lsls	r2, r2, #4
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	4b02      	ldr	r3, [pc, #8]	; (8006ae0 <HAL_NVIC_SetPriority+0x6c>)
 8006ad6:	541a      	strb	r2, [r3, r0]
 8006ad8:	e7f4      	b.n	8006ac4 <HAL_NVIC_SetPriority+0x50>
 8006ada:	bf00      	nop
 8006adc:	e000ed00 	.word	0xe000ed00
 8006ae0:	e000ed14 	.word	0xe000ed14

08006ae4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	db07      	blt.n	8006af8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ae8:	f000 021f 	and.w	r2, r0, #31
 8006aec:	0940      	lsrs	r0, r0, #5
 8006aee:	2301      	movs	r3, #1
 8006af0:	4093      	lsls	r3, r2
 8006af2:	4a02      	ldr	r2, [pc, #8]	; (8006afc <HAL_NVIC_EnableIRQ+0x18>)
 8006af4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	e000e100 	.word	0xe000e100

08006b00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b00:	3801      	subs	r0, #1
 8006b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006b06:	d20b      	bcs.n	8006b20 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006b0c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b0e:	4a05      	ldr	r2, [pc, #20]	; (8006b24 <HAL_SYSTICK_Config+0x24>)
 8006b10:	21f0      	movs	r1, #240	; 0xf0
 8006b12:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b16:	2000      	movs	r0, #0
 8006b18:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b1e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006b20:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006b22:	4770      	bx	lr
 8006b24:	e000ed00 	.word	0xe000ed00

08006b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8006b2c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b2e:	e03f      	b.n	8006bb0 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006b30:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006b32:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006b36:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8006b3a:	409c      	lsls	r4, r3
 8006b3c:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8006b3e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006b40:	e062      	b.n	8006c08 <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b42:	2406      	movs	r4, #6
 8006b44:	e000      	b.n	8006b48 <HAL_GPIO_Init+0x20>
 8006b46:	2400      	movs	r4, #0
 8006b48:	40b4      	lsls	r4, r6
 8006b4a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b4c:	3502      	adds	r5, #2
 8006b4e:	4e68      	ldr	r6, [pc, #416]	; (8006cf0 <HAL_GPIO_Init+0x1c8>)
 8006b50:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b54:	4c67      	ldr	r4, [pc, #412]	; (8006cf4 <HAL_GPIO_Init+0x1cc>)
 8006b56:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006b58:	43d4      	mvns	r4, r2
 8006b5a:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b5e:	684f      	ldr	r7, [r1, #4]
 8006b60:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8006b64:	d001      	beq.n	8006b6a <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8006b66:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8006b6a:	4d62      	ldr	r5, [pc, #392]	; (8006cf4 <HAL_GPIO_Init+0x1cc>)
 8006b6c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8006b6e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006b70:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b74:	684f      	ldr	r7, [r1, #4]
 8006b76:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8006b7a:	d001      	beq.n	8006b80 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8006b7c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8006b80:	4d5c      	ldr	r5, [pc, #368]	; (8006cf4 <HAL_GPIO_Init+0x1cc>)
 8006b82:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b84:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8006b86:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b8a:	684f      	ldr	r7, [r1, #4]
 8006b8c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8006b90:	d001      	beq.n	8006b96 <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8006b92:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006b96:	4d57      	ldr	r5, [pc, #348]	; (8006cf4 <HAL_GPIO_Init+0x1cc>)
 8006b98:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006b9a:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8006b9c:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b9e:	684e      	ldr	r6, [r1, #4]
 8006ba0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8006ba4:	d001      	beq.n	8006baa <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8006ba6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006baa:	4a52      	ldr	r2, [pc, #328]	; (8006cf4 <HAL_GPIO_Init+0x1cc>)
 8006bac:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8006bae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bb0:	680a      	ldr	r2, [r1, #0]
 8006bb2:	fa32 f403 	lsrs.w	r4, r2, r3
 8006bb6:	f000 8098 	beq.w	8006cea <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006bba:	f04f 0c01 	mov.w	ip, #1
 8006bbe:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8006bc2:	ea1c 0202 	ands.w	r2, ip, r2
 8006bc6:	d0f2      	beq.n	8006bae <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006bc8:	684c      	ldr	r4, [r1, #4]
 8006bca:	1e65      	subs	r5, r4, #1
 8006bcc:	2d01      	cmp	r5, #1
 8006bce:	d903      	bls.n	8006bd8 <HAL_GPIO_Init+0xb0>
 8006bd0:	2c11      	cmp	r4, #17
 8006bd2:	d001      	beq.n	8006bd8 <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bd4:	2c12      	cmp	r4, #18
 8006bd6:	d112      	bne.n	8006bfe <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8006bd8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006bda:	005e      	lsls	r6, r3, #1
 8006bdc:	2403      	movs	r4, #3
 8006bde:	40b4      	lsls	r4, r6
 8006be0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006be4:	68cc      	ldr	r4, [r1, #12]
 8006be6:	40b4      	lsls	r4, r6
 8006be8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006bea:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8006bec:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bee:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006bf2:	684c      	ldr	r4, [r1, #4]
 8006bf4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006bf8:	409c      	lsls	r4, r3
 8006bfa:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006bfc:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006bfe:	684c      	ldr	r4, [r1, #4]
 8006c00:	f004 0503 	and.w	r5, r4, #3
 8006c04:	2d03      	cmp	r5, #3
 8006c06:	d093      	beq.n	8006b30 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8006c08:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006c0a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006c0e:	2403      	movs	r4, #3
 8006c10:	fa04 f40e 	lsl.w	r4, r4, lr
 8006c14:	ea6f 0c04 	mvn.w	ip, r4
 8006c18:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006c1c:	688c      	ldr	r4, [r1, #8]
 8006c1e:	fa04 f40e 	lsl.w	r4, r4, lr
 8006c22:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8006c24:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c26:	684c      	ldr	r4, [r1, #4]
 8006c28:	2c02      	cmp	r4, #2
 8006c2a:	d001      	beq.n	8006c30 <HAL_GPIO_Init+0x108>
 8006c2c:	2c12      	cmp	r4, #18
 8006c2e:	d10f      	bne.n	8006c50 <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 8006c30:	08dd      	lsrs	r5, r3, #3
 8006c32:	3508      	adds	r5, #8
 8006c34:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c38:	f003 0607 	and.w	r6, r3, #7
 8006c3c:	00b6      	lsls	r6, r6, #2
 8006c3e:	240f      	movs	r4, #15
 8006c40:	40b4      	lsls	r4, r6
 8006c42:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c46:	690c      	ldr	r4, [r1, #16]
 8006c48:	40b4      	lsls	r4, r6
 8006c4a:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8006c4c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8006c50:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c52:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c56:	684c      	ldr	r4, [r1, #4]
 8006c58:	f004 0403 	and.w	r4, r4, #3
 8006c5c:	fa04 f40e 	lsl.w	r4, r4, lr
 8006c60:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006c64:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c66:	684c      	ldr	r4, [r1, #4]
 8006c68:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8006c6c:	d09f      	beq.n	8006bae <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c6e:	4c22      	ldr	r4, [pc, #136]	; (8006cf8 <HAL_GPIO_Init+0x1d0>)
 8006c70:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006c72:	f045 0501 	orr.w	r5, r5, #1
 8006c76:	6625      	str	r5, [r4, #96]	; 0x60
 8006c78:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8006c7a:	f004 0401 	and.w	r4, r4, #1
 8006c7e:	9401      	str	r4, [sp, #4]
 8006c80:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8006c82:	089d      	lsrs	r5, r3, #2
 8006c84:	1cae      	adds	r6, r5, #2
 8006c86:	4c1a      	ldr	r4, [pc, #104]	; (8006cf0 <HAL_GPIO_Init+0x1c8>)
 8006c88:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006c8c:	f003 0603 	and.w	r6, r3, #3
 8006c90:	00b6      	lsls	r6, r6, #2
 8006c92:	240f      	movs	r4, #15
 8006c94:	40b4      	lsls	r4, r6
 8006c96:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006c9a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006c9e:	f43f af52 	beq.w	8006b46 <HAL_GPIO_Init+0x1e>
 8006ca2:	4c16      	ldr	r4, [pc, #88]	; (8006cfc <HAL_GPIO_Init+0x1d4>)
 8006ca4:	42a0      	cmp	r0, r4
 8006ca6:	d016      	beq.n	8006cd6 <HAL_GPIO_Init+0x1ae>
 8006ca8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cac:	42a0      	cmp	r0, r4
 8006cae:	d014      	beq.n	8006cda <HAL_GPIO_Init+0x1b2>
 8006cb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cb4:	42a0      	cmp	r0, r4
 8006cb6:	d012      	beq.n	8006cde <HAL_GPIO_Init+0x1b6>
 8006cb8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d010      	beq.n	8006ce2 <HAL_GPIO_Init+0x1ba>
 8006cc0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cc4:	42a0      	cmp	r0, r4
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_GPIO_Init+0x1be>
 8006cc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	f43f af38 	beq.w	8006b42 <HAL_GPIO_Init+0x1a>
 8006cd2:	2407      	movs	r4, #7
 8006cd4:	e738      	b.n	8006b48 <HAL_GPIO_Init+0x20>
 8006cd6:	2401      	movs	r4, #1
 8006cd8:	e736      	b.n	8006b48 <HAL_GPIO_Init+0x20>
 8006cda:	2402      	movs	r4, #2
 8006cdc:	e734      	b.n	8006b48 <HAL_GPIO_Init+0x20>
 8006cde:	2403      	movs	r4, #3
 8006ce0:	e732      	b.n	8006b48 <HAL_GPIO_Init+0x20>
 8006ce2:	2404      	movs	r4, #4
 8006ce4:	e730      	b.n	8006b48 <HAL_GPIO_Init+0x20>
 8006ce6:	2405      	movs	r4, #5
 8006ce8:	e72e      	b.n	8006b48 <HAL_GPIO_Init+0x20>
  }
}
 8006cea:	b003      	add	sp, #12
 8006cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	48000400 	.word	0x48000400

08006d00 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8006d00:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006d02:	fa31 f203 	lsrs.w	r2, r1, r3
 8006d06:	f000 808b 	beq.w	8006e20 <HAL_GPIO_DeInit+0x120>
{
 8006d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0c:	e032      	b.n	8006d74 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006d0e:	2506      	movs	r5, #6
 8006d10:	e000      	b.n	8006d14 <HAL_GPIO_DeInit+0x14>
 8006d12:	2500      	movs	r5, #0
 8006d14:	fa05 f50c 	lsl.w	r5, r5, ip
 8006d18:	42a5      	cmp	r5, r4
 8006d1a:	d065      	beq.n	8006de8 <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006d1c:	6804      	ldr	r4, [r0, #0]
 8006d1e:	005d      	lsls	r5, r3, #1
 8006d20:	f04f 0c03 	mov.w	ip, #3
 8006d24:	fa0c fc05 	lsl.w	ip, ip, r5
 8006d28:	ea44 040c 	orr.w	r4, r4, ip
 8006d2c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006d2e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8006d32:	f10e 0e08 	add.w	lr, lr, #8
 8006d36:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8006d3a:	f003 0607 	and.w	r6, r3, #7
 8006d3e:	00b6      	lsls	r6, r6, #2
 8006d40:	250f      	movs	r5, #15
 8006d42:	40b5      	lsls	r5, r6
 8006d44:	ea24 0405 	bic.w	r4, r4, r5
 8006d48:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006d4c:	6884      	ldr	r4, [r0, #8]
 8006d4e:	ea24 040c 	bic.w	r4, r4, ip
 8006d52:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d54:	6844      	ldr	r4, [r0, #4]
 8006d56:	ea24 0402 	bic.w	r4, r4, r2
 8006d5a:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006d5c:	68c4      	ldr	r4, [r0, #12]
 8006d5e:	ea24 040c 	bic.w	r4, r4, ip
 8006d62:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006d64:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006d66:	ea24 0202 	bic.w	r2, r4, r2
 8006d6a:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006d6c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8006d6e:	fa31 f203 	lsrs.w	r2, r1, r3
 8006d72:	d054      	beq.n	8006e1e <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006d74:	2201      	movs	r2, #1
 8006d76:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8006d78:	ea12 0701 	ands.w	r7, r2, r1
 8006d7c:	d0f6      	beq.n	8006d6c <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8006d7e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8006d82:	f10e 0502 	add.w	r5, lr, #2
 8006d86:	4c27      	ldr	r4, [pc, #156]	; (8006e24 <HAL_GPIO_DeInit+0x124>)
 8006d88:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006d8c:	f003 0c03 	and.w	ip, r3, #3
 8006d90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006d94:	250f      	movs	r5, #15
 8006d96:	fa05 f60c 	lsl.w	r6, r5, ip
 8006d9a:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006d9c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006da0:	d0b7      	beq.n	8006d12 <HAL_GPIO_DeInit+0x12>
 8006da2:	4d21      	ldr	r5, [pc, #132]	; (8006e28 <HAL_GPIO_DeInit+0x128>)
 8006da4:	42a8      	cmp	r0, r5
 8006da6:	d015      	beq.n	8006dd4 <HAL_GPIO_DeInit+0xd4>
 8006da8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dac:	42a8      	cmp	r0, r5
 8006dae:	d013      	beq.n	8006dd8 <HAL_GPIO_DeInit+0xd8>
 8006db0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006db4:	42a8      	cmp	r0, r5
 8006db6:	d011      	beq.n	8006ddc <HAL_GPIO_DeInit+0xdc>
 8006db8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dbc:	42a8      	cmp	r0, r5
 8006dbe:	d00f      	beq.n	8006de0 <HAL_GPIO_DeInit+0xe0>
 8006dc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dc4:	42a8      	cmp	r0, r5
 8006dc6:	d00d      	beq.n	8006de4 <HAL_GPIO_DeInit+0xe4>
 8006dc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dcc:	42a8      	cmp	r0, r5
 8006dce:	d09e      	beq.n	8006d0e <HAL_GPIO_DeInit+0xe>
 8006dd0:	2507      	movs	r5, #7
 8006dd2:	e79f      	b.n	8006d14 <HAL_GPIO_DeInit+0x14>
 8006dd4:	2501      	movs	r5, #1
 8006dd6:	e79d      	b.n	8006d14 <HAL_GPIO_DeInit+0x14>
 8006dd8:	2502      	movs	r5, #2
 8006dda:	e79b      	b.n	8006d14 <HAL_GPIO_DeInit+0x14>
 8006ddc:	2503      	movs	r5, #3
 8006dde:	e799      	b.n	8006d14 <HAL_GPIO_DeInit+0x14>
 8006de0:	2504      	movs	r5, #4
 8006de2:	e797      	b.n	8006d14 <HAL_GPIO_DeInit+0x14>
 8006de4:	2505      	movs	r5, #5
 8006de6:	e795      	b.n	8006d14 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8006de8:	4c10      	ldr	r4, [pc, #64]	; (8006e2c <HAL_GPIO_DeInit+0x12c>)
 8006dea:	6825      	ldr	r5, [r4, #0]
 8006dec:	ea25 0507 	bic.w	r5, r5, r7
 8006df0:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006df2:	6865      	ldr	r5, [r4, #4]
 8006df4:	ea25 0507 	bic.w	r5, r5, r7
 8006df8:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006dfa:	68a5      	ldr	r5, [r4, #8]
 8006dfc:	ea25 0507 	bic.w	r5, r5, r7
 8006e00:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006e02:	68e5      	ldr	r5, [r4, #12]
 8006e04:	ea25 0507 	bic.w	r5, r5, r7
 8006e08:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006e0a:	4f06      	ldr	r7, [pc, #24]	; (8006e24 <HAL_GPIO_DeInit+0x124>)
 8006e0c:	f10e 0402 	add.w	r4, lr, #2
 8006e10:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e14:	ea25 0506 	bic.w	r5, r5, r6
 8006e18:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8006e1c:	e77e      	b.n	8006d1c <HAL_GPIO_DeInit+0x1c>
  }
}
 8006e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40010000 	.word	0x40010000
 8006e28:	48000400 	.word	0x48000400
 8006e2c:	40010400 	.word	0x40010400

08006e30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006e30:	6903      	ldr	r3, [r0, #16]
 8006e32:	4219      	tst	r1, r3
 8006e34:	d001      	beq.n	8006e3a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8006e36:	2001      	movs	r0, #1
 8006e38:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e3a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8006e3c:	4770      	bx	lr

08006e3e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e3e:	b10a      	cbz	r2, 8006e44 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e40:	6181      	str	r1, [r0, #24]
 8006e42:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e44:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006e46:	4770      	bx	lr

08006e48 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006e48:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e4a:	ea01 0203 	and.w	r2, r1, r3
 8006e4e:	ea21 0103 	bic.w	r1, r1, r3
 8006e52:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e56:	6181      	str	r1, [r0, #24]
}
 8006e58:	4770      	bx	lr
	...

08006e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e5c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	4203      	tst	r3, r0
 8006e64:	d100      	bne.n	8006e68 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8006e66:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e68:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006e6a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e6c:	f7ff f900 	bl	8006070 <HAL_GPIO_EXTI_Callback>
}
 8006e70:	e7f9      	b.n	8006e66 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006e72:	bf00      	nop
 8006e74:	40010400 	.word	0x40010400

08006e78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e7c:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8006e7e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006e82:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d854      	bhi.n	8006f38 <PCD_WriteEmptyTxFifo+0xc0>
 8006e8e:	4680      	mov	r8, r0
 8006e90:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e92:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8006e94:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8006e98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006e9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d300      	bcc.n	8006ea4 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8006ea2:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8006ea4:	f102 0903 	add.w	r9, r2, #3
 8006ea8:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eac:	e013      	b.n	8006ed6 <PCD_WriteEmptyTxFifo+0x5e>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8006eae:	f106 0903 	add.w	r9, r6, #3
 8006eb2:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006eb6:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8006eba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006ebe:	b2b3      	uxth	r3, r6
 8006ec0:	b2e2      	uxtb	r2, r4
 8006ec2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f003 f9fc 	bl	800a2c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006eca:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006ecc:	4433      	add	r3, r6
 8006ece:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8006ed0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006ed2:	4433      	add	r3, r6
 8006ed4:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ed6:	eb07 1344 	add.w	r3, r7, r4, lsl #5
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ee2:	454b      	cmp	r3, r9
 8006ee4:	d312      	bcc.n	8006f0c <PCD_WriteEmptyTxFifo+0x94>
 8006ee6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8006eea:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006eee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d20a      	bcs.n	8006f0c <PCD_WriteEmptyTxFifo+0x94>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ef6:	b14b      	cbz	r3, 8006f0c <PCD_WriteEmptyTxFifo+0x94>
    len = ep->xfer_len - ep->xfer_count;
 8006ef8:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8006efa:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8006efe:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8006f02:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8006f04:	429e      	cmp	r6, r3
 8006f06:	d3d2      	bcc.n	8006eae <PCD_WriteEmptyTxFifo+0x36>
    len = ep->xfer_len - ep->xfer_count;
 8006f08:	461e      	mov	r6, r3
 8006f0a:	e7d0      	b.n	8006eae <PCD_WriteEmptyTxFifo+0x36>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f0c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8006f10:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8006f14:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8006f18:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d80e      	bhi.n	8006f3e <PCD_WriteEmptyTxFifo+0xc6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f20:	f004 040f 	and.w	r4, r4, #15
 8006f24:	2201      	movs	r2, #1
 8006f26:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f28:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8006f2c:	ea23 0302 	bic.w	r3, r3, r2
 8006f30:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 8006f34:	2000      	movs	r0, #0
 8006f36:	e000      	b.n	8006f3a <PCD_WriteEmptyTxFifo+0xc2>
    return HAL_ERROR;
 8006f38:	2001      	movs	r0, #1
}
 8006f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e7fb      	b.n	8006f3a <PCD_WriteEmptyTxFifo+0xc2>

08006f42 <HAL_PCD_Init>:
{
 8006f42:	b570      	push	{r4, r5, r6, lr}
 8006f44:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f000 8097 	beq.w	800707a <HAL_PCD_Init+0x138>
 8006f4c:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8006f4e:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f50:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8006f54:	b33b      	cbz	r3, 8006fa6 <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f56:	2303      	movs	r3, #3
 8006f58:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006f62:	d101      	bne.n	8006f68 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8006f68:	6828      	ldr	r0, [r5, #0]
 8006f6a:	f002 ff69 	bl	8009e40 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f6e:	462c      	mov	r4, r5
 8006f70:	f854 6b10 	ldr.w	r6, [r4], #16
 8006f74:	46ec      	mov	ip, sp
 8006f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f86:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006f8a:	1d2b      	adds	r3, r5, #4
 8006f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f002 fec2 	bl	8009d18 <USB_CoreInit>
 8006f94:	4604      	mov	r4, r0
 8006f96:	b158      	cbz	r0, 8006fb0 <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8006f9e:	2401      	movs	r4, #1
}
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	b00a      	add	sp, #40	; 0x28
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8006fa6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8006faa:	f7ff f86f 	bl	800608c <HAL_PCD_MspInit>
 8006fae:	e7d2      	b.n	8006f56 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	6828      	ldr	r0, [r5, #0]
 8006fb4:	f002 ff4a 	bl	8009e4c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fb8:	4623      	mov	r3, r4
 8006fba:	e016      	b.n	8006fea <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 8006fbc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8006fc0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8006fca:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006fce:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8006fd8:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006fda:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fdc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8006fe0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006fe4:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	6869      	ldr	r1, [r5, #4]
 8006fec:	428b      	cmp	r3, r1
 8006fee:	d3e5      	bcc.n	8006fbc <HAL_PCD_Init+0x7a>
 8006ff0:	e016      	b.n	8007020 <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 8006ff2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8006ff6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8007000:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007004:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007008:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800700c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007010:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8007014:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007018:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800701c:	3401      	adds	r4, #1
 800701e:	b2e4      	uxtb	r4, r4
 8007020:	42a1      	cmp	r1, r4
 8007022:	d8e6      	bhi.n	8006ff2 <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007024:	462c      	mov	r4, r5
 8007026:	f854 6b10 	ldr.w	r6, [r4], #16
 800702a:	46ec      	mov	ip, sp
 800702c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800702e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007038:	e894 0003 	ldmia.w	r4, {r0, r1}
 800703c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007040:	1d2b      	adds	r3, r5, #4
 8007042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007044:	4630      	mov	r0, r6
 8007046:	f002 ff47 	bl	8009ed8 <USB_DevInit>
 800704a:	4604      	mov	r4, r0
 800704c:	b960      	cbnz	r0, 8007068 <HAL_PCD_Init+0x126>
  hpcd->USB_Address = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007054:	2301      	movs	r3, #1
 8007056:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800705a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800705c:	2b01      	cmp	r3, #1
 800705e:	d008      	beq.n	8007072 <HAL_PCD_Init+0x130>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007060:	6828      	ldr	r0, [r5, #0]
 8007062:	f003 faa1 	bl	800a5a8 <USB_DevDisconnect>
  return HAL_OK;
 8007066:	e79b      	b.n	8006fa0 <HAL_PCD_Init+0x5e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007068:	2302      	movs	r3, #2
 800706a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 800706e:	2401      	movs	r4, #1
 8007070:	e796      	b.n	8006fa0 <HAL_PCD_Init+0x5e>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007072:	4628      	mov	r0, r5
 8007074:	f000 fc27 	bl	80078c6 <HAL_PCDEx_ActivateLPM>
 8007078:	e7f2      	b.n	8007060 <HAL_PCD_Init+0x11e>
    return HAL_ERROR;
 800707a:	2401      	movs	r4, #1
 800707c:	e790      	b.n	8006fa0 <HAL_PCD_Init+0x5e>

0800707e <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800707e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8007080:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007084:	2b01      	cmp	r3, #1
 8007086:	d016      	beq.n	80070b6 <HAL_PCD_Start+0x38>
{
 8007088:	b510      	push	{r4, lr}
 800708a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800708c:	2301      	movs	r3, #1
 800708e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 8007092:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007094:	2b01      	cmp	r3, #1
 8007096:	d009      	beq.n	80070ac <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8007098:	6820      	ldr	r0, [r4, #0]
 800709a:	f002 fecb 	bl	8009e34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800709e:	6820      	ldr	r0, [r4, #0]
 80070a0:	f003 fa74 	bl	800a58c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80070a4:	2000      	movs	r0, #0
 80070a6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80070aa:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80070ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b2:	6393      	str	r3, [r2, #56]	; 0x38
 80070b4:	e7f0      	b.n	8007098 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 80070b6:	2002      	movs	r0, #2
}
 80070b8:	4770      	bx	lr
	...

080070bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070bc:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070be:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070c0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	689d      	ldr	r5, [r3, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80070cc:	4a0b      	ldr	r2, [pc, #44]	; (80070fc <PCD_EP_OutXfrComplete_int+0x40>)
 80070ce:	4294      	cmp	r4, r2
 80070d0:	d10f      	bne.n	80070f2 <PCD_EP_OutXfrComplete_int+0x36>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80070d2:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 80070d6:	d003      	beq.n	80070e0 <PCD_EP_OutXfrComplete_int+0x24>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80070dc:	609a      	str	r2, [r3, #8]
 80070de:	e00b      	b.n	80070f8 <PCD_EP_OutXfrComplete_int+0x3c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070e0:	f015 0f20 	tst.w	r5, #32
 80070e4:	d001      	beq.n	80070ea <PCD_EP_OutXfrComplete_int+0x2e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070e6:	2220      	movs	r2, #32
 80070e8:	609a      	str	r2, [r3, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070ea:	b2c9      	uxtb	r1, r1
 80070ec:	f7ff f980 	bl	80063f0 <HAL_PCD_DataOutStageCallback>
 80070f0:	e002      	b.n	80070f8 <PCD_EP_OutXfrComplete_int+0x3c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070f2:	b2c9      	uxtb	r1, r1
 80070f4:	f7ff f97c 	bl	80063f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
}
 80070f8:	2000      	movs	r0, #0
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	4f54310a 	.word	0x4f54310a

08007100 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007100:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007102:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007104:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007106:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800710a:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800710e:	4a07      	ldr	r2, [pc, #28]	; (800712c <PCD_EP_OutSetupPacket_int+0x2c>)
 8007110:	4294      	cmp	r4, r2
 8007112:	d907      	bls.n	8007124 <PCD_EP_OutSetupPacket_int+0x24>
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800711c:	d002      	beq.n	8007124 <PCD_EP_OutSetupPacket_int+0x24>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800711e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007122:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007124:	f7ff f95c 	bl	80063e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
}
 8007128:	2000      	movs	r0, #0
 800712a:	bd10      	pop	{r4, pc}
 800712c:	4f54300a 	.word	0x4f54300a

08007130 <HAL_PCD_IRQHandler>:
{
 8007130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007136:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007138:	4628      	mov	r0, r5
 800713a:	f003 fa72 	bl	800a622 <USB_GetMode>
 800713e:	b108      	cbz	r0, 8007144 <HAL_PCD_IRQHandler+0x14>
}
 8007140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007144:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007146:	6820      	ldr	r0, [r4, #0]
 8007148:	f003 fa3c 	bl	800a5c4 <USB_ReadInterrupts>
 800714c:	2800      	cmp	r0, #0
 800714e:	d0f7      	beq.n	8007140 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007150:	6820      	ldr	r0, [r4, #0]
 8007152:	f003 fa37 	bl	800a5c4 <USB_ReadInterrupts>
 8007156:	f010 0f02 	tst.w	r0, #2
 800715a:	d004      	beq.n	8007166 <HAL_PCD_IRQHandler+0x36>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	6953      	ldr	r3, [r2, #20]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007166:	6820      	ldr	r0, [r4, #0]
 8007168:	f003 fa2c 	bl	800a5c4 <USB_ReadInterrupts>
 800716c:	f010 0f10 	tst.w	r0, #16
 8007170:	d014      	beq.n	800719c <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	6993      	ldr	r3, [r2, #24]
 8007176:	f023 0310 	bic.w	r3, r3, #16
 800717a:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800717c:	6a2f      	ldr	r7, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800717e:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007182:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8007186:	2b02      	cmp	r3, #2
 8007188:	f000 8085 	beq.w	8007296 <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800718c:	2b06      	cmp	r3, #6
 800718e:	f000 80a1 	beq.w	80072d4 <HAL_PCD_IRQHandler+0x1a4>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	6993      	ldr	r3, [r2, #24]
 8007196:	f043 0310 	orr.w	r3, r3, #16
 800719a:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	f003 fa11 	bl	800a5c4 <USB_ReadInterrupts>
 80071a2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80071a6:	f040 80a7 	bne.w	80072f8 <HAL_PCD_IRQHandler+0x1c8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	f003 fa0a 	bl	800a5c4 <USB_ReadInterrupts>
 80071b0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80071b4:	f040 80e9 	bne.w	800738a <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80071b8:	6820      	ldr	r0, [r4, #0]
 80071ba:	f003 fa03 	bl	800a5c4 <USB_ReadInterrupts>
 80071be:	2800      	cmp	r0, #0
 80071c0:	f2c0 8139 	blt.w	8007436 <HAL_PCD_IRQHandler+0x306>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80071c4:	6820      	ldr	r0, [r4, #0]
 80071c6:	f003 f9fd 	bl	800a5c4 <USB_ReadInterrupts>
 80071ca:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80071ce:	d00a      	beq.n	80071e6 <HAL_PCD_IRQHandler+0xb6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80071d0:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80071d4:	f013 0f01 	tst.w	r3, #1
 80071d8:	f040 8147 	bne.w	800746a <HAL_PCD_IRQHandler+0x33a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	6953      	ldr	r3, [r2, #20]
 80071e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071e4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80071e6:	6820      	ldr	r0, [r4, #0]
 80071e8:	f003 f9ec 	bl	800a5c4 <USB_ReadInterrupts>
 80071ec:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80071f0:	d015      	beq.n	800721e <HAL_PCD_IRQHandler+0xee>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	6953      	ldr	r3, [r2, #20]
 80071f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071fa:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80071fc:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8136 	bne.w	8007472 <HAL_PCD_IRQHandler+0x342>
        hpcd->LPM_State = LPM_L1;
 8007206:	2101      	movs	r1, #1
 8007208:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8007214:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fb67 	bl	80078ec <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	f003 f9d0 	bl	800a5c4 <USB_ReadInterrupts>
 8007224:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8007228:	f040 8127 	bne.w	800747a <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800722c:	6820      	ldr	r0, [r4, #0]
 800722e:	f003 f9c9 	bl	800a5c4 <USB_ReadInterrupts>
 8007232:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007236:	f040 817b 	bne.w	8007530 <HAL_PCD_IRQHandler+0x400>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	f003 f9c2 	bl	800a5c4 <USB_ReadInterrupts>
 8007240:	f010 0f08 	tst.w	r0, #8
 8007244:	f040 818c 	bne.w	8007560 <HAL_PCD_IRQHandler+0x430>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	f003 f9bb 	bl	800a5c4 <USB_ReadInterrupts>
 800724e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8007252:	f040 818e 	bne.w	8007572 <HAL_PCD_IRQHandler+0x442>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007256:	6820      	ldr	r0, [r4, #0]
 8007258:	f003 f9b4 	bl	800a5c4 <USB_ReadInterrupts>
 800725c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007260:	f040 8191 	bne.w	8007586 <HAL_PCD_IRQHandler+0x456>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	f003 f9ad 	bl	800a5c4 <USB_ReadInterrupts>
 800726a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800726e:	f040 8194 	bne.w	800759a <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007272:	6820      	ldr	r0, [r4, #0]
 8007274:	f003 f9a6 	bl	800a5c4 <USB_ReadInterrupts>
 8007278:	f010 0f04 	tst.w	r0, #4
 800727c:	f43f af60 	beq.w	8007140 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007284:	f015 0f04 	tst.w	r5, #4
 8007288:	f040 8190 	bne.w	80075ac <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->GOTGINT |= temp;
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	6853      	ldr	r3, [r2, #4]
 8007290:	432b      	orrs	r3, r5
 8007292:	6053      	str	r3, [r2, #4]
 8007294:	e754      	b.n	8007140 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007296:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800729a:	421f      	tst	r7, r3
 800729c:	f43f af79 	beq.w	8007192 <HAL_PCD_IRQHandler+0x62>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80072a0:	ea4f 1b17 	mov.w	fp, r7, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072a4:	ebc8 09c8 	rsb	r9, r8, r8, lsl #3
 80072a8:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 80072ac:	f3c7 120a 	ubfx	r2, r7, #4, #11
 80072b0:	f8d9 1208 	ldr.w	r1, [r9, #520]	; 0x208
 80072b4:	4628      	mov	r0, r5
 80072b6:	f003 f8ef 	bl	800a498 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072ba:	f3cb 020a 	ubfx	r2, fp, #0, #11
 80072be:	f8d9 3208 	ldr.w	r3, [r9, #520]	; 0x208
 80072c2:	4413      	add	r3, r2
 80072c4:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072c8:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
 80072cc:	4413      	add	r3, r2
 80072ce:	f8c9 3214 	str.w	r3, [r9, #532]	; 0x214
 80072d2:	e75e      	b.n	8007192 <HAL_PCD_IRQHandler+0x62>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80072d4:	2208      	movs	r2, #8
 80072d6:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80072da:	4628      	mov	r0, r5
 80072dc:	f003 f8dc 	bl	800a498 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072e0:	f3c7 170a 	ubfx	r7, r7, #4, #11
 80072e4:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 80072e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80072ec:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80072f0:	443b      	add	r3, r7
 80072f2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80072f6:	e74c      	b.n	8007192 <HAL_PCD_IRQHandler+0x62>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	f003 f967 	bl	800a5cc <USB_ReadDevAllOutEpInterrupt>
 80072fe:	4607      	mov	r7, r0
      epnum = 0U;
 8007300:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 8007302:	e016      	b.n	8007332 <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007304:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007308:	2201      	movs	r2, #1
 800730a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800730e:	4641      	mov	r1, r8
 8007310:	4620      	mov	r0, r4
 8007312:	f7ff fed3 	bl	80070bc <PCD_EP_OutXfrComplete_int>
 8007316:	e01b      	b.n	8007350 <HAL_PCD_IRQHandler+0x220>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007318:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 800731c:	2208      	movs	r2, #8
 800731e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007322:	4641      	mov	r1, r8
 8007324:	4620      	mov	r0, r4
 8007326:	f7ff feeb 	bl	8007100 <PCD_EP_OutSetupPacket_int>
 800732a:	e014      	b.n	8007356 <HAL_PCD_IRQHandler+0x226>
        epnum++;
 800732c:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8007330:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 8007332:	2f00      	cmp	r7, #0
 8007334:	f43f af39 	beq.w	80071aa <HAL_PCD_IRQHandler+0x7a>
        if ((ep_intr & 0x1U) != 0U)
 8007338:	f017 0f01 	tst.w	r7, #1
 800733c:	d0f6      	beq.n	800732c <HAL_PCD_IRQHandler+0x1fc>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800733e:	fa5f f188 	uxtb.w	r1, r8
 8007342:	6820      	ldr	r0, [r4, #0]
 8007344:	f003 f952 	bl	800a5ec <USB_ReadDevOutEPInterrupt>
 8007348:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800734a:	f010 0f01 	tst.w	r0, #1
 800734e:	d1d9      	bne.n	8007304 <HAL_PCD_IRQHandler+0x1d4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007350:	f019 0f08 	tst.w	r9, #8
 8007354:	d1e0      	bne.n	8007318 <HAL_PCD_IRQHandler+0x1e8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007356:	f019 0f10 	tst.w	r9, #16
 800735a:	d004      	beq.n	8007366 <HAL_PCD_IRQHandler+0x236>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800735c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007360:	2210      	movs	r2, #16
 8007362:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007366:	f019 0f20 	tst.w	r9, #32
 800736a:	d004      	beq.n	8007376 <HAL_PCD_IRQHandler+0x246>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800736c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007376:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800737a:	d0d7      	beq.n	800732c <HAL_PCD_IRQHandler+0x1fc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800737c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007384:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8007388:	e7d0      	b.n	800732c <HAL_PCD_IRQHandler+0x1fc>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800738a:	6820      	ldr	r0, [r4, #0]
 800738c:	f003 f926 	bl	800a5dc <USB_ReadDevAllInEpInterrupt>
 8007390:	4607      	mov	r7, r0
      epnum = 0U;
 8007392:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 8007394:	e019      	b.n	80073ca <HAL_PCD_IRQHandler+0x29a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007396:	f008 020f 	and.w	r2, r8, #15
 800739a:	2101      	movs	r1, #1
 800739c:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073a0:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
 80073a4:	ea23 0302 	bic.w	r3, r3, r2
 80073a8:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073ac:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80073b0:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80073b4:	4651      	mov	r1, sl
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7ff f826 	bl	8006408 <HAL_PCD_DataInStageCallback>
 80073bc:	e015      	b.n	80073ea <HAL_PCD_IRQHandler+0x2ba>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80073be:	f019 0f80 	tst.w	r9, #128	; 0x80
 80073c2:	d133      	bne.n	800742c <HAL_PCD_IRQHandler+0x2fc>
        epnum++;
 80073c4:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80073c8:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 80073ca:	2f00      	cmp	r7, #0
 80073cc:	f43f aef4 	beq.w	80071b8 <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80073d0:	f017 0f01 	tst.w	r7, #1
 80073d4:	d0f6      	beq.n	80073c4 <HAL_PCD_IRQHandler+0x294>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073d6:	fa5f fa88 	uxtb.w	sl, r8
 80073da:	4651      	mov	r1, sl
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	f003 f90e 	bl	800a5fe <USB_ReadDevInEPInterrupt>
 80073e2:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073e4:	f010 0f01 	tst.w	r0, #1
 80073e8:	d1d5      	bne.n	8007396 <HAL_PCD_IRQHandler+0x266>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80073ea:	f019 0f08 	tst.w	r9, #8
 80073ee:	d004      	beq.n	80073fa <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80073f0:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80073f4:	2208      	movs	r2, #8
 80073f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80073fa:	f019 0f10 	tst.w	r9, #16
 80073fe:	d004      	beq.n	800740a <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007400:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007404:	2210      	movs	r2, #16
 8007406:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800740a:	f019 0f40 	tst.w	r9, #64	; 0x40
 800740e:	d004      	beq.n	800741a <HAL_PCD_IRQHandler+0x2ea>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007410:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007414:	2240      	movs	r2, #64	; 0x40
 8007416:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800741a:	f019 0f02 	tst.w	r9, #2
 800741e:	d0ce      	beq.n	80073be <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007420:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007424:	2202      	movs	r2, #2
 8007426:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800742a:	e7c8      	b.n	80073be <HAL_PCD_IRQHandler+0x28e>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800742c:	4641      	mov	r1, r8
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff fd22 	bl	8006e78 <PCD_WriteEmptyTxFifo>
 8007434:	e7c6      	b.n	80073c4 <HAL_PCD_IRQHandler+0x294>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007436:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8007442:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007446:	2b01      	cmp	r3, #1
 8007448:	d008      	beq.n	800745c <HAL_PCD_IRQHandler+0x32c>
        HAL_PCD_ResumeCallback(hpcd);
 800744a:	4620      	mov	r0, r4
 800744c:	f7fe ffff 	bl	800644e <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	6953      	ldr	r3, [r2, #20]
 8007454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007458:	6153      	str	r3, [r2, #20]
 800745a:	e6b3      	b.n	80071c4 <HAL_PCD_IRQHandler+0x94>
        hpcd->LPM_State = LPM_L0;
 800745c:	2100      	movs	r1, #0
 800745e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fa42 	bl	80078ec <HAL_PCDEx_LPM_Callback>
 8007468:	e7f2      	b.n	8007450 <HAL_PCD_IRQHandler+0x320>
        HAL_PCD_SuspendCallback(hpcd);
 800746a:	4620      	mov	r0, r4
 800746c:	f7fe ffe9 	bl	8006442 <HAL_PCD_SuspendCallback>
 8007470:	e6b4      	b.n	80071dc <HAL_PCD_IRQHandler+0xac>
        HAL_PCD_SuspendCallback(hpcd);
 8007472:	4620      	mov	r0, r4
 8007474:	f7fe ffe5 	bl	8006442 <HAL_PCD_SuspendCallback>
 8007478:	e6d1      	b.n	800721e <HAL_PCD_IRQHandler+0xee>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800747a:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007486:	2110      	movs	r1, #16
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	f002 fcf7 	bl	8009e7c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800748e:	e020      	b.n	80074d2 <HAL_PCD_IRQHandler+0x3a2>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007490:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8007494:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8007498:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800749c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80074a0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80074a4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074a8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80074ac:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80074b0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80074b4:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074b8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80074bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80074c0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074c4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80074c8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80074cc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074d0:	3601      	adds	r6, #1
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	42b3      	cmp	r3, r6
 80074d6:	d8db      	bhi.n	8007490 <HAL_PCD_IRQHandler+0x360>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80074de:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80074e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074e2:	b1d3      	cbz	r3, 800751a <HAL_PCD_IRQHandler+0x3ea>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80074e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074e8:	f043 030b 	orr.w	r3, r3, #11
 80074ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80074f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f2:	f043 030b 	orr.w	r3, r3, #11
 80074f6:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80074f8:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80074fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007500:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007504:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007508:	6820      	ldr	r0, [r4, #0]
 800750a:	f003 f89f 	bl	800a64c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	6953      	ldr	r3, [r2, #20]
 8007512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007516:	6153      	str	r3, [r2, #20]
 8007518:	e688      	b.n	800722c <HAL_PCD_IRQHandler+0xfc>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007520:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007524:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f043 030b 	orr.w	r3, r3, #11
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	e7e3      	b.n	80074f8 <HAL_PCD_IRQHandler+0x3c8>
      (void)USB_ActivateSetup(hpcd->Instance);
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	f003 f87a 	bl	800a62a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	f002 fd80 	bl	800a03c <USB_GetDevSpeed>
 800753c:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800753e:	6825      	ldr	r5, [r4, #0]
 8007540:	f000 fe5c 	bl	80081fc <HAL_RCC_GetHCLKFreq>
 8007544:	4601      	mov	r1, r0
 8007546:	7b22      	ldrb	r2, [r4, #12]
 8007548:	4628      	mov	r0, r5
 800754a:	f002 fc01 	bl	8009d50 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800754e:	4620      	mov	r0, r4
 8007550:	f7fe ff6b 	bl	800642a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	6953      	ldr	r3, [r2, #20]
 8007558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800755c:	6153      	str	r3, [r2, #20]
 800755e:	e66c      	b.n	800723a <HAL_PCD_IRQHandler+0x10a>
      HAL_PCD_SOFCallback(hpcd);
 8007560:	4620      	mov	r0, r4
 8007562:	f7fe ff5c 	bl	800641e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	6953      	ldr	r3, [r2, #20]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	6153      	str	r3, [r2, #20]
 8007570:	e66a      	b.n	8007248 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007572:	2100      	movs	r1, #0
 8007574:	4620      	mov	r0, r4
 8007576:	f7fe ff76 	bl	8006466 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	6953      	ldr	r3, [r2, #20]
 800757e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007582:	6153      	str	r3, [r2, #20]
 8007584:	e667      	b.n	8007256 <HAL_PCD_IRQHandler+0x126>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007586:	2100      	movs	r1, #0
 8007588:	4620      	mov	r0, r4
 800758a:	f7fe ff66 	bl	800645a <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	6953      	ldr	r3, [r2, #20]
 8007592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007596:	6153      	str	r3, [r2, #20]
 8007598:	e664      	b.n	8007264 <HAL_PCD_IRQHandler+0x134>
      HAL_PCD_ConnectCallback(hpcd);
 800759a:	4620      	mov	r0, r4
 800759c:	f7fe ff69 	bl	8006472 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	6953      	ldr	r3, [r2, #20]
 80075a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075a8:	6153      	str	r3, [r2, #20]
 80075aa:	e662      	b.n	8007272 <HAL_PCD_IRQHandler+0x142>
        HAL_PCD_DisconnectCallback(hpcd);
 80075ac:	4620      	mov	r0, r4
 80075ae:	f7fe ff66 	bl	800647e <HAL_PCD_DisconnectCallback>
 80075b2:	e66b      	b.n	800728c <HAL_PCD_IRQHandler+0x15c>

080075b4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80075b4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d00d      	beq.n	80075d8 <HAL_PCD_SetAddress+0x24>
{
 80075bc:	b510      	push	{r4, lr}
 80075be:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80075c0:	2301      	movs	r3, #1
 80075c2:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80075c6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	f002 ffce 	bl	800a56c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80075d0:	2000      	movs	r0, #0
 80075d2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80075d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80075d8:	2002      	movs	r0, #2
}
 80075da:	4770      	bx	lr

080075dc <HAL_PCD_EP_Open>:
{
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4605      	mov	r5, r0
 80075e0:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80075e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80075e6:	d129      	bne.n	800763c <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075e8:	f001 0e0f 	and.w	lr, r1, #15
 80075ec:	ebce 04ce 	rsb	r4, lr, lr, lsl #3
 80075f0:	00a4      	lsls	r4, r4, #2
 80075f2:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80075f6:	4404      	add	r4, r0
 80075f8:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80075fa:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 80075fe:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007602:	2000      	movs	r0, #0
 8007604:	f88e 01fd 	strb.w	r0, [lr, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007608:	f00c 0c0f 	and.w	ip, ip, #15
 800760c:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8007610:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8007612:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007614:	784a      	ldrb	r2, [r1, #1]
 8007616:	b10a      	cbz	r2, 800761c <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8007618:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800761c:	2b02      	cmp	r3, #2
 800761e:	d01d      	beq.n	800765c <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 8007620:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8007624:	2b01      	cmp	r3, #1
 8007626:	d01c      	beq.n	8007662 <HAL_PCD_EP_Open+0x86>
 8007628:	2301      	movs	r3, #1
 800762a:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800762e:	6828      	ldr	r0, [r5, #0]
 8007630:	f002 fd12 	bl	800a058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007634:	2000      	movs	r0, #0
 8007636:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 800763a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800763c:	f001 000f 	and.w	r0, r1, #15
 8007640:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8007644:	0089      	lsls	r1, r1, #2
 8007646:	3138      	adds	r1, #56	; 0x38
 8007648:	4429      	add	r1, r5
 800764a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800764c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007650:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8007654:	2401      	movs	r4, #1
 8007656:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800765a:	e7d5      	b.n	8007608 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	710b      	strb	r3, [r1, #4]
 8007660:	e7de      	b.n	8007620 <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8007662:	2002      	movs	r0, #2
 8007664:	e7e9      	b.n	800763a <HAL_PCD_EP_Open+0x5e>

08007666 <HAL_PCD_EP_Close>:
{
 8007666:	b510      	push	{r4, lr}
 8007668:	4604      	mov	r4, r0
 800766a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800766c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007670:	d120      	bne.n	80076b4 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007672:	f001 000f 	and.w	r0, r1, #15
 8007676:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007680:	4423      	add	r3, r4
 8007682:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8007684:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007688:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800768c:	2300      	movs	r3, #0
 800768e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007692:	f002 020f 	and.w	r2, r2, #15
 8007696:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007698:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800769c:	2b01      	cmp	r3, #1
 800769e:	d019      	beq.n	80076d4 <HAL_PCD_EP_Close+0x6e>
 80076a0:	2301      	movs	r3, #1
 80076a2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	f002 fd24 	bl	800a0f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076ac:	2000      	movs	r0, #0
 80076ae:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80076b2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076b4:	f001 000f 	and.w	r0, r1, #15
 80076b8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	3338      	adds	r3, #56	; 0x38
 80076c0:	4423      	add	r3, r4
 80076c2:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80076c4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80076c8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80076cc:	2301      	movs	r3, #1
 80076ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80076d2:	e7de      	b.n	8007692 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80076d4:	2002      	movs	r0, #2
 80076d6:	e7ec      	b.n	80076b2 <HAL_PCD_EP_Close+0x4c>

080076d8 <HAL_PCD_EP_Receive>:
{
 80076d8:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076da:	f001 040f 	and.w	r4, r1, #15
 80076de:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80076e2:	0089      	lsls	r1, r1, #2
 80076e4:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80076e8:	4401      	add	r1, r0
 80076ea:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80076ec:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 80076f0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80076f4:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 80076f8:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8007702:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007706:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800770a:	b924      	cbnz	r4, 8007716 <HAL_PCD_EP_Receive+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800770c:	6800      	ldr	r0, [r0, #0]
 800770e:	f002 fd61 	bl	800a1d4 <USB_EP0StartXfer>
}
 8007712:	2000      	movs	r0, #0
 8007714:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	f002 fde8 	bl	800a2ec <USB_EPStartXfer>
 800771c:	e7f9      	b.n	8007712 <HAL_PCD_EP_Receive+0x3a>

0800771e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800771e:	f001 010f 	and.w	r1, r1, #15
 8007722:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007726:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800772a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800772e:	4770      	bx	lr

08007730 <HAL_PCD_EP_Transmit>:
{
 8007730:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007732:	f001 040f 	and.w	r4, r1, #15
 8007736:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800773a:	0089      	lsls	r1, r1, #2
 800773c:	3138      	adds	r1, #56	; 0x38
 800773e:	4401      	add	r1, r0
 8007740:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007742:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8007746:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800774a:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 800774e:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8007758:	2301      	movs	r3, #1
 800775a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800775e:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007762:	b924      	cbnz	r4, 800776e <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007764:	6800      	ldr	r0, [r0, #0]
 8007766:	f002 fd35 	bl	800a1d4 <USB_EP0StartXfer>
}
 800776a:	2000      	movs	r0, #0
 800776c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800776e:	6800      	ldr	r0, [r0, #0]
 8007770:	f002 fdbc 	bl	800a2ec <USB_EPStartXfer>
 8007774:	e7f9      	b.n	800776a <HAL_PCD_EP_Transmit+0x3a>

08007776 <HAL_PCD_EP_SetStall>:
{
 8007776:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007778:	f001 050f 	and.w	r5, r1, #15
 800777c:	6842      	ldr	r2, [r0, #4]
 800777e:	4295      	cmp	r5, r2
 8007780:	d838      	bhi.n	80077f4 <HAL_PCD_EP_SetStall+0x7e>
 8007782:	4604      	mov	r4, r0
 8007784:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8007786:	f011 0f80 	tst.w	r1, #128	; 0x80
 800778a:	d11f      	bne.n	80077cc <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800778c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007790:	0089      	lsls	r1, r1, #2
 8007792:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007796:	4401      	add	r1, r0
 8007798:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800779a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800779e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80077a8:	2301      	movs	r3, #1
 80077aa:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077ac:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80077ae:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d020      	beq.n	80077f8 <HAL_PCD_EP_SetStall+0x82>
 80077b6:	2301      	movs	r3, #1
 80077b8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	f002 fe7a 	bl	800a4b6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077c2:	b18d      	cbz	r5, 80077e8 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 80077c4:	2000      	movs	r0, #0
 80077c6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077cc:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 80077d0:	0089      	lsls	r1, r1, #2
 80077d2:	3138      	adds	r1, #56	; 0x38
 80077d4:	4401      	add	r1, r0
 80077d6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80077d8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80077dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077e6:	e7df      	b.n	80077a8 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80077e8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	f002 ff2d 	bl	800a64c <USB_EP0_OutStart>
 80077f2:	e7e7      	b.n	80077c4 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80077f4:	2001      	movs	r0, #1
 80077f6:	e7e8      	b.n	80077ca <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80077f8:	2002      	movs	r0, #2
 80077fa:	e7e6      	b.n	80077ca <HAL_PCD_EP_SetStall+0x54>

080077fc <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077fc:	f001 030f 	and.w	r3, r1, #15
 8007800:	6842      	ldr	r2, [r0, #4]
 8007802:	4293      	cmp	r3, r2
 8007804:	d831      	bhi.n	800786a <HAL_PCD_EP_ClrStall+0x6e>
{
 8007806:	b510      	push	{r4, lr}
 8007808:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800780a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800780e:	d11e      	bne.n	800784e <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007810:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007814:	0089      	lsls	r1, r1, #2
 8007816:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800781a:	4401      	add	r1, r0
 800781c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800781e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007822:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007826:	2000      	movs	r0, #0
 8007828:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800782c:	2200      	movs	r2, #0
 800782e:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007830:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007832:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007836:	2b01      	cmp	r3, #1
 8007838:	d019      	beq.n	800786e <HAL_PCD_EP_ClrStall+0x72>
 800783a:	2301      	movs	r3, #1
 800783c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	f002 fe65 	bl	800a510 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007846:	2000      	movs	r0, #0
 8007848:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800784c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800784e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007852:	0089      	lsls	r1, r1, #2
 8007854:	3138      	adds	r1, #56	; 0x38
 8007856:	4401      	add	r1, r0
 8007858:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800785a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800785e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007862:	2001      	movs	r0, #1
 8007864:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8007868:	e7e0      	b.n	800782c <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800786a:	2001      	movs	r0, #1
}
 800786c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800786e:	2002      	movs	r0, #2
 8007870:	e7ec      	b.n	800784c <HAL_PCD_EP_ClrStall+0x50>

08007872 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007872:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007874:	6804      	ldr	r4, [r0, #0]
 8007876:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8007878:	b931      	cbnz	r1, 8007888 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800787a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800787e:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007880:	2000      	movs	r0, #0
 8007882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800788a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800788c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007890:	2300      	movs	r3, #0
 8007892:	e008      	b.n	80078a6 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007894:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007898:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800789c:	6849      	ldr	r1, [r1, #4]
 800789e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80078a2:	3301      	adds	r3, #1
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80078aa:	428b      	cmp	r3, r1
 80078ac:	d3f2      	bcc.n	8007894 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80078ae:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80078b2:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 80078b6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80078ba:	6060      	str	r0, [r4, #4]
 80078bc:	e7e0      	b.n	8007880 <HAL_PCDEx_SetTxFiFo+0xe>

080078be <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80078be:	6803      	ldr	r3, [r0, #0]
 80078c0:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80078c2:	2000      	movs	r0, #0
 80078c4:	4770      	bx	lr

080078c6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80078c6:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078c8:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 80078ca:	2101      	movs	r1, #1
 80078cc:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80078d0:	2000      	movs	r0, #0
 80078d2:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80078d6:	6993      	ldr	r3, [r2, #24]
 80078d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078dc:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80078de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80078e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e4:	f043 0303 	orr.w	r3, r3, #3
 80078e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80078ea:	4770      	bx	lr

080078ec <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80078ec:	4770      	bx	lr
	...

080078f0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078f0:	4a02      	ldr	r2, [pc, #8]	; (80078fc <HAL_PWR_EnableBkUpAccess+0xc>)
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f8:	6013      	str	r3, [r2, #0]
}
 80078fa:	4770      	bx	lr
 80078fc:	40007000 	.word	0x40007000

08007900 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <HAL_PWREx_GetVoltageRange+0xc>)
 8007902:	6818      	ldr	r0, [r3, #0]
#endif
}
 8007904:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40007000 	.word	0x40007000

08007910 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007910:	4a02      	ldr	r2, [pc, #8]	; (800791c <HAL_PWREx_EnableVddUSB+0xc>)
 8007912:	6853      	ldr	r3, [r2, #4]
 8007914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007918:	6053      	str	r3, [r2, #4]
}
 800791a:	4770      	bx	lr
 800791c:	40007000 	.word	0x40007000

08007920 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007920:	4a02      	ldr	r2, [pc, #8]	; (800792c <HAL_PWREx_EnableVddIO2+0xc>)
 8007922:	6853      	ldr	r3, [r2, #4]
 8007924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007928:	6053      	str	r3, [r2, #4]
}
 800792a:	4770      	bx	lr
 800792c:	40007000 	.word	0x40007000

08007930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007930:	b530      	push	{r4, r5, lr}
 8007932:	b083      	sub	sp, #12
 8007934:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007936:	4b20      	ldr	r3, [pc, #128]	; (80079b8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8007938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800793e:	d00b      	beq.n	8007958 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007940:	f7ff ffde 	bl	8007900 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007944:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007948:	d017      	beq.n	800797a <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800794a:	2c80      	cmp	r4, #128	; 0x80
 800794c:	d81f      	bhi.n	800798e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800794e:	d02d      	beq.n	80079ac <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007950:	2c70      	cmp	r4, #112	; 0x70
 8007952:	d02d      	beq.n	80079b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007954:	2100      	movs	r1, #0
 8007956:	e01b      	b.n	8007990 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8007958:	4d17      	ldr	r5, [pc, #92]	; (80079b8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800795a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800795c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007960:	65ab      	str	r3, [r5, #88]	; 0x58
 8007962:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800796c:	f7ff ffc8 	bl	8007900 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8007970:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007976:	65ab      	str	r3, [r5, #88]	; 0x58
 8007978:	e7e4      	b.n	8007944 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800797a:	2c80      	cmp	r4, #128	; 0x80
 800797c:	d903      	bls.n	8007986 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800797e:	2ca0      	cmp	r4, #160	; 0xa0
 8007980:	d903      	bls.n	800798a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8007982:	2102      	movs	r1, #2
 8007984:	e004      	b.n	8007990 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007986:	2100      	movs	r1, #0
 8007988:	e002      	b.n	8007990 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800798a:	2101      	movs	r1, #1
 800798c:	e000      	b.n	8007990 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800798e:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	f023 0307 	bic.w	r3, r3, #7
 8007998:	430b      	orrs	r3, r1
 800799a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800799c:	6813      	ldr	r3, [r2, #0]
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	428b      	cmp	r3, r1
 80079a4:	d106      	bne.n	80079b4 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80079a6:	2000      	movs	r0, #0
}
 80079a8:	b003      	add	sp, #12
 80079aa:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80079ac:	2102      	movs	r1, #2
 80079ae:	e7ef      	b.n	8007990 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80079b0:	2101      	movs	r1, #1
 80079b2:	e7ed      	b.n	8007990 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80079b4:	2001      	movs	r0, #1
 80079b6:	e7f7      	b.n	80079a8 <RCC_SetFlashLatencyFromMSIRange+0x78>
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40022000 	.word	0x40022000

080079c0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079c0:	4a28      	ldr	r2, [pc, #160]	; (8007a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 80079c2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079c4:	68d2      	ldr	r2, [r2, #12]
 80079c6:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80079ca:	f013 030c 	ands.w	r3, r3, #12
 80079ce:	d00a      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x26>
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d006      	beq.n	80079e2 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d01f      	beq.n	8007a18 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d020      	beq.n	8007a1e <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80079dc:	2000      	movs	r0, #0
 80079de:	4602      	mov	r2, r0
 80079e0:	e010      	b.n	8007a04 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80079e2:	2a01      	cmp	r2, #1
 80079e4:	d1f6      	bne.n	80079d4 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80079e6:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	f012 0f08 	tst.w	r2, #8
 80079ee:	d10c      	bne.n	8007a0a <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80079f0:	4a1c      	ldr	r2, [pc, #112]	; (8007a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 80079f2:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80079f6:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80079fa:	491b      	ldr	r1, [pc, #108]	; (8007a68 <HAL_RCC_GetSysClockFreq+0xa8>)
 80079fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a00:	b143      	cbz	r3, 8007a14 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a02:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007a04:	2b0c      	cmp	r3, #12
 8007a06:	d00d      	beq.n	8007a24 <HAL_RCC_GetSysClockFreq+0x64>
}
 8007a08:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007a0a:	4a16      	ldr	r2, [pc, #88]	; (8007a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007a12:	e7f2      	b.n	80079fa <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8007a14:	4610      	mov	r0, r2
 8007a16:	e7f5      	b.n	8007a04 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8007a18:	4814      	ldr	r0, [pc, #80]	; (8007a6c <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	e7f2      	b.n	8007a04 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8007a1e:	4814      	ldr	r0, [pc, #80]	; (8007a70 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a20:	2200      	movs	r2, #0
 8007a22:	e7ef      	b.n	8007a04 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a24:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d016      	beq.n	8007a5e <HAL_RCC_GetSysClockFreq+0x9e>
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d100      	bne.n	8007a36 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8007a34:	4a0e      	ldr	r2, [pc, #56]	; (8007a70 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a36:	490b      	ldr	r1, [pc, #44]	; (8007a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a38:	68cb      	ldr	r3, [r1, #12]
 8007a3a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007a3e:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007a40:	68c8      	ldr	r0, [r1, #12]
 8007a42:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007a46:	fb02 f000 	mul.w	r0, r2, r0
 8007a4a:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a4e:	68cb      	ldr	r3, [r1, #12]
 8007a50:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007a54:	3301      	adds	r3, #1
 8007a56:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8007a58:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007a5c:	e7d4      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8007a5e:	4a03      	ldr	r2, [pc, #12]	; (8007a6c <HAL_RCC_GetSysClockFreq+0xac>)
 8007a60:	e7e9      	b.n	8007a36 <HAL_RCC_GetSysClockFreq+0x76>
 8007a62:	bf00      	nop
 8007a64:	40021000 	.word	0x40021000
 8007a68:	0800cdd0 	.word	0x0800cdd0
 8007a6c:	00f42400 	.word	0x00f42400
 8007a70:	007a1200 	.word	0x007a1200

08007a74 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f000 82fc 	beq.w	8008072 <HAL_RCC_OscConfig+0x5fe>
{
 8007a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a80:	4b96      	ldr	r3, [pc, #600]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007a82:	689d      	ldr	r5, [r3, #8]
 8007a84:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a88:	68de      	ldr	r6, [r3, #12]
 8007a8a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007a8e:	6803      	ldr	r3, [r0, #0]
 8007a90:	f013 0f10 	tst.w	r3, #16
 8007a94:	d05a      	beq.n	8007b4c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a96:	b1e5      	cbz	r5, 8007ad2 <HAL_RCC_OscConfig+0x5e>
 8007a98:	2d0c      	cmp	r5, #12
 8007a9a:	d018      	beq.n	8007ace <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007a9c:	69a3      	ldr	r3, [r4, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80bb 	beq.w	8007c1a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8007aa4:	4a8d      	ldr	r2, [pc, #564]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007aa6:	6813      	ldr	r3, [r2, #0]
 8007aa8:	f043 0301 	orr.w	r3, r3, #1
 8007aac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007aae:	f7fe ffc9 	bl	8006a44 <HAL_GetTick>
 8007ab2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ab4:	4b89      	ldr	r3, [pc, #548]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f013 0f02 	tst.w	r3, #2
 8007abc:	f040 809a 	bne.w	8007bf4 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ac0:	f7fe ffc0 	bl	8006a44 <HAL_GetTick>
 8007ac4:	1bc0      	subs	r0, r0, r7
 8007ac6:	2802      	cmp	r0, #2
 8007ac8:	d9f4      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8007aca:	2003      	movs	r0, #3
 8007acc:	e2dc      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007ace:	2e01      	cmp	r6, #1
 8007ad0:	d1e4      	bne.n	8007a9c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007ad2:	4b82      	ldr	r3, [pc, #520]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f013 0f02 	tst.w	r3, #2
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x70>
 8007adc:	69a3      	ldr	r3, [r4, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 82c9 	beq.w	8008076 <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ae4:	6a20      	ldr	r0, [r4, #32]
 8007ae6:	4b7d      	ldr	r3, [pc, #500]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f013 0f08 	tst.w	r3, #8
 8007aee:	d05b      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x134>
 8007af0:	4b7a      	ldr	r3, [pc, #488]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007af8:	4298      	cmp	r0, r3
 8007afa:	d85c      	bhi.n	8007bb6 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007afc:	4b77      	ldr	r3, [pc, #476]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	f042 0208 	orr.w	r2, r2, #8
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007b0c:	6a21      	ldr	r1, [r4, #32]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007b18:	69e1      	ldr	r1, [r4, #28]
 8007b1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007b1e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	d060      	beq.n	8007be6 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b24:	f7ff ff4c 	bl	80079c0 <HAL_RCC_GetSysClockFreq>
 8007b28:	4b6c      	ldr	r3, [pc, #432]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007b30:	4a6b      	ldr	r2, [pc, #428]	; (8007ce0 <HAL_RCC_OscConfig+0x26c>)
 8007b32:	5cd3      	ldrb	r3, [r2, r3]
 8007b34:	f003 031f 	and.w	r3, r3, #31
 8007b38:	40d8      	lsrs	r0, r3
 8007b3a:	4b6a      	ldr	r3, [pc, #424]	; (8007ce4 <HAL_RCC_OscConfig+0x270>)
 8007b3c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8007b3e:	4b6a      	ldr	r3, [pc, #424]	; (8007ce8 <HAL_RCC_OscConfig+0x274>)
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f7fe ff3d 	bl	80069c0 <HAL_InitTick>
        if(status != HAL_OK)
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f040 829e 	bne.w	8008088 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	f013 0f01 	tst.w	r3, #1
 8007b52:	f000 8081 	beq.w	8007c58 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007b56:	2d08      	cmp	r5, #8
 8007b58:	d075      	beq.n	8007c46 <HAL_RCC_OscConfig+0x1d2>
 8007b5a:	2d0c      	cmp	r5, #12
 8007b5c:	d071      	beq.n	8007c42 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b5e:	6863      	ldr	r3, [r4, #4]
 8007b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b64:	f000 8097 	beq.w	8007c96 <HAL_RCC_OscConfig+0x222>
 8007b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b6c:	f000 8099 	beq.w	8007ca2 <HAL_RCC_OscConfig+0x22e>
 8007b70:	4b5a      	ldr	r3, [pc, #360]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b80:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b82:	6863      	ldr	r3, [r4, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8099 	beq.w	8007cbc <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8007b8a:	f7fe ff5b 	bl	8006a44 <HAL_GetTick>
 8007b8e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b90:	4b52      	ldr	r3, [pc, #328]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007b98:	d15e      	bne.n	8007c58 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b9a:	f7fe ff53 	bl	8006a44 <HAL_GetTick>
 8007b9e:	1bc0      	subs	r0, r0, r7
 8007ba0:	2864      	cmp	r0, #100	; 0x64
 8007ba2:	d9f5      	bls.n	8007b90 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8007ba4:	2003      	movs	r0, #3
 8007ba6:	e26f      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ba8:	4b4c      	ldr	r3, [pc, #304]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bae:	091b      	lsrs	r3, r3, #4
 8007bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bb4:	e7a0      	b.n	8007af8 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bb6:	f7ff febb 	bl	8007930 <RCC_SetFlashLatencyFromMSIRange>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f040 825d 	bne.w	800807a <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bc0:	4b46      	ldr	r3, [pc, #280]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	f042 0208 	orr.w	r2, r2, #8
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007bd0:	6a21      	ldr	r1, [r4, #32]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007bdc:	69e1      	ldr	r1, [r4, #28]
 8007bde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007be2:	605a      	str	r2, [r3, #4]
 8007be4:	e79e      	b.n	8007b24 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007be6:	6a20      	ldr	r0, [r4, #32]
 8007be8:	f7ff fea2 	bl	8007930 <RCC_SetFlashLatencyFromMSIRange>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d099      	beq.n	8007b24 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	e249      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bf4:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	f042 0208 	orr.w	r2, r2, #8
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007c04:	6a21      	ldr	r1, [r4, #32]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007c10:	69e1      	ldr	r1, [r4, #28]
 8007c12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007c16:	605a      	str	r2, [r3, #4]
 8007c18:	e798      	b.n	8007b4c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8007c1a:	4a30      	ldr	r2, [pc, #192]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007c1c:	6813      	ldr	r3, [r2, #0]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007c24:	f7fe ff0e 	bl	8006a44 <HAL_GetTick>
 8007c28:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007c2a:	4b2c      	ldr	r3, [pc, #176]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f013 0f02 	tst.w	r3, #2
 8007c32:	d08b      	beq.n	8007b4c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c34:	f7fe ff06 	bl	8006a44 <HAL_GetTick>
 8007c38:	1bc0      	subs	r0, r0, r7
 8007c3a:	2802      	cmp	r0, #2
 8007c3c:	d9f5      	bls.n	8007c2a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8007c3e:	2003      	movs	r0, #3
 8007c40:	e222      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007c42:	2e03      	cmp	r6, #3
 8007c44:	d18b      	bne.n	8007b5e <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c46:	4b25      	ldr	r3, [pc, #148]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007c4e:	d003      	beq.n	8007c58 <HAL_RCC_OscConfig+0x1e4>
 8007c50:	6863      	ldr	r3, [r4, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8213 	beq.w	800807e <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	f013 0f02 	tst.w	r3, #2
 8007c5e:	d058      	beq.n	8007d12 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007c60:	2d04      	cmp	r5, #4
 8007c62:	d045      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x27c>
 8007c64:	2d0c      	cmp	r5, #12
 8007c66:	d041      	beq.n	8007cec <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c68:	68e3      	ldr	r3, [r4, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d077      	beq.n	8007d5e <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8007c6e:	4a1b      	ldr	r2, [pc, #108]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007c70:	6813      	ldr	r3, [r2, #0]
 8007c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007c78:	f7fe fee4 	bl	8006a44 <HAL_GetTick>
 8007c7c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c7e:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007c86:	d161      	bne.n	8007d4c <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c88:	f7fe fedc 	bl	8006a44 <HAL_GetTick>
 8007c8c:	1b80      	subs	r0, r0, r6
 8007c8e:	2802      	cmp	r0, #2
 8007c90:	d9f5      	bls.n	8007c7e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8007c92:	2003      	movs	r0, #3
 8007c94:	e1f8      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c96:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	e76f      	b.n	8007b82 <HAL_RCC_OscConfig+0x10e>
 8007ca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ca6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e762      	b.n	8007b82 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8007cbc:	f7fe fec2 	bl	8006a44 <HAL_GetTick>
 8007cc0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cc2:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <HAL_RCC_OscConfig+0x268>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007cca:	d0c5      	beq.n	8007c58 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ccc:	f7fe feba 	bl	8006a44 <HAL_GetTick>
 8007cd0:	1bc0      	subs	r0, r0, r7
 8007cd2:	2864      	cmp	r0, #100	; 0x64
 8007cd4:	d9f5      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8007cd6:	2003      	movs	r0, #3
 8007cd8:	e1d6      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
 8007cda:	bf00      	nop
 8007cdc:	40021000 	.word	0x40021000
 8007ce0:	0800ce00 	.word	0x0800ce00
 8007ce4:	2000007c 	.word	0x2000007c
 8007ce8:	20000084 	.word	0x20000084
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007cec:	2e02      	cmp	r6, #2
 8007cee:	d1bb      	bne.n	8007c68 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cf0:	4b95      	ldr	r3, [pc, #596]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007cf8:	d003      	beq.n	8007d02 <HAL_RCC_OscConfig+0x28e>
 8007cfa:	68e3      	ldr	r3, [r4, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 81c0 	beq.w	8008082 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d02:	4a91      	ldr	r2, [pc, #580]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d04:	6853      	ldr	r3, [r2, #4]
 8007d06:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007d0a:	6921      	ldr	r1, [r4, #16]
 8007d0c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007d10:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	f013 0f08 	tst.w	r3, #8
 8007d18:	d04c      	beq.n	8007db4 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d1a:	6963      	ldr	r3, [r4, #20]
 8007d1c:	b39b      	cbz	r3, 8007d86 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8007d1e:	4a8a      	ldr	r2, [pc, #552]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d20:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007d24:	f043 0301 	orr.w	r3, r3, #1
 8007d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007d2c:	f7fe fe8a 	bl	8006a44 <HAL_GetTick>
 8007d30:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d32:	4b85      	ldr	r3, [pc, #532]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d38:	f013 0f02 	tst.w	r3, #2
 8007d3c:	d13a      	bne.n	8007db4 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d3e:	f7fe fe81 	bl	8006a44 <HAL_GetTick>
 8007d42:	1b80      	subs	r0, r0, r6
 8007d44:	2802      	cmp	r0, #2
 8007d46:	d9f4      	bls.n	8007d32 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8007d48:	2003      	movs	r0, #3
 8007d4a:	e19d      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d4c:	4a7e      	ldr	r2, [pc, #504]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d4e:	6853      	ldr	r3, [r2, #4]
 8007d50:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007d54:	6921      	ldr	r1, [r4, #16]
 8007d56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007d5a:	6053      	str	r3, [r2, #4]
 8007d5c:	e7d9      	b.n	8007d12 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8007d5e:	4a7a      	ldr	r2, [pc, #488]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d60:	6813      	ldr	r3, [r2, #0]
 8007d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007d68:	f7fe fe6c 	bl	8006a44 <HAL_GetTick>
 8007d6c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d6e:	4b76      	ldr	r3, [pc, #472]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007d76:	d0cc      	beq.n	8007d12 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d78:	f7fe fe64 	bl	8006a44 <HAL_GetTick>
 8007d7c:	1b80      	subs	r0, r0, r6
 8007d7e:	2802      	cmp	r0, #2
 8007d80:	d9f5      	bls.n	8007d6e <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8007d82:	2003      	movs	r0, #3
 8007d84:	e180      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8007d86:	4a70      	ldr	r2, [pc, #448]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d88:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007d94:	f7fe fe56 	bl	8006a44 <HAL_GetTick>
 8007d98:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d9a:	4b6b      	ldr	r3, [pc, #428]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007da0:	f013 0f02 	tst.w	r3, #2
 8007da4:	d006      	beq.n	8007db4 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007da6:	f7fe fe4d 	bl	8006a44 <HAL_GetTick>
 8007daa:	1b80      	subs	r0, r0, r6
 8007dac:	2802      	cmp	r0, #2
 8007dae:	d9f4      	bls.n	8007d9a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8007db0:	2003      	movs	r0, #3
 8007db2:	e169      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	f013 0f04 	tst.w	r3, #4
 8007dba:	d07a      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007dbc:	4b62      	ldr	r3, [pc, #392]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007dc4:	d136      	bne.n	8007e34 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dc6:	4b60      	ldr	r3, [pc, #384]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007dc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007dca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007dce:	659a      	str	r2, [r3, #88]	; 0x58
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007dda:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ddc:	4b5b      	ldr	r3, [pc, #364]	; (8007f4c <HAL_RCC_OscConfig+0x4d8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007de4:	d028      	beq.n	8007e38 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007de6:	68a3      	ldr	r3, [r4, #8]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d039      	beq.n	8007e60 <HAL_RCC_OscConfig+0x3ec>
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d03f      	beq.n	8007e70 <HAL_RCC_OscConfig+0x3fc>
 8007df0:	4b55      	ldr	r3, [pc, #340]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007df2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007df6:	f022 0201 	bic.w	r2, r2, #1
 8007dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007dfe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007e02:	f022 0204 	bic.w	r2, r2, #4
 8007e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e0a:	68a3      	ldr	r3, [r4, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d03d      	beq.n	8007e8c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8007e10:	f7fe fe18 	bl	8006a44 <HAL_GetTick>
 8007e14:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e16:	4b4c      	ldr	r3, [pc, #304]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1c:	f013 0f02 	tst.w	r3, #2
 8007e20:	d146      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e22:	f7fe fe0f 	bl	8006a44 <HAL_GetTick>
 8007e26:	1bc0      	subs	r0, r0, r7
 8007e28:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e2c:	4298      	cmp	r0, r3
 8007e2e:	d9f2      	bls.n	8007e16 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8007e30:	2003      	movs	r0, #3
 8007e32:	e129      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8007e34:	2600      	movs	r6, #0
 8007e36:	e7d1      	b.n	8007ddc <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e38:	4a44      	ldr	r2, [pc, #272]	; (8007f4c <HAL_RCC_OscConfig+0x4d8>)
 8007e3a:	6813      	ldr	r3, [r2, #0]
 8007e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e40:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007e42:	f7fe fdff 	bl	8006a44 <HAL_GetTick>
 8007e46:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e48:	4b40      	ldr	r3, [pc, #256]	; (8007f4c <HAL_RCC_OscConfig+0x4d8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007e50:	d1c9      	bne.n	8007de6 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e52:	f7fe fdf7 	bl	8006a44 <HAL_GetTick>
 8007e56:	1bc0      	subs	r0, r0, r7
 8007e58:	2802      	cmp	r0, #2
 8007e5a:	d9f5      	bls.n	8007e48 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8007e5c:	2003      	movs	r0, #3
 8007e5e:	e113      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e60:	4a39      	ldr	r2, [pc, #228]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007e62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e6e:	e7cc      	b.n	8007e0a <HAL_RCC_OscConfig+0x396>
 8007e70:	4b35      	ldr	r3, [pc, #212]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007e72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007e76:	f042 0204 	orr.w	r2, r2, #4
 8007e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007e82:	f042 0201 	orr.w	r2, r2, #1
 8007e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007e8a:	e7be      	b.n	8007e0a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8007e8c:	f7fe fdda 	bl	8006a44 <HAL_GetTick>
 8007e90:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e92:	4b2d      	ldr	r3, [pc, #180]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e98:	f013 0f02 	tst.w	r3, #2
 8007e9c:	d008      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e9e:	f7fe fdd1 	bl	8006a44 <HAL_GetTick>
 8007ea2:	1bc0      	subs	r0, r0, r7
 8007ea4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ea8:	4298      	cmp	r0, r3
 8007eaa:	d9f2      	bls.n	8007e92 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8007eac:	2003      	movs	r0, #3
 8007eae:	e0eb      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8007eb0:	bb6e      	cbnz	r6, 8007f0e <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80e6 	beq.w	8008086 <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d02d      	beq.n	8007f1a <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ebe:	2d0c      	cmp	r5, #12
 8007ec0:	f000 80e8 	beq.w	8008094 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8007ec4:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007ecc:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8007ed4:	d104      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ed6:	4a1c      	ldr	r2, [pc, #112]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007ed8:	68d3      	ldr	r3, [r2, #12]
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007ee2:	68d3      	ldr	r3, [r2, #12]
 8007ee4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eec:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007eee:	f7fe fda9 	bl	8006a44 <HAL_GetTick>
 8007ef2:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007efc:	f000 80b7 	beq.w	800806e <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f00:	f7fe fda0 	bl	8006a44 <HAL_GetTick>
 8007f04:	1b00      	subs	r0, r0, r4
 8007f06:	2802      	cmp	r0, #2
 8007f08:	d9f4      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8007f0a:	2003      	movs	r0, #3
 8007f0c:	e0bc      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f0e:	4a0e      	ldr	r2, [pc, #56]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007f10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f16:	6593      	str	r3, [r2, #88]	; 0x58
 8007f18:	e7cb      	b.n	8007eb2 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007f1c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1e:	f003 0103 	and.w	r1, r3, #3
 8007f22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f24:	4291      	cmp	r1, r2
 8007f26:	d013      	beq.n	8007f50 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f28:	2d0c      	cmp	r5, #12
 8007f2a:	f000 80af 	beq.w	800808c <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8007f36:	f040 80ab 	bne.w	8008090 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007f3a:	4b03      	ldr	r3, [pc, #12]	; (8007f48 <HAL_RCC_OscConfig+0x4d4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007f42:	d031      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8007f44:	2001      	movs	r0, #1
 8007f46:	e09f      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007f56:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f58:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007f5c:	d1e4      	bne.n	8007f28 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f64:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007f68:	d1de      	bne.n	8007f28 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007f6a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8007f6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007f70:	3a07      	subs	r2, #7
 8007f72:	bf18      	it	ne
 8007f74:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d1d6      	bne.n	8007f28 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f7a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007f7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007f80:	0852      	lsrs	r2, r2, #1
 8007f82:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007f84:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007f88:	d1ce      	bne.n	8007f28 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f8a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007f8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007f90:	0852      	lsrs	r2, r2, #1
 8007f92:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f94:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007f98:	d1c6      	bne.n	8007f28 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f9a:	4b3f      	ldr	r3, [pc, #252]	; (8008098 <HAL_RCC_OscConfig+0x624>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007fa2:	d04a      	beq.n	800803a <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e06f      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8007fa8:	4a3b      	ldr	r2, [pc, #236]	; (8008098 <HAL_RCC_OscConfig+0x624>)
 8007faa:	6813      	ldr	r3, [r2, #0]
 8007fac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fb0:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8007fb2:	f7fe fd47 	bl	8006a44 <HAL_GetTick>
 8007fb6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fb8:	4b37      	ldr	r3, [pc, #220]	; (8008098 <HAL_RCC_OscConfig+0x624>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007fc0:	d006      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fc2:	f7fe fd3f 	bl	8006a44 <HAL_GetTick>
 8007fc6:	1b40      	subs	r0, r0, r5
 8007fc8:	2802      	cmp	r0, #2
 8007fca:	d9f5      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8007fcc:	2003      	movs	r0, #3
 8007fce:	e05b      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fd0:	4a31      	ldr	r2, [pc, #196]	; (8008098 <HAL_RCC_OscConfig+0x624>)
 8007fd2:	68d3      	ldr	r3, [r2, #12]
 8007fd4:	4931      	ldr	r1, [pc, #196]	; (800809c <HAL_RCC_OscConfig+0x628>)
 8007fd6:	4019      	ands	r1, r3
 8007fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fda:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007fdc:	3801      	subs	r0, #1
 8007fde:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007fe2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007fe4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007fe8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007fea:	0840      	lsrs	r0, r0, #1
 8007fec:	3801      	subs	r0, #1
 8007fee:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8007ff2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007ff4:	0840      	lsrs	r0, r0, #1
 8007ff6:	3801      	subs	r0, #1
 8007ff8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8007ffc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007ffe:	0900      	lsrs	r0, r0, #4
 8008000:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8008004:	4319      	orrs	r1, r3
 8008006:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8008008:	6813      	ldr	r3, [r2, #0]
 800800a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800800e:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008010:	68d3      	ldr	r3, [r2, #12]
 8008012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008016:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8008018:	f7fe fd14 	bl	8006a44 <HAL_GetTick>
 800801c:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800801e:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <HAL_RCC_OscConfig+0x624>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008026:	d106      	bne.n	8008036 <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008028:	f7fe fd0c 	bl	8006a44 <HAL_GetTick>
 800802c:	1b00      	subs	r0, r0, r4
 800802e:	2802      	cmp	r0, #2
 8008030:	d9f5      	bls.n	800801e <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8008032:	2003      	movs	r0, #3
 8008034:	e028      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8008036:	2000      	movs	r0, #0
 8008038:	e026      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 800803a:	4b17      	ldr	r3, [pc, #92]	; (8008098 <HAL_RCC_OscConfig+0x624>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008042:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800804a:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800804c:	f7fe fcfa 	bl	8006a44 <HAL_GetTick>
 8008050:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008052:	4b11      	ldr	r3, [pc, #68]	; (8008098 <HAL_RCC_OscConfig+0x624>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800805a:	d106      	bne.n	800806a <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800805c:	f7fe fcf2 	bl	8006a44 <HAL_GetTick>
 8008060:	1b03      	subs	r3, r0, r4
 8008062:	2b02      	cmp	r3, #2
 8008064:	d9f5      	bls.n	8008052 <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8008066:	2003      	movs	r0, #3
 8008068:	e00e      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 800806a:	2000      	movs	r0, #0
 800806c:	e00c      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
 800806e:	2000      	movs	r0, #0
 8008070:	e00a      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8008072:	2001      	movs	r0, #1
}
 8008074:	4770      	bx	lr
        return HAL_ERROR;
 8008076:	2001      	movs	r0, #1
 8008078:	e006      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 800807a:	2001      	movs	r0, #1
 800807c:	e004      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800807e:	2001      	movs	r0, #1
 8008080:	e002      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8008082:	2001      	movs	r0, #1
 8008084:	e000      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8008086:	2000      	movs	r0, #0
}
 8008088:	b003      	add	sp, #12
 800808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800808c:	2001      	movs	r0, #1
 800808e:	e7fb      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8008090:	2001      	movs	r0, #1
 8008092:	e7f9      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8008094:	2001      	movs	r0, #1
 8008096:	e7f7      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
 8008098:	40021000 	.word	0x40021000
 800809c:	f99d808c 	.word	0xf99d808c

080080a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f000 8098 	beq.w	80081d6 <HAL_RCC_ClockConfig+0x136>
{
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	460c      	mov	r4, r1
 80080aa:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080ac:	4b4e      	ldr	r3, [pc, #312]	; (80081e8 <HAL_RCC_ClockConfig+0x148>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	428b      	cmp	r3, r1
 80080b6:	d20b      	bcs.n	80080d0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080b8:	4a4b      	ldr	r2, [pc, #300]	; (80081e8 <HAL_RCC_ClockConfig+0x148>)
 80080ba:	6813      	ldr	r3, [r2, #0]
 80080bc:	f023 0307 	bic.w	r3, r3, #7
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c4:	6813      	ldr	r3, [r2, #0]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	428b      	cmp	r3, r1
 80080cc:	f040 8085 	bne.w	80081da <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	f013 0f01 	tst.w	r3, #1
 80080d6:	d039      	beq.n	800814c <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080d8:	686b      	ldr	r3, [r5, #4]
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d009      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d026      	beq.n	8008130 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080e2:	bb63      	cbnz	r3, 800813e <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080e4:	4a41      	ldr	r2, [pc, #260]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	f012 0f02 	tst.w	r2, #2
 80080ec:	d106      	bne.n	80080fc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80080ee:	2001      	movs	r0, #1
 80080f0:	e070      	b.n	80081d4 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080f2:	4a3e      	ldr	r2, [pc, #248]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 80080f4:	6812      	ldr	r2, [r2, #0]
 80080f6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80080fa:	d070      	beq.n	80081de <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080fc:	493b      	ldr	r1, [pc, #236]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 80080fe:	688a      	ldr	r2, [r1, #8]
 8008100:	f022 0203 	bic.w	r2, r2, #3
 8008104:	4313      	orrs	r3, r2
 8008106:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008108:	f7fe fc9c 	bl	8006a44 <HAL_GetTick>
 800810c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800810e:	4b37      	ldr	r3, [pc, #220]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 030c 	and.w	r3, r3, #12
 8008116:	686a      	ldr	r2, [r5, #4]
 8008118:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800811c:	d016      	beq.n	800814c <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800811e:	f7fe fc91 	bl	8006a44 <HAL_GetTick>
 8008122:	1b80      	subs	r0, r0, r6
 8008124:	f241 3388 	movw	r3, #5000	; 0x1388
 8008128:	4298      	cmp	r0, r3
 800812a:	d9f0      	bls.n	800810e <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800812c:	2003      	movs	r0, #3
 800812e:	e051      	b.n	80081d4 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008130:	4a2e      	ldr	r2, [pc, #184]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 8008132:	6812      	ldr	r2, [r2, #0]
 8008134:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008138:	d1e0      	bne.n	80080fc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800813a:	2001      	movs	r0, #1
 800813c:	e04a      	b.n	80081d4 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800813e:	4a2b      	ldr	r2, [pc, #172]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 8008140:	6812      	ldr	r2, [r2, #0]
 8008142:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008146:	d1d9      	bne.n	80080fc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8008148:	2001      	movs	r0, #1
 800814a:	e043      	b.n	80081d4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	f013 0f02 	tst.w	r3, #2
 8008152:	d006      	beq.n	8008162 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008154:	4a25      	ldr	r2, [pc, #148]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 8008156:	6893      	ldr	r3, [r2, #8]
 8008158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800815c:	68a9      	ldr	r1, [r5, #8]
 800815e:	430b      	orrs	r3, r1
 8008160:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008162:	4b21      	ldr	r3, [pc, #132]	; (80081e8 <HAL_RCC_ClockConfig+0x148>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	42a3      	cmp	r3, r4
 800816c:	d90a      	bls.n	8008184 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800816e:	4a1e      	ldr	r2, [pc, #120]	; (80081e8 <HAL_RCC_ClockConfig+0x148>)
 8008170:	6813      	ldr	r3, [r2, #0]
 8008172:	f023 0307 	bic.w	r3, r3, #7
 8008176:	4323      	orrs	r3, r4
 8008178:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800817a:	6813      	ldr	r3, [r2, #0]
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	42a3      	cmp	r3, r4
 8008182:	d12e      	bne.n	80081e2 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	f013 0f04 	tst.w	r3, #4
 800818a:	d006      	beq.n	800819a <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800818c:	4a17      	ldr	r2, [pc, #92]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 800818e:	6893      	ldr	r3, [r2, #8]
 8008190:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008194:	68e9      	ldr	r1, [r5, #12]
 8008196:	430b      	orrs	r3, r1
 8008198:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800819a:	682b      	ldr	r3, [r5, #0]
 800819c:	f013 0f08 	tst.w	r3, #8
 80081a0:	d007      	beq.n	80081b2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081a2:	4a12      	ldr	r2, [pc, #72]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 80081a4:	6893      	ldr	r3, [r2, #8]
 80081a6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80081aa:	6929      	ldr	r1, [r5, #16]
 80081ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80081b0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081b2:	f7ff fc05 	bl	80079c0 <HAL_RCC_GetSysClockFreq>
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <HAL_RCC_ClockConfig+0x14c>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80081be:	4a0c      	ldr	r2, [pc, #48]	; (80081f0 <HAL_RCC_ClockConfig+0x150>)
 80081c0:	5cd3      	ldrb	r3, [r2, r3]
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	40d8      	lsrs	r0, r3
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <HAL_RCC_ClockConfig+0x154>)
 80081ca:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <HAL_RCC_ClockConfig+0x158>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	f7fe fbf6 	bl	80069c0 <HAL_InitTick>
}
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80081d6:	2001      	movs	r0, #1
}
 80081d8:	4770      	bx	lr
      return HAL_ERROR;
 80081da:	2001      	movs	r0, #1
 80081dc:	e7fa      	b.n	80081d4 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 80081de:	2001      	movs	r0, #1
 80081e0:	e7f8      	b.n	80081d4 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 80081e2:	2001      	movs	r0, #1
 80081e4:	e7f6      	b.n	80081d4 <HAL_RCC_ClockConfig+0x134>
 80081e6:	bf00      	nop
 80081e8:	40022000 	.word	0x40022000
 80081ec:	40021000 	.word	0x40021000
 80081f0:	0800ce00 	.word	0x0800ce00
 80081f4:	2000007c 	.word	0x2000007c
 80081f8:	20000084 	.word	0x20000084

080081fc <HAL_RCC_GetHCLKFreq>:
}
 80081fc:	4b01      	ldr	r3, [pc, #4]	; (8008204 <HAL_RCC_GetHCLKFreq+0x8>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	2000007c 	.word	0x2000007c

08008208 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	4604      	mov	r4, r0
 800820c:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800820e:	4b59      	ldr	r3, [pc, #356]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f013 0f03 	tst.w	r3, #3
 8008216:	d018      	beq.n	800824a <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008218:	4b56      	ldr	r3, [pc, #344]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	6802      	ldr	r2, [r0, #0]
 8008222:	4293      	cmp	r3, r2
 8008224:	d002      	beq.n	800822c <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008226:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8008228:	4628      	mov	r0, r5
 800822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800822c:	2a00      	cmp	r2, #0
 800822e:	f000 809e 	beq.w	800836e <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008232:	4b50      	ldr	r3, [pc, #320]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800823a:	3301      	adds	r3, #1
 800823c:	6842      	ldr	r2, [r0, #4]
       ||
 800823e:	4293      	cmp	r3, r2
 8008240:	d001      	beq.n	8008246 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8008242:	2501      	movs	r5, #1
 8008244:	e7f0      	b.n	8008228 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8008246:	2500      	movs	r5, #0
 8008248:	e009      	b.n	800825e <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 800824a:	6803      	ldr	r3, [r0, #0]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d057      	beq.n	8008300 <RCCEx_PLLSAI1_Config+0xf8>
 8008250:	2b03      	cmp	r3, #3
 8008252:	d05c      	beq.n	800830e <RCCEx_PLLSAI1_Config+0x106>
 8008254:	2b01      	cmp	r3, #1
 8008256:	d042      	beq.n	80082de <RCCEx_PLLSAI1_Config+0xd6>
 8008258:	2501      	movs	r5, #1
  if(status == HAL_OK)
 800825a:	2d00      	cmp	r5, #0
 800825c:	d1e4      	bne.n	8008228 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800825e:	4a45      	ldr	r2, [pc, #276]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008260:	6813      	ldr	r3, [r2, #0]
 8008262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008266:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008268:	f7fe fbec 	bl	8006a44 <HAL_GetTick>
 800826c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800826e:	4b41      	ldr	r3, [pc, #260]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008276:	d005      	beq.n	8008284 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008278:	f7fe fbe4 	bl	8006a44 <HAL_GetTick>
 800827c:	1b83      	subs	r3, r0, r6
 800827e:	2b02      	cmp	r3, #2
 8008280:	d9f5      	bls.n	800826e <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8008282:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8008284:	2d00      	cmp	r5, #0
 8008286:	d1cf      	bne.n	8008228 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8008288:	2f00      	cmp	r7, #0
 800828a:	d14e      	bne.n	800832a <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800828c:	4939      	ldr	r1, [pc, #228]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008298:	68a0      	ldr	r0, [r4, #8]
 800829a:	68e2      	ldr	r2, [r4, #12]
 800829c:	0912      	lsrs	r2, r2, #4
 800829e:	0452      	lsls	r2, r2, #17
 80082a0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80082a4:	4313      	orrs	r3, r2
 80082a6:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80082a8:	4a32      	ldr	r2, [pc, #200]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082b0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80082b2:	f7fe fbc7 	bl	8006a44 <HAL_GetTick>
 80082b6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80082b8:	4b2e      	ldr	r3, [pc, #184]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80082c0:	d105      	bne.n	80082ce <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082c2:	f7fe fbbf 	bl	8006a44 <HAL_GetTick>
 80082c6:	1b83      	subs	r3, r0, r6
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d9f5      	bls.n	80082b8 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 80082cc:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	d1aa      	bne.n	8008228 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80082d2:	4a28      	ldr	r2, [pc, #160]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 80082d4:	6913      	ldr	r3, [r2, #16]
 80082d6:	69a1      	ldr	r1, [r4, #24]
 80082d8:	430b      	orrs	r3, r1
 80082da:	6113      	str	r3, [r2, #16]
 80082dc:	e7a4      	b.n	8008228 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80082de:	4a25      	ldr	r2, [pc, #148]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	f012 0f02 	tst.w	r2, #2
 80082e6:	d01e      	beq.n	8008326 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80082e8:	4822      	ldr	r0, [pc, #136]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 80082ea:	68c2      	ldr	r2, [r0, #12]
 80082ec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80082f0:	6861      	ldr	r1, [r4, #4]
 80082f2:	3901      	subs	r1, #1
 80082f4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60c3      	str	r3, [r0, #12]
 80082fc:	2500      	movs	r5, #0
 80082fe:	e7ac      	b.n	800825a <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008300:	4a1c      	ldr	r2, [pc, #112]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008308:	d1ee      	bne.n	80082e8 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 800830a:	2501      	movs	r5, #1
 800830c:	e7a5      	b.n	800825a <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800830e:	4a19      	ldr	r2, [pc, #100]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008316:	d1e7      	bne.n	80082e8 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008318:	4a16      	ldr	r2, [pc, #88]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8008320:	d1e2      	bne.n	80082e8 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 8008322:	2501      	movs	r5, #1
 8008324:	e799      	b.n	800825a <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8008326:	2501      	movs	r5, #1
 8008328:	e797      	b.n	800825a <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 800832a:	2f01      	cmp	r7, #1
 800832c:	d00f      	beq.n	800834e <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800832e:	4811      	ldr	r0, [pc, #68]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008330:	6902      	ldr	r2, [r0, #16]
 8008332:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8008336:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800833a:	68a1      	ldr	r1, [r4, #8]
 800833c:	6963      	ldr	r3, [r4, #20]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	3b01      	subs	r3, #1
 8008342:	065b      	lsls	r3, r3, #25
 8008344:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008348:	431a      	orrs	r2, r3
 800834a:	6102      	str	r2, [r0, #16]
 800834c:	e7ac      	b.n	80082a8 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800834e:	4809      	ldr	r0, [pc, #36]	; (8008374 <RCCEx_PLLSAI1_Config+0x16c>)
 8008350:	6902      	ldr	r2, [r0, #16]
 8008352:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008356:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800835a:	68a1      	ldr	r1, [r4, #8]
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	085b      	lsrs	r3, r3, #1
 8008360:	3b01      	subs	r3, #1
 8008362:	055b      	lsls	r3, r3, #21
 8008364:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008368:	431a      	orrs	r2, r3
 800836a:	6102      	str	r2, [r0, #16]
 800836c:	e79c      	b.n	80082a8 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 800836e:	2501      	movs	r5, #1
 8008370:	e75a      	b.n	8008228 <RCCEx_PLLSAI1_Config+0x20>
 8008372:	bf00      	nop
 8008374:	40021000 	.word	0x40021000

08008378 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	4604      	mov	r4, r0
 800837c:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800837e:	4b50      	ldr	r3, [pc, #320]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f013 0f03 	tst.w	r3, #3
 8008386:	d018      	beq.n	80083ba <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008388:	4b4d      	ldr	r3, [pc, #308]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	6802      	ldr	r2, [r0, #0]
 8008392:	4293      	cmp	r3, r2
 8008394:	d002      	beq.n	800839c <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008396:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8008398:	4628      	mov	r0, r5
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800839c:	2a00      	cmp	r2, #0
 800839e:	f000 808c 	beq.w	80084ba <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80083a2:	4b47      	ldr	r3, [pc, #284]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80083aa:	3301      	adds	r3, #1
 80083ac:	6842      	ldr	r2, [r0, #4]
       ||
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d001      	beq.n	80083b6 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 80083b2:	2501      	movs	r5, #1
 80083b4:	e7f0      	b.n	8008398 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80083b6:	2500      	movs	r5, #0
 80083b8:	e009      	b.n	80083ce <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 80083ba:	6803      	ldr	r3, [r0, #0]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d057      	beq.n	8008470 <RCCEx_PLLSAI2_Config+0xf8>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d05c      	beq.n	800847e <RCCEx_PLLSAI2_Config+0x106>
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d042      	beq.n	800844e <RCCEx_PLLSAI2_Config+0xd6>
 80083c8:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	d1e4      	bne.n	8008398 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 80083ce:	4a3c      	ldr	r2, [pc, #240]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 80083d0:	6813      	ldr	r3, [r2, #0]
 80083d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083d6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80083d8:	f7fe fb34 	bl	8006a44 <HAL_GetTick>
 80083dc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80083de:	4b38      	ldr	r3, [pc, #224]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80083e6:	d005      	beq.n	80083f4 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80083e8:	f7fe fb2c 	bl	8006a44 <HAL_GetTick>
 80083ec:	1b83      	subs	r3, r0, r6
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d9f5      	bls.n	80083de <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 80083f2:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	d1cf      	bne.n	8008398 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80083f8:	2f00      	cmp	r7, #0
 80083fa:	d14e      	bne.n	800849a <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083fc:	4930      	ldr	r1, [pc, #192]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 80083fe:	694b      	ldr	r3, [r1, #20]
 8008400:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008408:	68a0      	ldr	r0, [r4, #8]
 800840a:	68e2      	ldr	r2, [r4, #12]
 800840c:	0912      	lsrs	r2, r2, #4
 800840e:	0452      	lsls	r2, r2, #17
 8008410:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008414:	4313      	orrs	r3, r2
 8008416:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8008418:	4a29      	ldr	r2, [pc, #164]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008420:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008422:	f7fe fb0f 	bl	8006a44 <HAL_GetTick>
 8008426:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008428:	4b25      	ldr	r3, [pc, #148]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008430:	d105      	bne.n	800843e <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008432:	f7fe fb07 	bl	8006a44 <HAL_GetTick>
 8008436:	1b83      	subs	r3, r0, r6
 8008438:	2b02      	cmp	r3, #2
 800843a:	d9f5      	bls.n	8008428 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 800843c:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800843e:	2d00      	cmp	r5, #0
 8008440:	d1aa      	bne.n	8008398 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 8008444:	6953      	ldr	r3, [r2, #20]
 8008446:	6961      	ldr	r1, [r4, #20]
 8008448:	430b      	orrs	r3, r1
 800844a:	6153      	str	r3, [r2, #20]
 800844c:	e7a4      	b.n	8008398 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800844e:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 8008450:	6812      	ldr	r2, [r2, #0]
 8008452:	f012 0f02 	tst.w	r2, #2
 8008456:	d01e      	beq.n	8008496 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008458:	4819      	ldr	r0, [pc, #100]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 800845a:	68c2      	ldr	r2, [r0, #12]
 800845c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008460:	6861      	ldr	r1, [r4, #4]
 8008462:	3901      	subs	r1, #1
 8008464:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8008468:	4313      	orrs	r3, r2
 800846a:	60c3      	str	r3, [r0, #12]
 800846c:	2500      	movs	r5, #0
 800846e:	e7ac      	b.n	80083ca <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008470:	4a13      	ldr	r2, [pc, #76]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 8008472:	6812      	ldr	r2, [r2, #0]
 8008474:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008478:	d1ee      	bne.n	8008458 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 800847a:	2501      	movs	r5, #1
 800847c:	e7a5      	b.n	80083ca <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800847e:	4a10      	ldr	r2, [pc, #64]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008486:	d1e7      	bne.n	8008458 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008488:	4a0d      	ldr	r2, [pc, #52]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8008490:	d1e2      	bne.n	8008458 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 8008492:	2501      	movs	r5, #1
 8008494:	e799      	b.n	80083ca <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8008496:	2501      	movs	r5, #1
 8008498:	e797      	b.n	80083ca <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800849a:	4809      	ldr	r0, [pc, #36]	; (80084c0 <RCCEx_PLLSAI2_Config+0x148>)
 800849c:	6942      	ldr	r2, [r0, #20]
 800849e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80084a2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80084a6:	68a1      	ldr	r1, [r4, #8]
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	3b01      	subs	r3, #1
 80084ae:	065b      	lsls	r3, r3, #25
 80084b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084b4:	431a      	orrs	r2, r3
 80084b6:	6142      	str	r2, [r0, #20]
 80084b8:	e7ae      	b.n	8008418 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 80084ba:	2501      	movs	r5, #1
 80084bc:	e76c      	b.n	8008398 <RCCEx_PLLSAI2_Config+0x20>
 80084be:	bf00      	nop
 80084c0:	40021000 	.word	0x40021000

080084c4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80084c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80084cc:	6803      	ldr	r3, [r0, #0]
 80084ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80084d2:	d033      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 80084d4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80084d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084da:	d01f      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80084dc:	d80c      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80084de:	b323      	cbz	r3, 800852a <HAL_RCCEx_PeriphCLKConfig+0x66>
 80084e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084e4:	d105      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80084e6:	2100      	movs	r1, #0
 80084e8:	3020      	adds	r0, #32
 80084ea:	f7ff ff45 	bl	8008378 <RCCEx_PLLSAI2_Config>
 80084ee:	4606      	mov	r6, r0
      break;
 80084f0:	e020      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80084f2:	2701      	movs	r7, #1
 80084f4:	463e      	mov	r6, r7
 80084f6:	e023      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80084f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084fc:	d10b      	bne.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80084fe:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008500:	4a60      	ldr	r2, [pc, #384]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008502:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008506:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800850a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800850c:	430b      	orrs	r3, r1
 800850e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008512:	2700      	movs	r7, #0
 8008514:	e014      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008516:	2701      	movs	r7, #1
 8008518:	463e      	mov	r6, r7
 800851a:	e011      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800851c:	4a59      	ldr	r2, [pc, #356]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800851e:	68d3      	ldr	r3, [r2, #12]
 8008520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008524:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008526:	2600      	movs	r6, #0
 8008528:	e7ea      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800852a:	2100      	movs	r1, #0
 800852c:	3004      	adds	r0, #4
 800852e:	f7ff fe6b 	bl	8008208 <RCCEx_PLLSAI1_Config>
 8008532:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008534:	2e00      	cmp	r6, #0
 8008536:	d0e3      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8008538:	4637      	mov	r7, r6
 800853a:	e001      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800853c:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800853e:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008546:	d030      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008548:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800854a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800854e:	d01f      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8008550:	d80d      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8008552:	b31b      	cbz	r3, 800859c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8008554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800855a:	2100      	movs	r1, #0
 800855c:	f104 0020 	add.w	r0, r4, #32
 8008560:	f7ff ff0a 	bl	8008378 <RCCEx_PLLSAI2_Config>
 8008564:	4606      	mov	r6, r0
      break;
 8008566:	e005      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008568:	2701      	movs	r7, #1
 800856a:	463e      	mov	r6, r7
 800856c:	e01d      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800856e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008572:	d10a      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8008574:	b9c6      	cbnz	r6, 80085a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008576:	4a43      	ldr	r2, [pc, #268]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008578:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800857c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008580:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008582:	430b      	orrs	r3, r1
 8008584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008588:	e00f      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 800858a:	2701      	movs	r7, #1
 800858c:	463e      	mov	r6, r7
 800858e:	e00c      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008590:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008592:	68d3      	ldr	r3, [r2, #12]
 8008594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008598:	60d3      	str	r3, [r2, #12]
      break;
 800859a:	e7eb      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800859c:	2100      	movs	r1, #0
 800859e:	1d20      	adds	r0, r4, #4
 80085a0:	f7ff fe32 	bl	8008208 <RCCEx_PLLSAI1_Config>
 80085a4:	4606      	mov	r6, r0
      break;
 80085a6:	e7e5      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80085a8:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80085b0:	d071      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80085b2:	4b34      	ldr	r3, [pc, #208]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80085b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80085ba:	d14e      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 80085bc:	4b31      	ldr	r3, [pc, #196]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80085be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80085c4:	659a      	str	r2, [r3, #88]	; 0x58
 80085c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80085d0:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085d4:	4a2c      	ldr	r2, [pc, #176]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085d6:	6813      	ldr	r3, [r2, #0]
 80085d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085dc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80085de:	f7fe fa31 	bl	8006a44 <HAL_GetTick>
 80085e2:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80085e4:	4b28      	ldr	r3, [pc, #160]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80085ec:	d105      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ee:	f7fe fa29 	bl	8006a44 <HAL_GetTick>
 80085f2:	1b40      	subs	r0, r0, r5
 80085f4:	2802      	cmp	r0, #2
 80085f6:	d9f5      	bls.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 80085f8:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	d146      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80085fe:	4b21      	ldr	r3, [pc, #132]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008604:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008608:	d016      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800860a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800860e:	429a      	cmp	r2, r3
 8008610:	d012      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008612:	4a1c      	ldr	r2, [pc, #112]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008614:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800861c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008620:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008624:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008628:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800862c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008630:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8008634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008638:	f013 0f01 	tst.w	r3, #1
 800863c:	d110      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 800863e:	2e00      	cmp	r6, #0
 8008640:	f040 8127 	bne.w	8008892 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008644:	4a0f      	ldr	r2, [pc, #60]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008646:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800864a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800864e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008652:	430b      	orrs	r3, r1
 8008654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008658:	e019      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	e7b9      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8008660:	f7fe f9f0 	bl	8006a44 <HAL_GetTick>
 8008664:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008666:	4b07      	ldr	r3, [pc, #28]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866c:	f013 0f02 	tst.w	r3, #2
 8008670:	d1e5      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008672:	f7fe f9e7 	bl	8006a44 <HAL_GetTick>
 8008676:	1b40      	subs	r0, r0, r5
 8008678:	f241 3388 	movw	r3, #5000	; 0x1388
 800867c:	4298      	cmp	r0, r3
 800867e:	d9f2      	bls.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8008680:	2603      	movs	r6, #3
 8008682:	e7dc      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008684:	40021000 	.word	0x40021000
 8008688:	40007000 	.word	0x40007000
      status = ret;
 800868c:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800868e:	f1b8 0f00 	cmp.w	r8, #0
 8008692:	f040 8100 	bne.w	8008896 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	f013 0f01 	tst.w	r3, #1
 800869c:	d008      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800869e:	4a9d      	ldr	r2, [pc, #628]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80086a4:	f023 0303 	bic.w	r3, r3, #3
 80086a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80086aa:	430b      	orrs	r3, r1
 80086ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	f013 0f02 	tst.w	r3, #2
 80086b6:	d008      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086b8:	4a96      	ldr	r2, [pc, #600]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80086be:	f023 030c 	bic.w	r3, r3, #12
 80086c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80086c4:	430b      	orrs	r3, r1
 80086c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	f013 0f04 	tst.w	r3, #4
 80086d0:	d008      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086d2:	4a90      	ldr	r2, [pc, #576]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80086d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80086dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80086de:	430b      	orrs	r3, r1
 80086e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	f013 0f08 	tst.w	r3, #8
 80086ea:	d008      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086ec:	4a89      	ldr	r2, [pc, #548]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80086f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80086f8:	430b      	orrs	r3, r1
 80086fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	f013 0f10 	tst.w	r3, #16
 8008704:	d008      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008706:	4a83      	ldr	r2, [pc, #524]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008708:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800870c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008710:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008712:	430b      	orrs	r3, r1
 8008714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	f013 0f20 	tst.w	r3, #32
 800871e:	d008      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008720:	4a7c      	ldr	r2, [pc, #496]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008722:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008726:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800872a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800872c:	430b      	orrs	r3, r1
 800872e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008738:	d008      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800873a:	4a76      	ldr	r2, [pc, #472]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800873c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008740:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8008744:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008746:	430b      	orrs	r3, r1
 8008748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008752:	d008      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008754:	4a6f      	ldr	r2, [pc, #444]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008756:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800875a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800875e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008760:	430b      	orrs	r3, r1
 8008762:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	f013 0f40 	tst.w	r3, #64	; 0x40
 800876c:	d008      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800876e:	4a69      	ldr	r2, [pc, #420]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008770:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008774:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008778:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800877a:	430b      	orrs	r3, r1
 800877c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008786:	d008      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008788:	4a62      	ldr	r2, [pc, #392]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800878a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800878e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008792:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008794:	430b      	orrs	r3, r1
 8008796:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80087a0:	d008      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087a2:	4a5c      	ldr	r2, [pc, #368]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80087a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80087ac:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087ae:	430b      	orrs	r3, r1
 80087b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80087ba:	d00f      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087bc:	4a55      	ldr	r2, [pc, #340]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80087c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80087c6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80087c8:	430b      	orrs	r3, r1
 80087ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80087d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087d4:	d065      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80087d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087da:	d067      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80087e2:	d00f      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087e4:	4a4b      	ldr	r2, [pc, #300]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80087ea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80087ee:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80087f0:	430b      	orrs	r3, r1
 80087f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80087f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80087f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087fc:	d05e      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80087fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008802:	d060      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800880a:	d00f      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800880c:	4a41      	ldr	r2, [pc, #260]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800880e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008812:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008816:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008818:	430b      	orrs	r3, r1
 800881a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800881e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008824:	d057      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800882a:	d059      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008832:	d00f      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008834:	4a37      	ldr	r2, [pc, #220]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008836:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800883a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800883e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008840:	430b      	orrs	r3, r1
 8008842:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008846:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800884c:	d050      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008852:	d055      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800885a:	d008      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800885c:	4a2d      	ldr	r2, [pc, #180]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800885e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008866:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008868:	430b      	orrs	r3, r1
 800886a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008874:	d009      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008876:	4a27      	ldr	r2, [pc, #156]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008878:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800887c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008880:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008884:	430b      	orrs	r3, r1
 8008886:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800888a:	4638      	mov	r0, r7
 800888c:	b002      	add	sp, #8
 800888e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8008892:	4637      	mov	r7, r6
 8008894:	e6fb      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008896:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008898:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800889a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800889e:	6593      	str	r3, [r2, #88]	; 0x58
 80088a0:	e6f9      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088a2:	68d3      	ldr	r3, [r2, #12]
 80088a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088a8:	60d3      	str	r3, [r2, #12]
 80088aa:	e797      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088ac:	2101      	movs	r1, #1
 80088ae:	1d20      	adds	r0, r4, #4
 80088b0:	f7ff fcaa 	bl	8008208 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d091      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 80088b8:	4607      	mov	r7, r0
 80088ba:	e78f      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088bc:	68d3      	ldr	r3, [r2, #12]
 80088be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088c2:	60d3      	str	r3, [r2, #12]
 80088c4:	e79e      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088c6:	2101      	movs	r1, #1
 80088c8:	1d20      	adds	r0, r4, #4
 80088ca:	f7ff fc9d 	bl	8008208 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d098      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 80088d2:	4607      	mov	r7, r0
 80088d4:	e796      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088d6:	68d3      	ldr	r3, [r2, #12]
 80088d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088dc:	60d3      	str	r3, [r2, #12]
 80088de:	e7a5      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088e0:	2101      	movs	r1, #1
 80088e2:	1d20      	adds	r0, r4, #4
 80088e4:	f7ff fc90 	bl	8008208 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d09f      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 80088ec:	4607      	mov	r7, r0
 80088ee:	e79d      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80088f0:	2102      	movs	r1, #2
 80088f2:	1d20      	adds	r0, r4, #4
 80088f4:	f7ff fc88 	bl	8008208 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d0ab      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 80088fc:	4607      	mov	r7, r0
 80088fe:	e7a9      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008900:	2102      	movs	r1, #2
 8008902:	f104 0020 	add.w	r0, r4, #32
 8008906:	f7ff fd37 	bl	8008378 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800890a:	2800      	cmp	r0, #0
 800890c:	d0a2      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 800890e:	4607      	mov	r7, r0
 8008910:	e7a0      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8008912:	bf00      	nop
 8008914:	40021000 	.word	0x40021000

08008918 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8008918:	4b05      	ldr	r3, [pc, #20]	; (8008930 <HAL_RCCEx_DisableLSECSS+0x18>)
 800891a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800891e:	f022 0220 	bic.w	r2, r2, #32
 8008922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800892c:	619a      	str	r2, [r3, #24]
}
 800892e:	4770      	bx	lr
 8008930:	40021000 	.word	0x40021000

08008934 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008934:	4a02      	ldr	r2, [pc, #8]	; (8008940 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	f043 0304 	orr.w	r3, r3, #4
 800893c:	6013      	str	r3, [r2, #0]
}
 800893e:	4770      	bx	lr
 8008940:	40021000 	.word	0x40021000

08008944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	4605      	mov	r5, r0
 800894c:	4688      	mov	r8, r1
 800894e:	4617      	mov	r7, r2
 8008950:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008952:	f7fe f877 	bl	8006a44 <HAL_GetTick>
 8008956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008958:	1a1b      	subs	r3, r3, r0
 800895a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800895e:	f7fe f871 	bl	8006a44 <HAL_GetTick>
 8008962:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008964:	4b2a      	ldr	r3, [pc, #168]	; (8008a10 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800896c:	fb09 f303 	mul.w	r3, r9, r3
 8008970:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	689c      	ldr	r4, [r3, #8]
 8008976:	ea38 0404 	bics.w	r4, r8, r4
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	42bb      	cmp	r3, r7
 8008982:	d040      	beq.n	8008a06 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008984:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008988:	d0f3      	beq.n	8008972 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800898a:	f7fe f85b 	bl	8006a44 <HAL_GetTick>
 800898e:	eba0 000a 	sub.w	r0, r0, sl
 8008992:	4548      	cmp	r0, r9
 8008994:	d20a      	bcs.n	80089ac <SPI_WaitFlagStateUntilTimeout+0x68>
 8008996:	f1b9 0f00 	cmp.w	r9, #0
 800899a:	d007      	beq.n	80089ac <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800899c:	9a01      	ldr	r2, [sp, #4]
 800899e:	b102      	cbz	r2, 80089a2 <SPI_WaitFlagStateUntilTimeout+0x5e>
 80089a0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80089a2:	9b01      	ldr	r3, [sp, #4]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	4691      	mov	r9, r2
 80089aa:	e7e2      	b.n	8008972 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089ac:	682a      	ldr	r2, [r5, #0]
 80089ae:	6853      	ldr	r3, [r2, #4]
 80089b0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80089b4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b6:	686b      	ldr	r3, [r5, #4]
 80089b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089bc:	d00b      	beq.n	80089d6 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089be:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80089c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c4:	d014      	beq.n	80089f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80089c6:	2301      	movs	r3, #1
 80089c8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80089cc:	2300      	movs	r3, #0
 80089ce:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80089d2:	2003      	movs	r0, #3
 80089d4:	e018      	b.n	8008a08 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089d6:	68ab      	ldr	r3, [r5, #8]
 80089d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089dc:	d002      	beq.n	80089e4 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e2:	d1ec      	bne.n	80089be <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80089e4:	682a      	ldr	r2, [r5, #0]
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	e7e6      	b.n	80089be <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80089f0:	682a      	ldr	r2, [r5, #0]
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	682a      	ldr	r2, [r5, #0]
 80089fc:	6813      	ldr	r3, [r2, #0]
 80089fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	e7df      	b.n	80089c6 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8008a06:	2000      	movs	r0, #0
}
 8008a08:	b002      	add	sp, #8
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	bf00      	nop
 8008a10:	2000007c 	.word	0x2000007c

08008a14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	4616      	mov	r6, r2
 8008a20:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a22:	f7fe f80f 	bl	8006a44 <HAL_GetTick>
 8008a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a28:	1a1b      	subs	r3, r3, r0
 8008a2a:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8008a2e:	f7fe f809 	bl	8006a44 <HAL_GetTick>
 8008a32:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a34:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <SPI_WaitFifoStateUntilTimeout+0xe0>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008a3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008a40:	0d1b      	lsrs	r3, r3, #20
 8008a42:	fb09 f303 	mul.w	r3, r9, r3
 8008a46:	9300      	str	r3, [sp, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a48:	e002      	b.n	8008a50 <SPI_WaitFifoStateUntilTimeout+0x3c>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a4a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008a4e:	d10f      	bne.n	8008a70 <SPI_WaitFifoStateUntilTimeout+0x5c>
  while ((hspi->Instance->SR & Fifo) != State)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	689c      	ldr	r4, [r3, #8]
 8008a54:	ea04 0c05 	and.w	ip, r4, r5
 8008a58:	45b4      	cmp	ip, r6
 8008a5a:	d047      	beq.n	8008aec <SPI_WaitFifoStateUntilTimeout+0xd8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a5c:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8008a60:	d1f3      	bne.n	8008a4a <SPI_WaitFifoStateUntilTimeout+0x36>
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	d1f1      	bne.n	8008a4a <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008a66:	7b1b      	ldrb	r3, [r3, #12]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	9301      	str	r3, [sp, #4]
      UNUSED(tmpreg);
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	e7ec      	b.n	8008a4a <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a70:	f7fd ffe8 	bl	8006a44 <HAL_GetTick>
 8008a74:	eba0 000a 	sub.w	r0, r0, sl
 8008a78:	4548      	cmp	r0, r9
 8008a7a:	d20a      	bcs.n	8008a92 <SPI_WaitFifoStateUntilTimeout+0x7e>
 8008a7c:	f1b9 0f00 	cmp.w	r9, #0
 8008a80:	d007      	beq.n	8008a92 <SPI_WaitFifoStateUntilTimeout+0x7e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008a82:	9a00      	ldr	r2, [sp, #0]
 8008a84:	b102      	cbz	r2, 8008a88 <SPI_WaitFifoStateUntilTimeout+0x74>
 8008a86:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8008a88:	9b00      	ldr	r3, [sp, #0]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	4691      	mov	r9, r2
 8008a90:	e7de      	b.n	8008a50 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	6853      	ldr	r3, [r2, #4]
 8008a96:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008a9a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aa2:	d00b      	beq.n	8008abc <SPI_WaitFifoStateUntilTimeout+0xa8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aaa:	d014      	beq.n	8008ad6 <SPI_WaitFifoStateUntilTimeout+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008ab8:	2003      	movs	r0, #3
 8008aba:	e018      	b.n	8008aee <SPI_WaitFifoStateUntilTimeout+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ac2:	d002      	beq.n	8008aca <SPI_WaitFifoStateUntilTimeout+0xb6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac8:	d1ec      	bne.n	8008aa4 <SPI_WaitFifoStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	6813      	ldr	r3, [r2, #0]
 8008ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	e7e6      	b.n	8008aa4 <SPI_WaitFifoStateUntilTimeout+0x90>
          SPI_RESET_CRC(hspi);
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	6813      	ldr	r3, [r2, #0]
 8008ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	e7df      	b.n	8008aac <SPI_WaitFifoStateUntilTimeout+0x98>
    }
  }

  return HAL_OK;
 8008aec:	2000      	movs	r0, #0
}
 8008aee:	b002      	add	sp, #8
 8008af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af4:	2000007c 	.word	0x2000007c

08008af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b02:	9200      	str	r2, [sp, #0]
 8008b04:	460b      	mov	r3, r1
 8008b06:	2200      	movs	r2, #0
 8008b08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008b0c:	f7ff ff82 	bl	8008a14 <SPI_WaitFifoStateUntilTimeout>
 8008b10:	b9b0      	cbnz	r0, 8008b40 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b12:	9600      	str	r6, [sp, #0]
 8008b14:	462b      	mov	r3, r5
 8008b16:	2200      	movs	r2, #0
 8008b18:	2180      	movs	r1, #128	; 0x80
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7ff ff12 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8008b20:	b9a8      	cbnz	r0, 8008b4e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b22:	9600      	str	r6, [sp, #0]
 8008b24:	462b      	mov	r3, r5
 8008b26:	2200      	movs	r2, #0
 8008b28:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7ff ff71 	bl	8008a14 <SPI_WaitFifoStateUntilTimeout>
 8008b32:	b150      	cbz	r0, 8008b4a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008b36:	f043 0320 	orr.w	r3, r3, #32
 8008b3a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b3c:	2003      	movs	r0, #3
 8008b3e:	e004      	b.n	8008b4a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b40:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008b42:	f043 0320 	orr.w	r3, r3, #32
 8008b46:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b48:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8008b4a:	b002      	add	sp, #8
 8008b4c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008b50:	f043 0320 	orr.w	r3, r3, #32
 8008b54:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b56:	2003      	movs	r0, #3
 8008b58:	e7f7      	b.n	8008b4a <SPI_EndRxTxTransaction+0x52>

08008b5a <HAL_SPI_MspInit>:
}
 8008b5a:	4770      	bx	lr

08008b5c <HAL_SPI_Init>:
  if (hspi == NULL)
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f000 8089 	beq.w	8008c74 <HAL_SPI_Init+0x118>
{
 8008b62:	b510      	push	{r4, lr}
 8008b64:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b68:	b933      	cbnz	r3, 8008b78 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b6a:	6843      	ldr	r3, [r0, #4]
 8008b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b70:	d005      	beq.n	8008b7e <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61c3      	str	r3, [r0, #28]
 8008b76:	e002      	b.n	8008b7e <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b7c:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b7e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d055      	beq.n	8008c32 <HAL_SPI_Init+0xd6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008b86:	2302      	movs	r3, #2
 8008b88:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b94:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b96:	68e3      	ldr	r3, [r4, #12]
 8008b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b9c:	d94f      	bls.n	8008c3e <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b9e:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ba0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008ba4:	d004      	beq.n	8008bb0 <HAL_SPI_Init+0x54>
 8008ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008baa:	d001      	beq.n	8008bb0 <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bb0:	6863      	ldr	r3, [r4, #4]
 8008bb2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008bb6:	68a1      	ldr	r1, [r4, #8]
 8008bb8:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8008bbc:	430b      	orrs	r3, r1
 8008bbe:	6921      	ldr	r1, [r4, #16]
 8008bc0:	f001 0102 	and.w	r1, r1, #2
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	6961      	ldr	r1, [r4, #20]
 8008bc8:	f001 0101 	and.w	r1, r1, #1
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	69a1      	ldr	r1, [r4, #24]
 8008bd0:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	69e1      	ldr	r1, [r4, #28]
 8008bd8:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6a21      	ldr	r1, [r4, #32]
 8008be0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008be4:	430b      	orrs	r3, r1
 8008be6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008be8:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bf8:	d024      	beq.n	8008c44 <HAL_SPI_Init+0xe8>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008bfa:	8b63      	ldrh	r3, [r4, #26]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c02:	f001 0110 	and.w	r1, r1, #16
 8008c06:	430b      	orrs	r3, r1
 8008c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c0a:	f001 0108 	and.w	r1, r1, #8
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	68e1      	ldr	r1, [r4, #12]
 8008c12:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8008c16:	430b      	orrs	r3, r1
 8008c18:	6821      	ldr	r1, [r4, #0]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c24:	d022      	beq.n	8008c6c <HAL_SPI_Init+0x110>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c26:	2000      	movs	r0, #0
 8008c28:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8008c30:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008c32:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008c36:	4620      	mov	r0, r4
 8008c38:	f7ff ff8f 	bl	8008b5a <HAL_SPI_MspInit>
 8008c3c:	e7a3      	b.n	8008b86 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c42:	e7ad      	b.n	8008ba0 <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c46:	b92b      	cbnz	r3, 8008c54 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c48:	68e3      	ldr	r3, [r4, #12]
 8008c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c4e:	d90a      	bls.n	8008c66 <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c50:	2302      	movs	r3, #2
 8008c52:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008c54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d1cf      	bne.n	8008bfa <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008c5a:	6821      	ldr	r1, [r4, #0]
 8008c5c:	680b      	ldr	r3, [r1, #0]
 8008c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c62:	600b      	str	r3, [r1, #0]
 8008c64:	e7c9      	b.n	8008bfa <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c66:	2301      	movs	r3, #1
 8008c68:	6323      	str	r3, [r4, #48]	; 0x30
 8008c6a:	e7f3      	b.n	8008c54 <HAL_SPI_Init+0xf8>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8008c70:	611a      	str	r2, [r3, #16]
 8008c72:	e7d8      	b.n	8008c26 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8008c74:	2001      	movs	r0, #1
}
 8008c76:	4770      	bx	lr

08008c78 <HAL_SPI_Transmit>:
{
 8008c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8008c80:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	f000 810f 	beq.w	8008ea8 <HAL_SPI_Transmit+0x230>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4688      	mov	r8, r1
 8008c8e:	4691      	mov	r9, r2
 8008c90:	2301      	movs	r3, #1
 8008c92:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008c96:	f7fd fed5 	bl	8006a44 <HAL_GetTick>
 8008c9a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008c9c:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8008ca0:	b2f6      	uxtb	r6, r6
 8008ca2:	2e01      	cmp	r6, #1
 8008ca4:	f040 80ed 	bne.w	8008e82 <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 8008ca8:	f1b8 0f00 	cmp.w	r8, #0
 8008cac:	f000 80ea 	beq.w	8008e84 <HAL_SPI_Transmit+0x20c>
 8008cb0:	f1b9 0f00 	cmp.w	r9, #0
 8008cb4:	f000 80e6 	beq.w	8008e84 <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cc2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008cc6:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008cca:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cce:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008cd0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008cd4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008cd8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008cda:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cdc:	68a3      	ldr	r3, [r4, #8]
 8008cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce2:	d022      	beq.n	8008d2a <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ce4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cea:	d029      	beq.n	8008d40 <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008cf4:	d103      	bne.n	8008cfe <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cfc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cfe:	68e3      	ldr	r3, [r4, #12]
 8008d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d04:	d94d      	bls.n	8008da2 <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d06:	6863      	ldr	r3, [r4, #4]
 8008d08:	b113      	cbz	r3, 8008d10 <HAL_SPI_Transmit+0x98>
 8008d0a:	f1b9 0f01 	cmp.w	r9, #1
 8008d0e:	d12e      	bne.n	8008d6e <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	8812      	ldrh	r2, [r2, #0]
 8008d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008d1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008d28:	e021      	b.n	8008d6e <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	6813      	ldr	r3, [r2, #0]
 8008d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d32:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	6813      	ldr	r3, [r2, #0]
 8008d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	e7d1      	b.n	8008ce4 <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	6813      	ldr	r3, [r2, #0]
 8008d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e7ca      	b.n	8008cec <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d56:	f7fd fe75 	bl	8006a44 <HAL_GetTick>
 8008d5a:	1bc0      	subs	r0, r0, r7
 8008d5c:	42a8      	cmp	r0, r5
 8008d5e:	d303      	bcc.n	8008d68 <HAL_SPI_Transmit+0xf0>
 8008d60:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008d64:	f040 8098 	bne.w	8008e98 <HAL_SPI_Transmit+0x220>
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	f000 8097 	beq.w	8008e9c <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 8008d6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d066      	beq.n	8008e44 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	f012 0f02 	tst.w	r2, #2
 8008d7e:	d0ea      	beq.n	8008d56 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d82:	8812      	ldrh	r2, [r2, #0]
 8008d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d88:	3302      	adds	r3, #2
 8008d8a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008d8c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8008d90:	fa1f fc8c 	uxth.w	ip, ip
 8008d94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d98:	fa1f fc8c 	uxth.w	ip, ip
 8008d9c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8008da0:	e7e5      	b.n	8008d6e <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	b113      	cbz	r3, 8008dac <HAL_SPI_Transmit+0x134>
 8008da6:	f1b9 0f01 	cmp.w	r9, #1
 8008daa:	d133      	bne.n	8008e14 <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8008dac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d90c      	bls.n	8008dce <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008db4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	8812      	ldrh	r2, [r2, #0]
 8008dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dbe:	3302      	adds	r3, #2
 8008dc0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008dc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b02      	subs	r3, #2
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008dcc:	e022      	b.n	8008e14 <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	7812      	ldrb	r2, [r2, #0]
 8008dd4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8008dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dd8:	3301      	adds	r3, #1
 8008dda:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008ddc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008de6:	e015      	b.n	8008e14 <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8008dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008df0:	3301      	adds	r3, #1
 8008df2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008df4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008dfe:	e009      	b.n	8008e14 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e00:	f7fd fe20 	bl	8006a44 <HAL_GetTick>
 8008e04:	1bc0      	subs	r0, r0, r7
 8008e06:	42a8      	cmp	r0, r5
 8008e08:	d302      	bcc.n	8008e10 <HAL_SPI_Transmit+0x198>
 8008e0a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008e0e:	d147      	bne.n	8008ea0 <HAL_SPI_Transmit+0x228>
 8008e10:	2d00      	cmp	r5, #0
 8008e12:	d047      	beq.n	8008ea4 <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 8008e14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	b1a3      	cbz	r3, 8008e44 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e1a:	6822      	ldr	r2, [r4, #0]
 8008e1c:	6893      	ldr	r3, [r2, #8]
 8008e1e:	f013 0f02 	tst.w	r3, #2
 8008e22:	d0ed      	beq.n	8008e00 <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 8008e24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d9dd      	bls.n	8008de8 <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e34:	3302      	adds	r3, #2
 8008e36:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b02      	subs	r3, #2
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008e42:	e7e7      	b.n	8008e14 <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e4a:	d014      	beq.n	8008e76 <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e4c:	463a      	mov	r2, r7
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff fe51 	bl	8008af8 <SPI_EndRxTxTransaction>
 8008e56:	b108      	cbz	r0, 8008e5c <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e58:	2320      	movs	r3, #32
 8008e5a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e5c:	68a3      	ldr	r3, [r4, #8]
 8008e5e:	b933      	cbnz	r3, 8008e6e <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	9201      	str	r2, [sp, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	9301      	str	r3, [sp, #4]
 8008e6c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008e70:	b943      	cbnz	r3, 8008e84 <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e72:	2600      	movs	r6, #0
 8008e74:	e006      	b.n	8008e84 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	6813      	ldr	r3, [r2, #0]
 8008e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	e7e4      	b.n	8008e4c <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 8008e82:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8008e90:	4630      	mov	r0, r6
 8008e92:	b003      	add	sp, #12
 8008e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8008e98:	2603      	movs	r6, #3
 8008e9a:	e7f3      	b.n	8008e84 <HAL_SPI_Transmit+0x20c>
 8008e9c:	2603      	movs	r6, #3
 8008e9e:	e7f1      	b.n	8008e84 <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 8008ea0:	2603      	movs	r6, #3
 8008ea2:	e7ef      	b.n	8008e84 <HAL_SPI_Transmit+0x20c>
 8008ea4:	2603      	movs	r6, #3
 8008ea6:	e7ed      	b.n	8008e84 <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 8008ea8:	2602      	movs	r6, #2
 8008eaa:	e7f1      	b.n	8008e90 <HAL_SPI_Transmit+0x218>

08008eac <HAL_SPI_TransmitReceive>:
{
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	461f      	mov	r7, r3
 8008eb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  __IO uint32_t tmpreg = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 8008eba:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	f000 81f7 	beq.w	80092b2 <HAL_SPI_TransmitReceive+0x406>
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	468a      	mov	sl, r1
 8008ec8:	4693      	mov	fp, r2
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008ed0:	f7fd fdb8 	bl	8006a44 <HAL_GetTick>
 8008ed4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8008ed6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008eda:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8008edc:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8008ede:	6822      	ldr	r2, [r4, #0]
 8008ee0:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8008ee4:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d00a      	beq.n	8008f02 <HAL_SPI_TransmitReceive+0x56>
 8008eec:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8008ef0:	f040 81c4 	bne.w	800927c <HAL_SPI_TransmitReceive+0x3d0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ef4:	68a1      	ldr	r1, [r4, #8]
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	f040 81cb 	bne.w	8009292 <HAL_SPI_TransmitReceive+0x3e6>
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	f040 81ca 	bne.w	8009296 <HAL_SPI_TransmitReceive+0x3ea>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f02:	f1ba 0f00 	cmp.w	sl, #0
 8008f06:	f000 81c8 	beq.w	800929a <HAL_SPI_TransmitReceive+0x3ee>
 8008f0a:	f1bb 0f00 	cmp.w	fp, #0
 8008f0e:	f000 81c6 	beq.w	800929e <HAL_SPI_TransmitReceive+0x3f2>
 8008f12:	2f00      	cmp	r7, #0
 8008f14:	f000 81c5 	beq.w	80092a2 <HAL_SPI_TransmitReceive+0x3f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f18:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d002      	beq.n	8008f28 <HAL_SPI_TransmitReceive+0x7c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f22:	2305      	movs	r3, #5
 8008f24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f2c:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008f30:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008f34:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f38:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008f3c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008f3e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8008f40:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008f42:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f4a:	d029      	beq.n	8008fa0 <HAL_SPI_TransmitReceive+0xf4>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008f4c:	68e3      	ldr	r3, [r4, #12]
 8008f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f52:	d801      	bhi.n	8008f58 <HAL_SPI_TransmitReceive+0xac>
 8008f54:	2f01      	cmp	r7, #1
 8008f56:	d92d      	bls.n	8008fb4 <HAL_SPI_TransmitReceive+0x108>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	6853      	ldr	r3, [r2, #4]
 8008f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f60:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008f6a:	d103      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0xc8>
    __HAL_SPI_ENABLE(hspi);
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f72:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f74:	68e3      	ldr	r3, [r4, #12]
 8008f76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f7a:	d97d      	bls.n	8009078 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f7c:	6863      	ldr	r3, [r4, #4]
 8008f7e:	b10b      	cbz	r3, 8008f84 <HAL_SPI_TransmitReceive+0xd8>
 8008f80:	2f01      	cmp	r7, #1
 8008f82:	d10b      	bne.n	8008f9c <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	8812      	ldrh	r2, [r2, #0]
 8008f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f8e:	3302      	adds	r3, #2
 8008f90:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008f92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008f9c:	2701      	movs	r7, #1
 8008f9e:	e042      	b.n	8009026 <HAL_SPI_TransmitReceive+0x17a>
    SPI_RESET_CRC(hspi);
 8008fa0:	6813      	ldr	r3, [r2, #0]
 8008fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	6813      	ldr	r3, [r2, #0]
 8008fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	e7cb      	b.n	8008f4c <HAL_SPI_TransmitReceive+0xa0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	6853      	ldr	r3, [r2, #4]
 8008fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fbc:	6053      	str	r3, [r2, #4]
 8008fbe:	e7d0      	b.n	8008f62 <HAL_SPI_TransmitReceive+0xb6>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8008fc0:	f018 0f04 	tst.w	r8, #4
 8008fc4:	d107      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x12a>
 8008fc6:	f019 0f08 	tst.w	r9, #8
 8008fca:	d004      	beq.n	8008fd6 <HAL_SPI_TransmitReceive+0x12a>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	6813      	ldr	r3, [r2, #0]
 8008fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fd4:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	6813      	ldr	r3, [r2, #0]
 8008fda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fde:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8008fe0:	2700      	movs	r7, #0
 8008fe2:	e000      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x13a>
 8008fe4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	f012 0f01 	tst.w	r2, #1
 8008fee:	d011      	beq.n	8009014 <HAL_SPI_TransmitReceive+0x168>
 8008ff0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8008ff4:	b292      	uxth	r2, r2
 8008ff6:	b16a      	cbz	r2, 8009014 <HAL_SPI_TransmitReceive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ffc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009000:	3302      	adds	r3, #2
 8009002:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009004:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29b      	uxth	r3, r3
 800900e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8009012:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009014:	f7fd fd16 	bl	8006a44 <HAL_GetTick>
 8009018:	1b80      	subs	r0, r0, r6
 800901a:	42a8      	cmp	r0, r5
 800901c:	d303      	bcc.n	8009026 <HAL_SPI_TransmitReceive+0x17a>
 800901e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009022:	f040 8140 	bne.w	80092a6 <HAL_SPI_TransmitReceive+0x3fa>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009026:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009028:	b29b      	uxth	r3, r3
 800902a:	b92b      	cbnz	r3, 8009038 <HAL_SPI_TransmitReceive+0x18c>
 800902c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009030:	b29b      	uxth	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80d1 	beq.w	80091da <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	f012 0f02 	tst.w	r2, #2
 8009040:	d0d1      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0x13a>
 8009042:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009044:	b292      	uxth	r2, r2
 8009046:	2a00      	cmp	r2, #0
 8009048:	d0cd      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0x13a>
 800904a:	2f00      	cmp	r7, #0
 800904c:	d0cb      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800904e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009050:	8812      	ldrh	r2, [r2, #0]
 8009052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009056:	3302      	adds	r3, #2
 8009058:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800905a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b01      	subs	r3, #1
 8009060:	b29b      	uxth	r3, r3
 8009062:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009064:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009066:	b29b      	uxth	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1bb      	bne.n	8008fe4 <HAL_SPI_TransmitReceive+0x138>
 800906c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800906e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009072:	d0a5      	beq.n	8008fc0 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8009074:	2700      	movs	r7, #0
 8009076:	e7b6      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009078:	6863      	ldr	r3, [r4, #4]
 800907a:	b10b      	cbz	r3, 8009080 <HAL_SPI_TransmitReceive+0x1d4>
 800907c:	2f01      	cmp	r7, #1
 800907e:	d10f      	bne.n	80090a0 <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 8009080:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009082:	b29b      	uxth	r3, r3
 8009084:	2b01      	cmp	r3, #1
 8009086:	d90d      	bls.n	80090a4 <HAL_SPI_TransmitReceive+0x1f8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009088:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	8812      	ldrh	r2, [r2, #0]
 800908e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009090:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009092:	3302      	adds	r3, #2
 8009094:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009096:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009098:	b29b      	uxth	r3, r3
 800909a:	3b02      	subs	r3, #2
 800909c:	b29b      	uxth	r3, r3
 800909e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80090a0:	2701      	movs	r7, #1
 80090a2:	e065      	b.n	8009170 <HAL_SPI_TransmitReceive+0x2c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	7812      	ldrb	r2, [r2, #0]
 80090aa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80090ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090ae:	3301      	adds	r3, #1
 80090b0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80090b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80090bc:	e7f0      	b.n	80090a0 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->TxXferCount > 1U)
 80090be:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80090c0:	b292      	uxth	r2, r2
 80090c2:	2a01      	cmp	r2, #1
 80090c4:	d913      	bls.n	80090ee <HAL_SPI_TransmitReceive+0x242>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80090c8:	8812      	ldrh	r2, [r2, #0]
 80090ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090ce:	3302      	adds	r3, #2
 80090d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80090d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	3b02      	subs	r3, #2
 80090d8:	b29b      	uxth	r3, r3
 80090da:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80090dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090de:	b29b      	uxth	r3, r3
 80090e0:	bb1b      	cbnz	r3, 800912a <HAL_SPI_TransmitReceive+0x27e>
 80090e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e8:	d00d      	beq.n	8009106 <HAL_SPI_TransmitReceive+0x25a>
        txallowed = 0U;
 80090ea:	2700      	movs	r7, #0
 80090ec:	e052      	b.n	8009194 <HAL_SPI_TransmitReceive+0x2e8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80090f0:	7812      	ldrb	r2, [r2, #0]
 80090f2:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80090f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090f6:	3301      	adds	r3, #1
 80090f8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80090fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29b      	uxth	r3, r3
 8009102:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009104:	e7ea      	b.n	80090dc <HAL_SPI_TransmitReceive+0x230>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009106:	f018 0f04 	tst.w	r8, #4
 800910a:	d107      	bne.n	800911c <HAL_SPI_TransmitReceive+0x270>
 800910c:	f019 0f08 	tst.w	r9, #8
 8009110:	d004      	beq.n	800911c <HAL_SPI_TransmitReceive+0x270>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	6813      	ldr	r3, [r2, #0]
 8009116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800911a:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800911c:	6822      	ldr	r2, [r4, #0]
 800911e:	6813      	ldr	r3, [r2, #0]
 8009120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009124:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8009126:	2700      	movs	r7, #0
 8009128:	e034      	b.n	8009194 <HAL_SPI_TransmitReceive+0x2e8>
 800912a:	2700      	movs	r7, #0
 800912c:	e032      	b.n	8009194 <HAL_SPI_TransmitReceive+0x2e8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	6853      	ldr	r3, [r2, #4]
 8009132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009136:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8009138:	2701      	movs	r7, #1
 800913a:	e00d      	b.n	8009158 <HAL_SPI_TransmitReceive+0x2ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800913c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800913e:	7b1b      	ldrb	r3, [r3, #12]
 8009140:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8009142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009144:	3301      	adds	r3, #1
 8009146:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8009148:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800914c:	b29b      	uxth	r3, r3
 800914e:	3b01      	subs	r3, #1
 8009150:	b29b      	uxth	r3, r3
 8009152:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8009156:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009158:	f7fd fc74 	bl	8006a44 <HAL_GetTick>
 800915c:	1b80      	subs	r0, r0, r6
 800915e:	42a8      	cmp	r0, r5
 8009160:	d303      	bcc.n	800916a <HAL_SPI_TransmitReceive+0x2be>
 8009162:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009166:	f040 80a0 	bne.w	80092aa <HAL_SPI_TransmitReceive+0x3fe>
 800916a:	2d00      	cmp	r5, #0
 800916c:	f000 809f 	beq.w	80092ae <HAL_SPI_TransmitReceive+0x402>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009170:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009172:	b29b      	uxth	r3, r3
 8009174:	b923      	cbnz	r3, 8009180 <HAL_SPI_TransmitReceive+0x2d4>
 8009176:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800917a:	b29b      	uxth	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02c      	beq.n	80091da <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	f012 0f02 	tst.w	r2, #2
 8009188:	d004      	beq.n	8009194 <HAL_SPI_TransmitReceive+0x2e8>
 800918a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800918c:	b292      	uxth	r2, r2
 800918e:	b10a      	cbz	r2, 8009194 <HAL_SPI_TransmitReceive+0x2e8>
 8009190:	2f00      	cmp	r7, #0
 8009192:	d194      	bne.n	80090be <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	f012 0f01 	tst.w	r2, #1
 800919c:	d0dc      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x2ac>
 800919e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80091a2:	b292      	uxth	r2, r2
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	d0d7      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x2ac>
        if (hspi->RxXferCount > 1U)
 80091a8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80091ac:	b292      	uxth	r2, r2
 80091ae:	2a01      	cmp	r2, #1
 80091b0:	d9c4      	bls.n	800913c <HAL_SPI_TransmitReceive+0x290>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80091b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091ba:	3302      	adds	r3, #2
 80091bc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80091be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b02      	subs	r3, #2
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80091cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d9ab      	bls.n	800912e <HAL_SPI_TransmitReceive+0x282>
        txallowed = 1U;
 80091d6:	2701      	movs	r7, #1
 80091d8:	e7be      	b.n	8009158 <HAL_SPI_TransmitReceive+0x2ac>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091e0:	d017      	beq.n	8009212 <HAL_SPI_TransmitReceive+0x366>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	f012 0f10 	tst.w	r2, #16
 80091ea:	d045      	beq.n	8009278 <HAL_SPI_TransmitReceive+0x3cc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80091ec:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80091ee:	f042 0202 	orr.w	r2, r2, #2
 80091f2:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80091f4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80091f8:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 80091fa:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091fc:	4632      	mov	r2, r6
 80091fe:	4629      	mov	r1, r5
 8009200:	4620      	mov	r0, r4
 8009202:	f7ff fc79 	bl	8008af8 <SPI_EndRxTxTransaction>
 8009206:	2800      	cmp	r0, #0
 8009208:	d039      	beq.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800920a:	2320      	movs	r3, #32
 800920c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800920e:	2701      	movs	r7, #1
 8009210:	e035      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009212:	9600      	str	r6, [sp, #0]
 8009214:	462b      	mov	r3, r5
 8009216:	2201      	movs	r2, #1
 8009218:	4611      	mov	r1, r2
 800921a:	4620      	mov	r0, r4
 800921c:	f7ff fb92 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8009220:	b9c8      	cbnz	r0, 8009256 <HAL_SPI_TransmitReceive+0x3aa>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009222:	68e3      	ldr	r3, [r4, #12]
 8009224:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009228:	d01b      	beq.n	8009262 <HAL_SPI_TransmitReceive+0x3b6>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	7b1b      	ldrb	r3, [r3, #12]
 800922e:	b2db      	uxtb	r3, r3
 8009230:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8009232:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009236:	2b02      	cmp	r3, #2
 8009238:	d1d3      	bne.n	80091e2 <HAL_SPI_TransmitReceive+0x336>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800923a:	9600      	str	r6, [sp, #0]
 800923c:	462b      	mov	r3, r5
 800923e:	2201      	movs	r2, #1
 8009240:	4611      	mov	r1, r2
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff fb7e 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8009248:	b980      	cbnz	r0, 800926c <HAL_SPI_TransmitReceive+0x3c0>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	7b1b      	ldrb	r3, [r3, #12]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	e7c5      	b.n	80091e2 <HAL_SPI_TransmitReceive+0x336>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009256:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009258:	f043 0302 	orr.w	r3, r3, #2
 800925c:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800925e:	2703      	movs	r7, #3
      goto error;
 8009260:	e00d      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
      tmpreg = READ_REG(hspi->Instance->DR);
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	e7ba      	b.n	80091e2 <HAL_SPI_TransmitReceive+0x336>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800926c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800926e:	f043 0302 	orr.w	r3, r3, #2
 8009272:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009274:	2703      	movs	r7, #3
          goto error;
 8009276:	e002      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009278:	2700      	movs	r7, #0
 800927a:	e7bf      	b.n	80091fc <HAL_SPI_TransmitReceive+0x350>
    errorcode = HAL_BUSY;
 800927c:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 800927e:	2301      	movs	r3, #1
 8009280:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009284:	2300      	movs	r3, #0
 8009286:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800928a:	4638      	mov	r0, r7
 800928c:	b005      	add	sp, #20
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 8009292:	2702      	movs	r7, #2
 8009294:	e7f3      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
 8009296:	2702      	movs	r7, #2
 8009298:	e7f1      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
    errorcode = HAL_ERROR;
 800929a:	2701      	movs	r7, #1
 800929c:	e7ef      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
 800929e:	2701      	movs	r7, #1
 80092a0:	e7ed      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
 80092a2:	2701      	movs	r7, #1
 80092a4:	e7eb      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 80092a6:	2703      	movs	r7, #3
 80092a8:	e7e9      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 80092aa:	2703      	movs	r7, #3
 80092ac:	e7e7      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
 80092ae:	2703      	movs	r7, #3
 80092b0:	e7e5      	b.n	800927e <HAL_SPI_TransmitReceive+0x3d2>
  __HAL_LOCK(hspi);
 80092b2:	2702      	movs	r7, #2
 80092b4:	e7e9      	b.n	800928a <HAL_SPI_TransmitReceive+0x3de>

080092b6 <HAL_SPI_GetState>:
  return hspi->State;
 80092b6:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80092ba:	4770      	bx	lr

080092bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092bc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092be:	6a03      	ldr	r3, [r0, #32]
 80092c0:	f023 0301 	bic.w	r3, r3, #1
 80092c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092c6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ca:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092d4:	680d      	ldr	r5, [r1, #0]
 80092d6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092d8:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092dc:	688b      	ldr	r3, [r1, #8]
 80092de:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092e0:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <TIM_OC1_SetConfig+0x98>)
 80092e2:	4290      	cmp	r0, r2
 80092e4:	d00f      	beq.n	8009306 <TIM_OC1_SetConfig+0x4a>
 80092e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ea:	4290      	cmp	r0, r2
 80092ec:	d00b      	beq.n	8009306 <TIM_OC1_SetConfig+0x4a>
 80092ee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80092f2:	4290      	cmp	r0, r2
 80092f4:	d007      	beq.n	8009306 <TIM_OC1_SetConfig+0x4a>
 80092f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092fa:	4290      	cmp	r0, r2
 80092fc:	d003      	beq.n	8009306 <TIM_OC1_SetConfig+0x4a>
 80092fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009302:	4290      	cmp	r0, r2
 8009304:	d105      	bne.n	8009312 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009306:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800930a:	68ca      	ldr	r2, [r1, #12]
 800930c:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800930e:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009312:	4a10      	ldr	r2, [pc, #64]	; (8009354 <TIM_OC1_SetConfig+0x98>)
 8009314:	4290      	cmp	r0, r2
 8009316:	d00f      	beq.n	8009338 <TIM_OC1_SetConfig+0x7c>
 8009318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800931c:	4290      	cmp	r0, r2
 800931e:	d00b      	beq.n	8009338 <TIM_OC1_SetConfig+0x7c>
 8009320:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009324:	4290      	cmp	r0, r2
 8009326:	d007      	beq.n	8009338 <TIM_OC1_SetConfig+0x7c>
 8009328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800932c:	4290      	cmp	r0, r2
 800932e:	d003      	beq.n	8009338 <TIM_OC1_SetConfig+0x7c>
 8009330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009334:	4290      	cmp	r0, r2
 8009336:	d105      	bne.n	8009344 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009338:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800933c:	694a      	ldr	r2, [r1, #20]
 800933e:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009340:	698c      	ldr	r4, [r1, #24]
 8009342:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009344:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009346:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009348:	684a      	ldr	r2, [r1, #4]
 800934a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934c:	6203      	str	r3, [r0, #32]
}
 800934e:	bc30      	pop	{r4, r5}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	40012c00 	.word	0x40012c00

08009358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009358:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800935a:	6a03      	ldr	r3, [r0, #32]
 800935c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009360:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009362:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009364:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009366:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009368:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800936c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009370:	680d      	ldr	r5, [r1, #0]
 8009372:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009378:	688a      	ldr	r2, [r1, #8]
 800937a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800937e:	4a18      	ldr	r2, [pc, #96]	; (80093e0 <TIM_OC3_SetConfig+0x88>)
 8009380:	4290      	cmp	r0, r2
 8009382:	d003      	beq.n	800938c <TIM_OC3_SetConfig+0x34>
 8009384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009388:	4290      	cmp	r0, r2
 800938a:	d106      	bne.n	800939a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800938c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009390:	68ca      	ldr	r2, [r1, #12]
 8009392:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800939a:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <TIM_OC3_SetConfig+0x88>)
 800939c:	4290      	cmp	r0, r2
 800939e:	d00f      	beq.n	80093c0 <TIM_OC3_SetConfig+0x68>
 80093a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093a4:	4290      	cmp	r0, r2
 80093a6:	d00b      	beq.n	80093c0 <TIM_OC3_SetConfig+0x68>
 80093a8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80093ac:	4290      	cmp	r0, r2
 80093ae:	d007      	beq.n	80093c0 <TIM_OC3_SetConfig+0x68>
 80093b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093b4:	4290      	cmp	r0, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_OC3_SetConfig+0x68>
 80093b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093bc:	4290      	cmp	r0, r2
 80093be:	d107      	bne.n	80093d0 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093c0:	f424 5240 	bic.w	r2, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093c4:	694c      	ldr	r4, [r1, #20]
 80093c6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093ca:	698c      	ldr	r4, [r1, #24]
 80093cc:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093d2:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093d4:	684a      	ldr	r2, [r1, #4]
 80093d6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d8:	6203      	str	r3, [r0, #32]
}
 80093da:	bc30      	pop	{r4, r5}
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	40012c00 	.word	0x40012c00

080093e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093e6:	6a03      	ldr	r3, [r0, #32]
 80093e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80093f8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093fc:	680d      	ldr	r5, [r1, #0]
 80093fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009406:	688d      	ldr	r5, [r1, #8]
 8009408:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800940c:	4d0f      	ldr	r5, [pc, #60]	; (800944c <TIM_OC4_SetConfig+0x68>)
 800940e:	42a8      	cmp	r0, r5
 8009410:	d00f      	beq.n	8009432 <TIM_OC4_SetConfig+0x4e>
 8009412:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009416:	42a8      	cmp	r0, r5
 8009418:	d00b      	beq.n	8009432 <TIM_OC4_SetConfig+0x4e>
 800941a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800941e:	42a8      	cmp	r0, r5
 8009420:	d007      	beq.n	8009432 <TIM_OC4_SetConfig+0x4e>
 8009422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009426:	42a8      	cmp	r0, r5
 8009428:	d003      	beq.n	8009432 <TIM_OC4_SetConfig+0x4e>
 800942a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800942e:	42a8      	cmp	r0, r5
 8009430:	d104      	bne.n	800943c <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009432:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009436:	694d      	ldr	r5, [r1, #20]
 8009438:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800943c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800943e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009440:	684a      	ldr	r2, [r1, #4]
 8009442:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009444:	6203      	str	r3, [r0, #32]
}
 8009446:	bc30      	pop	{r4, r5}
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40012c00 	.word	0x40012c00

08009450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009450:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009452:	6a03      	ldr	r3, [r0, #32]
 8009454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009458:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800945c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800945e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009460:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009464:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009468:	680d      	ldr	r5, [r1, #0]
 800946a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800946c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009470:	688a      	ldr	r2, [r1, #8]
 8009472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009476:	4a0f      	ldr	r2, [pc, #60]	; (80094b4 <TIM_OC5_SetConfig+0x64>)
 8009478:	4290      	cmp	r0, r2
 800947a:	d00f      	beq.n	800949c <TIM_OC5_SetConfig+0x4c>
 800947c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009480:	4290      	cmp	r0, r2
 8009482:	d00b      	beq.n	800949c <TIM_OC5_SetConfig+0x4c>
 8009484:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009488:	4290      	cmp	r0, r2
 800948a:	d007      	beq.n	800949c <TIM_OC5_SetConfig+0x4c>
 800948c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009490:	4290      	cmp	r0, r2
 8009492:	d003      	beq.n	800949c <TIM_OC5_SetConfig+0x4c>
 8009494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009498:	4290      	cmp	r0, r2
 800949a:	d104      	bne.n	80094a6 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800949c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80094a0:	694a      	ldr	r2, [r1, #20]
 80094a2:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094a8:	6545      	str	r5, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80094aa:	684a      	ldr	r2, [r1, #4]
 80094ac:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ae:	6203      	str	r3, [r0, #32]
}
 80094b0:	bc30      	pop	{r4, r5}
 80094b2:	4770      	bx	lr
 80094b4:	40012c00 	.word	0x40012c00

080094b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094ba:	6a03      	ldr	r3, [r0, #32]
 80094bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80094c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094c6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80094cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d0:	680d      	ldr	r5, [r1, #0]
 80094d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094da:	688d      	ldr	r5, [r1, #8]
 80094dc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094e0:	4d0f      	ldr	r5, [pc, #60]	; (8009520 <TIM_OC6_SetConfig+0x68>)
 80094e2:	42a8      	cmp	r0, r5
 80094e4:	d00f      	beq.n	8009506 <TIM_OC6_SetConfig+0x4e>
 80094e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80094ea:	42a8      	cmp	r0, r5
 80094ec:	d00b      	beq.n	8009506 <TIM_OC6_SetConfig+0x4e>
 80094ee:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80094f2:	42a8      	cmp	r0, r5
 80094f4:	d007      	beq.n	8009506 <TIM_OC6_SetConfig+0x4e>
 80094f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80094fa:	42a8      	cmp	r0, r5
 80094fc:	d003      	beq.n	8009506 <TIM_OC6_SetConfig+0x4e>
 80094fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009502:	42a8      	cmp	r0, r5
 8009504:	d104      	bne.n	8009510 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009506:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800950a:	694d      	ldr	r5, [r1, #20]
 800950c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009510:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009512:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009514:	684a      	ldr	r2, [r1, #4]
 8009516:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009518:	6203      	str	r3, [r0, #32]
}
 800951a:	bc30      	pop	{r4, r5}
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	40012c00 	.word	0x40012c00

08009524 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009524:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b01      	cmp	r3, #1
 800952c:	d136      	bne.n	800959c <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 800952e:	2302      	movs	r3, #2
 8009530:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009534:	6802      	ldr	r2, [r0, #0]
 8009536:	68d3      	ldr	r3, [r2, #12]
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800953e:	6803      	ldr	r3, [r0, #0]
 8009540:	4a19      	ldr	r2, [pc, #100]	; (80095a8 <HAL_TIM_Base_Start_IT+0x84>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d01c      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x5c>
 8009546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954a:	d019      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x5c>
 800954c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009550:	4293      	cmp	r3, r2
 8009552:	d015      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x5c>
 8009554:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009558:	4293      	cmp	r3, r2
 800955a:	d011      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x5c>
 800955c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009560:	4293      	cmp	r3, r2
 8009562:	d00d      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x5c>
 8009564:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009568:	4293      	cmp	r3, r2
 800956a:	d009      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x5c>
 800956c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009570:	4293      	cmp	r3, r2
 8009572:	d005      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800957c:	2000      	movs	r0, #0
 800957e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009580:	6899      	ldr	r1, [r3, #8]
 8009582:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <HAL_TIM_Base_Start_IT+0x88>)
 8009584:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009586:	2a06      	cmp	r2, #6
 8009588:	d00a      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x7c>
 800958a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800958e:	d009      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009598:	2000      	movs	r0, #0
 800959a:	4770      	bx	lr
    return HAL_ERROR;
 800959c:	2001      	movs	r0, #1
 800959e:	4770      	bx	lr
  return HAL_OK;
 80095a0:	2000      	movs	r0, #0
 80095a2:	4770      	bx	lr
 80095a4:	2000      	movs	r0, #0
}
 80095a6:	4770      	bx	lr
 80095a8:	40012c00 	.word	0x40012c00
 80095ac:	00010007 	.word	0x00010007

080095b0 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 80095b0:	290c      	cmp	r1, #12
 80095b2:	d814      	bhi.n	80095de <HAL_TIM_ReadCapturedValue+0x2e>
 80095b4:	e8df f001 	tbb	[pc, r1]
 80095b8:	13131307 	.word	0x13131307
 80095bc:	1313130a 	.word	0x1313130a
 80095c0:	1313130d 	.word	0x1313130d
 80095c4:	10          	.byte	0x10
 80095c5:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 80095c6:	6803      	ldr	r3, [r0, #0]
 80095c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 80095ca:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 80095cc:	6803      	ldr	r3, [r0, #0]
 80095ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 80095d0:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 80095d2:	6803      	ldr	r3, [r0, #0]
 80095d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 80095d6:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 80095d8:	6803      	ldr	r3, [r0, #0]
 80095da:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 80095dc:	4770      	bx	lr
  switch (Channel)
 80095de:	2000      	movs	r0, #0
}
 80095e0:	4770      	bx	lr

080095e2 <HAL_TIM_IC_CaptureCallback>:
}
 80095e2:	4770      	bx	lr

080095e4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80095e4:	4770      	bx	lr

080095e6 <HAL_TIM_TriggerCallback>:
}
 80095e6:	4770      	bx	lr

080095e8 <HAL_TIM_IRQHandler>:
{
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095ec:	6803      	ldr	r3, [r0, #0]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	f012 0f02 	tst.w	r2, #2
 80095f4:	d011      	beq.n	800961a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	f012 0f02 	tst.w	r2, #2
 80095fc:	d00d      	beq.n	800961a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095fe:	f06f 0202 	mvn.w	r2, #2
 8009602:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009604:	2301      	movs	r3, #1
 8009606:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009608:	6803      	ldr	r3, [r0, #0]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	f013 0f03 	tst.w	r3, #3
 8009610:	d079      	beq.n	8009706 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009612:	f7ff ffe6 	bl	80095e2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009616:	2300      	movs	r3, #0
 8009618:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	f012 0f04 	tst.w	r2, #4
 8009622:	d012      	beq.n	800964a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	f012 0f04 	tst.w	r2, #4
 800962a:	d00e      	beq.n	800964a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800962c:	f06f 0204 	mvn.w	r2, #4
 8009630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009632:	2302      	movs	r3, #2
 8009634:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800963e:	d068      	beq.n	8009712 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009640:	4620      	mov	r0, r4
 8009642:	f7ff ffce 	bl	80095e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009646:	2300      	movs	r3, #0
 8009648:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	f012 0f08 	tst.w	r2, #8
 8009652:	d012      	beq.n	800967a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	f012 0f08 	tst.w	r2, #8
 800965a:	d00e      	beq.n	800967a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800965c:	f06f 0208 	mvn.w	r2, #8
 8009660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009662:	2304      	movs	r3, #4
 8009664:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f013 0f03 	tst.w	r3, #3
 800966e:	d057      	beq.n	8009720 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8009670:	4620      	mov	r0, r4
 8009672:	f7ff ffb6 	bl	80095e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009676:	2300      	movs	r3, #0
 8009678:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	691a      	ldr	r2, [r3, #16]
 800967e:	f012 0f10 	tst.w	r2, #16
 8009682:	d012      	beq.n	80096aa <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	f012 0f10 	tst.w	r2, #16
 800968a:	d00e      	beq.n	80096aa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800968c:	f06f 0210 	mvn.w	r2, #16
 8009690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009692:	2308      	movs	r3, #8
 8009694:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800969e:	d046      	beq.n	800972e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7ff ff9e 	bl	80095e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a6:	2300      	movs	r3, #0
 80096a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	f012 0f01 	tst.w	r2, #1
 80096b2:	d003      	beq.n	80096bc <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	f012 0f01 	tst.w	r2, #1
 80096ba:	d13f      	bne.n	800973c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	691a      	ldr	r2, [r3, #16]
 80096c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096c4:	d003      	beq.n	80096ce <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096cc:	d13d      	bne.n	800974a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	691a      	ldr	r2, [r3, #16]
 80096d2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80096d6:	d003      	beq.n	80096e0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096d8:	68da      	ldr	r2, [r3, #12]
 80096da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096de:	d13b      	bne.n	8009758 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80096e8:	d003      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80096f0:	d139      	bne.n	8009766 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	691a      	ldr	r2, [r3, #16]
 80096f6:	f012 0f20 	tst.w	r2, #32
 80096fa:	d003      	beq.n	8009704 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	f012 0f20 	tst.w	r2, #32
 8009702:	d137      	bne.n	8009774 <HAL_TIM_IRQHandler+0x18c>
}
 8009704:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009706:	f7fc f87b 	bl	8005800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800970a:	4620      	mov	r0, r4
 800970c:	f7ff ff6a 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009710:	e781      	b.n	8009616 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009712:	4620      	mov	r0, r4
 8009714:	f7fc f874 	bl	8005800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009718:	4620      	mov	r0, r4
 800971a:	f7ff ff63 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800971e:	e792      	b.n	8009646 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009720:	4620      	mov	r0, r4
 8009722:	f7fc f86d 	bl	8005800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009726:	4620      	mov	r0, r4
 8009728:	f7ff ff5c 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800972c:	e7a3      	b.n	8009676 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972e:	4620      	mov	r0, r4
 8009730:	f7fc f866 	bl	8005800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff ff55 	bl	80095e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800973a:	e7b4      	b.n	80096a6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800973c:	f06f 0201 	mvn.w	r2, #1
 8009740:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009742:	4620      	mov	r0, r4
 8009744:	f7fc f872 	bl	800582c <HAL_TIM_PeriodElapsedCallback>
 8009748:	e7b8      	b.n	80096bc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800974a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800974e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fac0 	bl	8009cd6 <HAL_TIMEx_BreakCallback>
 8009756:	e7ba      	b.n	80096ce <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009758:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800975c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800975e:	4620      	mov	r0, r4
 8009760:	f000 faba 	bl	8009cd8 <HAL_TIMEx_Break2Callback>
 8009764:	e7bc      	b.n	80096e0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800976a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800976c:	4620      	mov	r0, r4
 800976e:	f7ff ff3a 	bl	80095e6 <HAL_TIM_TriggerCallback>
 8009772:	e7be      	b.n	80096f2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009774:	f06f 0220 	mvn.w	r2, #32
 8009778:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800977a:	4620      	mov	r0, r4
 800977c:	f000 faaa 	bl	8009cd4 <HAL_TIMEx_CommutCallback>
}
 8009780:	e7c0      	b.n	8009704 <HAL_TIM_IRQHandler+0x11c>
	...

08009784 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009784:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009786:	4a30      	ldr	r2, [pc, #192]	; (8009848 <TIM_Base_SetConfig+0xc4>)
 8009788:	4290      	cmp	r0, r2
 800978a:	d012      	beq.n	80097b2 <TIM_Base_SetConfig+0x2e>
 800978c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009790:	d00f      	beq.n	80097b2 <TIM_Base_SetConfig+0x2e>
 8009792:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009796:	4290      	cmp	r0, r2
 8009798:	d00b      	beq.n	80097b2 <TIM_Base_SetConfig+0x2e>
 800979a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800979e:	4290      	cmp	r0, r2
 80097a0:	d007      	beq.n	80097b2 <TIM_Base_SetConfig+0x2e>
 80097a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097a6:	4290      	cmp	r0, r2
 80097a8:	d003      	beq.n	80097b2 <TIM_Base_SetConfig+0x2e>
 80097aa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80097ae:	4290      	cmp	r0, r2
 80097b0:	d103      	bne.n	80097ba <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80097b6:	684a      	ldr	r2, [r1, #4]
 80097b8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ba:	4a23      	ldr	r2, [pc, #140]	; (8009848 <TIM_Base_SetConfig+0xc4>)
 80097bc:	4290      	cmp	r0, r2
 80097be:	d01e      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80097c4:	d01b      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80097ca:	4290      	cmp	r0, r2
 80097cc:	d017      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097d2:	4290      	cmp	r0, r2
 80097d4:	d013      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097da:	4290      	cmp	r0, r2
 80097dc:	d00f      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097de:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80097e2:	4290      	cmp	r0, r2
 80097e4:	d00b      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097e6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80097ea:	4290      	cmp	r0, r2
 80097ec:	d007      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097f2:	4290      	cmp	r0, r2
 80097f4:	d003      	beq.n	80097fe <TIM_Base_SetConfig+0x7a>
 80097f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097fa:	4290      	cmp	r0, r2
 80097fc:	d103      	bne.n	8009806 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 80097fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009802:	68ca      	ldr	r2, [r1, #12]
 8009804:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800980a:	694a      	ldr	r2, [r1, #20]
 800980c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800980e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009810:	688b      	ldr	r3, [r1, #8]
 8009812:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009814:	680b      	ldr	r3, [r1, #0]
 8009816:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <TIM_Base_SetConfig+0xc4>)
 800981a:	4298      	cmp	r0, r3
 800981c:	d00f      	beq.n	800983e <TIM_Base_SetConfig+0xba>
 800981e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009822:	4298      	cmp	r0, r3
 8009824:	d00b      	beq.n	800983e <TIM_Base_SetConfig+0xba>
 8009826:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800982a:	4298      	cmp	r0, r3
 800982c:	d007      	beq.n	800983e <TIM_Base_SetConfig+0xba>
 800982e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009832:	4298      	cmp	r0, r3
 8009834:	d003      	beq.n	800983e <TIM_Base_SetConfig+0xba>
 8009836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800983a:	4298      	cmp	r0, r3
 800983c:	d101      	bne.n	8009842 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800983e:	690b      	ldr	r3, [r1, #16]
 8009840:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009842:	2301      	movs	r3, #1
 8009844:	6143      	str	r3, [r0, #20]
}
 8009846:	4770      	bx	lr
 8009848:	40012c00 	.word	0x40012c00

0800984c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800984c:	b360      	cbz	r0, 80098a8 <HAL_TIM_Base_Init+0x5c>
{
 800984e:	b510      	push	{r4, lr}
 8009850:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009852:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009856:	b313      	cbz	r3, 800989e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009858:	2302      	movs	r3, #2
 800985a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800985e:	4621      	mov	r1, r4
 8009860:	f851 0b04 	ldr.w	r0, [r1], #4
 8009864:	f7ff ff8e 	bl	8009784 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009868:	2301      	movs	r3, #1
 800986a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009872:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009876:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800987a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800987e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009886:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800988a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800988e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009892:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009896:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800989a:	2000      	movs	r0, #0
}
 800989c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800989e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80098a2:	f7fc fc25 	bl	80060f0 <HAL_TIM_Base_MspInit>
 80098a6:	e7d7      	b.n	8009858 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80098a8:	2001      	movs	r0, #1
}
 80098aa:	4770      	bx	lr

080098ac <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80098ac:	b360      	cbz	r0, 8009908 <HAL_TIM_OC_Init+0x5c>
{
 80098ae:	b510      	push	{r4, lr}
 80098b0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80098b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80098b6:	b313      	cbz	r3, 80098fe <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80098b8:	2302      	movs	r3, #2
 80098ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80098be:	4621      	mov	r1, r4
 80098c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80098c4:	f7ff ff5e 	bl	8009784 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80098d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80098d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80098da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80098de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80098ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80098f2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80098f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80098fa:	2000      	movs	r0, #0
}
 80098fc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80098fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8009902:	f7fc fc2d 	bl	8006160 <HAL_TIM_OC_MspInit>
 8009906:	e7d7      	b.n	80098b8 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8009908:	2001      	movs	r0, #1
}
 800990a:	4770      	bx	lr

0800990c <TIM_OC2_SetConfig>:
{
 800990c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800990e:	6a03      	ldr	r3, [r0, #32]
 8009910:	f023 0310 	bic.w	r3, r3, #16
 8009914:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009916:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009918:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800991a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800991c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009920:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009924:	680d      	ldr	r5, [r1, #0]
 8009926:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800992a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800992e:	688d      	ldr	r5, [r1, #8]
 8009930:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009934:	4d17      	ldr	r5, [pc, #92]	; (8009994 <TIM_OC2_SetConfig+0x88>)
 8009936:	42a8      	cmp	r0, r5
 8009938:	d003      	beq.n	8009942 <TIM_OC2_SetConfig+0x36>
 800993a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800993e:	42a8      	cmp	r0, r5
 8009940:	d106      	bne.n	8009950 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8009942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009946:	68cd      	ldr	r5, [r1, #12]
 8009948:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800994c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009950:	4d10      	ldr	r5, [pc, #64]	; (8009994 <TIM_OC2_SetConfig+0x88>)
 8009952:	42a8      	cmp	r0, r5
 8009954:	d00f      	beq.n	8009976 <TIM_OC2_SetConfig+0x6a>
 8009956:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800995a:	42a8      	cmp	r0, r5
 800995c:	d00b      	beq.n	8009976 <TIM_OC2_SetConfig+0x6a>
 800995e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009962:	42a8      	cmp	r0, r5
 8009964:	d007      	beq.n	8009976 <TIM_OC2_SetConfig+0x6a>
 8009966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800996a:	42a8      	cmp	r0, r5
 800996c:	d003      	beq.n	8009976 <TIM_OC2_SetConfig+0x6a>
 800996e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009972:	42a8      	cmp	r0, r5
 8009974:	d107      	bne.n	8009986 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009976:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800997a:	694c      	ldr	r4, [r1, #20]
 800997c:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009980:	698c      	ldr	r4, [r1, #24]
 8009982:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8009986:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009988:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800998a:	684a      	ldr	r2, [r1, #4]
 800998c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800998e:	6203      	str	r3, [r0, #32]
}
 8009990:	bc30      	pop	{r4, r5}
 8009992:	4770      	bx	lr
 8009994:	40012c00 	.word	0x40012c00

08009998 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8009998:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800999c:	2b01      	cmp	r3, #1
 800999e:	d02e      	beq.n	80099fe <HAL_TIM_OC_ConfigChannel+0x66>
{
 80099a0:	b510      	push	{r4, lr}
 80099a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80099a4:	2301      	movs	r3, #1
 80099a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80099aa:	2a14      	cmp	r2, #20
 80099ac:	d80f      	bhi.n	80099ce <HAL_TIM_OC_ConfigChannel+0x36>
 80099ae:	e8df f002 	tbb	[pc, r2]
 80099b2:	0e0b      	.short	0x0e0b
 80099b4:	0e120e0e 	.word	0x0e120e0e
 80099b8:	0e160e0e 	.word	0x0e160e0e
 80099bc:	0e1a0e0e 	.word	0x0e1a0e0e
 80099c0:	0e1e0e0e 	.word	0x0e1e0e0e
 80099c4:	0e0e      	.short	0x0e0e
 80099c6:	22          	.byte	0x22
 80099c7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099c8:	6800      	ldr	r0, [r0, #0]
 80099ca:	f7ff fc77 	bl	80092bc <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 80099ce:	2000      	movs	r0, #0
 80099d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80099d4:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099d6:	6800      	ldr	r0, [r0, #0]
 80099d8:	f7ff ff98 	bl	800990c <TIM_OC2_SetConfig>
      break;
 80099dc:	e7f7      	b.n	80099ce <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099de:	6800      	ldr	r0, [r0, #0]
 80099e0:	f7ff fcba 	bl	8009358 <TIM_OC3_SetConfig>
      break;
 80099e4:	e7f3      	b.n	80099ce <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099e6:	6800      	ldr	r0, [r0, #0]
 80099e8:	f7ff fcfc 	bl	80093e4 <TIM_OC4_SetConfig>
      break;
 80099ec:	e7ef      	b.n	80099ce <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80099ee:	6800      	ldr	r0, [r0, #0]
 80099f0:	f7ff fd2e 	bl	8009450 <TIM_OC5_SetConfig>
      break;
 80099f4:	e7eb      	b.n	80099ce <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099f6:	6800      	ldr	r0, [r0, #0]
 80099f8:	f7ff fd5e 	bl	80094b8 <TIM_OC6_SetConfig>
      break;
 80099fc:	e7e7      	b.n	80099ce <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 80099fe:	2002      	movs	r0, #2
}
 8009a00:	4770      	bx	lr

08009a02 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a02:	f001 011f 	and.w	r1, r1, #31
 8009a06:	f04f 0c01 	mov.w	ip, #1
 8009a0a:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a0e:	6a03      	ldr	r3, [r0, #32]
 8009a10:	ea23 030c 	bic.w	r3, r3, ip
 8009a14:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a16:	6a03      	ldr	r3, [r0, #32]
 8009a18:	408a      	lsls	r2, r1
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	6203      	str	r3, [r0, #32]
}
 8009a1e:	4770      	bx	lr

08009a20 <HAL_TIM_OC_Start_IT>:
{
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a24:	2910      	cmp	r1, #16
 8009a26:	d83c      	bhi.n	8009aa2 <HAL_TIM_OC_Start_IT+0x82>
 8009a28:	e8df f001 	tbb	[pc, r1]
 8009a2c:	3b3b3b09 	.word	0x3b3b3b09
 8009a30:	3b3b3b1f 	.word	0x3b3b3b1f
 8009a34:	3b3b3b26 	.word	0x3b3b3b26
 8009a38:	3b3b3b2d 	.word	0x3b3b3b2d
 8009a3c:	34          	.byte	0x34
 8009a3d:	00          	.byte	0x00
 8009a3e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	3b01      	subs	r3, #1
 8009a46:	bf18      	it	ne
 8009a48:	2301      	movne	r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f040 80b4 	bne.w	8009bb8 <HAL_TIM_OC_Start_IT+0x198>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a50:	2910      	cmp	r1, #16
 8009a52:	d84b      	bhi.n	8009aec <HAL_TIM_OC_Start_IT+0xcc>
 8009a54:	e8df f001 	tbb	[pc, r1]
 8009a58:	4a4a4a2c 	.word	0x4a4a4a2c
 8009a5c:	4a4a4a3a 	.word	0x4a4a4a3a
 8009a60:	4a4a4a3e 	.word	0x4a4a4a3e
 8009a64:	4a4a4a42 	.word	0x4a4a4a42
 8009a68:	46          	.byte	0x46
 8009a69:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a6a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	3b01      	subs	r3, #1
 8009a72:	bf18      	it	ne
 8009a74:	2301      	movne	r3, #1
 8009a76:	e7e8      	b.n	8009a4a <HAL_TIM_OC_Start_IT+0x2a>
 8009a78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	bf18      	it	ne
 8009a82:	2301      	movne	r3, #1
 8009a84:	e7e1      	b.n	8009a4a <HAL_TIM_OC_Start_IT+0x2a>
 8009a86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	bf18      	it	ne
 8009a90:	2301      	movne	r3, #1
 8009a92:	e7da      	b.n	8009a4a <HAL_TIM_OC_Start_IT+0x2a>
 8009a94:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	bf18      	it	ne
 8009a9e:	2301      	movne	r3, #1
 8009aa0:	e7d3      	b.n	8009a4a <HAL_TIM_OC_Start_IT+0x2a>
 8009aa2:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	bf18      	it	ne
 8009aac:	2301      	movne	r3, #1
 8009aae:	e7cc      	b.n	8009a4a <HAL_TIM_OC_Start_IT+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 8009ab6:	290c      	cmp	r1, #12
 8009ab8:	d821      	bhi.n	8009afe <HAL_TIM_OC_Start_IT+0xde>
 8009aba:	e8df f001 	tbb	[pc, r1]
 8009abe:	201b      	.short	0x201b
 8009ac0:	205d2020 	.word	0x205d2020
 8009ac4:	20632020 	.word	0x20632020
 8009ac8:	2020      	.short	0x2020
 8009aca:	69          	.byte	0x69
 8009acb:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009acc:	2302      	movs	r3, #2
 8009ace:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009ad2:	e7f0      	b.n	8009ab6 <HAL_TIM_OC_Start_IT+0x96>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009ada:	e7ec      	b.n	8009ab6 <HAL_TIM_OC_Start_IT+0x96>
 8009adc:	2302      	movs	r3, #2
 8009ade:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009ae2:	e7e8      	b.n	8009ab6 <HAL_TIM_OC_Start_IT+0x96>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aea:	e7e4      	b.n	8009ab6 <HAL_TIM_OC_Start_IT+0x96>
 8009aec:	2302      	movs	r3, #2
 8009aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af2:	e7e0      	b.n	8009ab6 <HAL_TIM_OC_Start_IT+0x96>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009af4:	6822      	ldr	r2, [r4, #0]
 8009af6:	68d3      	ldr	r3, [r2, #12]
 8009af8:	f043 0302 	orr.w	r3, r3, #2
 8009afc:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009afe:	2201      	movs	r2, #1
 8009b00:	6820      	ldr	r0, [r4, #0]
 8009b02:	f7ff ff7e 	bl	8009a02 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	4a2e      	ldr	r2, [pc, #184]	; (8009bc4 <HAL_TIM_OC_Start_IT+0x1a4>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00f      	beq.n	8009b2e <HAL_TIM_OC_Start_IT+0x10e>
 8009b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <HAL_TIM_OC_Start_IT+0x10e>
 8009b16:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d007      	beq.n	8009b2e <HAL_TIM_OC_Start_IT+0x10e>
 8009b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d003      	beq.n	8009b2e <HAL_TIM_OC_Start_IT+0x10e>
 8009b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d103      	bne.n	8009b36 <HAL_TIM_OC_Start_IT+0x116>
    __HAL_TIM_MOE_ENABLE(htim);
 8009b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b34:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	4a22      	ldr	r2, [pc, #136]	; (8009bc4 <HAL_TIM_OC_Start_IT+0x1a4>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d02e      	beq.n	8009b9c <HAL_TIM_OC_Start_IT+0x17c>
 8009b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b42:	d02b      	beq.n	8009b9c <HAL_TIM_OC_Start_IT+0x17c>
 8009b44:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d027      	beq.n	8009b9c <HAL_TIM_OC_Start_IT+0x17c>
 8009b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d023      	beq.n	8009b9c <HAL_TIM_OC_Start_IT+0x17c>
 8009b54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d01f      	beq.n	8009b9c <HAL_TIM_OC_Start_IT+0x17c>
 8009b5c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d01b      	beq.n	8009b9c <HAL_TIM_OC_Start_IT+0x17c>
 8009b64:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d017      	beq.n	8009b9c <HAL_TIM_OC_Start_IT+0x17c>
    __HAL_TIM_ENABLE(htim);
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	f042 0201 	orr.w	r2, r2, #1
 8009b72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009b74:	2000      	movs	r0, #0
 8009b76:	e020      	b.n	8009bba <HAL_TIM_OC_Start_IT+0x19a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	68d3      	ldr	r3, [r2, #12]
 8009b7c:	f043 0304 	orr.w	r3, r3, #4
 8009b80:	60d3      	str	r3, [r2, #12]
      break;
 8009b82:	e7bc      	b.n	8009afe <HAL_TIM_OC_Start_IT+0xde>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	68d3      	ldr	r3, [r2, #12]
 8009b88:	f043 0308 	orr.w	r3, r3, #8
 8009b8c:	60d3      	str	r3, [r2, #12]
      break;
 8009b8e:	e7b6      	b.n	8009afe <HAL_TIM_OC_Start_IT+0xde>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b90:	6822      	ldr	r2, [r4, #0]
 8009b92:	68d3      	ldr	r3, [r2, #12]
 8009b94:	f043 0310 	orr.w	r3, r3, #16
 8009b98:	60d3      	str	r3, [r2, #12]
      break;
 8009b9a:	e7b0      	b.n	8009afe <HAL_TIM_OC_Start_IT+0xde>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b9c:	6899      	ldr	r1, [r3, #8]
 8009b9e:	4a0a      	ldr	r2, [pc, #40]	; (8009bc8 <HAL_TIM_OC_Start_IT+0x1a8>)
 8009ba0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba2:	2a06      	cmp	r2, #6
 8009ba4:	d00a      	beq.n	8009bbc <HAL_TIM_OC_Start_IT+0x19c>
 8009ba6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009baa:	d009      	beq.n	8009bc0 <HAL_TIM_OC_Start_IT+0x1a0>
      __HAL_TIM_ENABLE(htim);
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e000      	b.n	8009bba <HAL_TIM_OC_Start_IT+0x19a>
    return HAL_ERROR;
 8009bb8:	2001      	movs	r0, #1
}
 8009bba:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	e7fc      	b.n	8009bba <HAL_TIM_OC_Start_IT+0x19a>
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	e7fa      	b.n	8009bba <HAL_TIM_OC_Start_IT+0x19a>
 8009bc4:	40012c00 	.word	0x40012c00
 8009bc8:	00010007 	.word	0x00010007

08009bcc <HAL_TIM_OC_Stop_IT>:
{
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4605      	mov	r5, r0
 8009bd0:	460c      	mov	r4, r1
  switch (Channel)
 8009bd2:	290c      	cmp	r1, #12
 8009bd4:	d80d      	bhi.n	8009bf2 <HAL_TIM_OC_Stop_IT+0x26>
 8009bd6:	e8df f001 	tbb	[pc, r1]
 8009bda:	0c07      	.short	0x0c07
 8009bdc:	0c480c0c 	.word	0x0c480c0c
 8009be0:	0c4e0c0c 	.word	0x0c4e0c0c
 8009be4:	0c0c      	.short	0x0c0c
 8009be6:	54          	.byte	0x54
 8009be7:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009be8:	6802      	ldr	r2, [r0, #0]
 8009bea:	68d3      	ldr	r3, [r2, #12]
 8009bec:	f023 0302 	bic.w	r3, r3, #2
 8009bf0:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	6828      	ldr	r0, [r5, #0]
 8009bf8:	f7ff ff03 	bl	8009a02 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	4a34      	ldr	r2, [pc, #208]	; (8009cd0 <HAL_TIM_OC_Stop_IT+0x104>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00f      	beq.n	8009c24 <HAL_TIM_OC_Stop_IT+0x58>
 8009c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00b      	beq.n	8009c24 <HAL_TIM_OC_Stop_IT+0x58>
 8009c0c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <HAL_TIM_OC_Stop_IT+0x58>
 8009c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <HAL_TIM_OC_Stop_IT+0x58>
 8009c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d10d      	bne.n	8009c40 <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 8009c24:	6a19      	ldr	r1, [r3, #32]
 8009c26:	f241 1211 	movw	r2, #4369	; 0x1111
 8009c2a:	4211      	tst	r1, r2
 8009c2c:	d108      	bne.n	8009c40 <HAL_TIM_OC_Stop_IT+0x74>
 8009c2e:	6a19      	ldr	r1, [r3, #32]
 8009c30:	f240 4244 	movw	r2, #1092	; 0x444
 8009c34:	4211      	tst	r1, r2
 8009c36:	d103      	bne.n	8009c40 <HAL_TIM_OC_Stop_IT+0x74>
 8009c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c3e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	6a19      	ldr	r1, [r3, #32]
 8009c44:	f241 1211 	movw	r2, #4369	; 0x1111
 8009c48:	4211      	tst	r1, r2
 8009c4a:	d108      	bne.n	8009c5e <HAL_TIM_OC_Stop_IT+0x92>
 8009c4c:	6a19      	ldr	r1, [r3, #32]
 8009c4e:	f240 4244 	movw	r2, #1092	; 0x444
 8009c52:	4211      	tst	r1, r2
 8009c54:	d103      	bne.n	8009c5e <HAL_TIM_OC_Stop_IT+0x92>
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c5e:	b9b4      	cbnz	r4, 8009c8e <HAL_TIM_OC_Stop_IT+0xc2>
 8009c60:	2301      	movs	r3, #1
 8009c62:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8009c66:	2000      	movs	r0, #0
 8009c68:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009c6a:	6802      	ldr	r2, [r0, #0]
 8009c6c:	68d3      	ldr	r3, [r2, #12]
 8009c6e:	f023 0304 	bic.w	r3, r3, #4
 8009c72:	60d3      	str	r3, [r2, #12]
      break;
 8009c74:	e7bd      	b.n	8009bf2 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009c76:	6802      	ldr	r2, [r0, #0]
 8009c78:	68d3      	ldr	r3, [r2, #12]
 8009c7a:	f023 0308 	bic.w	r3, r3, #8
 8009c7e:	60d3      	str	r3, [r2, #12]
      break;
 8009c80:	e7b7      	b.n	8009bf2 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009c82:	6802      	ldr	r2, [r0, #0]
 8009c84:	68d3      	ldr	r3, [r2, #12]
 8009c86:	f023 0310 	bic.w	r3, r3, #16
 8009c8a:	60d3      	str	r3, [r2, #12]
      break;
 8009c8c:	e7b1      	b.n	8009bf2 <HAL_TIM_OC_Stop_IT+0x26>
 8009c8e:	3c04      	subs	r4, #4
 8009c90:	2c0c      	cmp	r4, #12
 8009c92:	d818      	bhi.n	8009cc6 <HAL_TIM_OC_Stop_IT+0xfa>
 8009c94:	e8df f004 	tbb	[pc, r4]
 8009c98:	17171707 	.word	0x17171707
 8009c9c:	1717170b 	.word	0x1717170b
 8009ca0:	1717170f 	.word	0x1717170f
 8009ca4:	13          	.byte	0x13
 8009ca5:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 8009cac:	e7db      	b.n	8009c66 <HAL_TIM_OC_Stop_IT+0x9a>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8009cb4:	e7d7      	b.n	8009c66 <HAL_TIM_OC_Stop_IT+0x9a>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8009cbc:	e7d3      	b.n	8009c66 <HAL_TIM_OC_Stop_IT+0x9a>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8009cc4:	e7cf      	b.n	8009c66 <HAL_TIM_OC_Stop_IT+0x9a>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 8009ccc:	e7cb      	b.n	8009c66 <HAL_TIM_OC_Stop_IT+0x9a>
 8009cce:	bf00      	nop
 8009cd0:	40012c00 	.word	0x40012c00

08009cd4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cd8:	4770      	bx	lr
	...

08009cdc <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8009cdc:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009cde:	3301      	adds	r3, #1
 8009ce0:	4a0c      	ldr	r2, [pc, #48]	; (8009d14 <USB_CoreReset+0x38>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d811      	bhi.n	8009d0a <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ce6:	6902      	ldr	r2, [r0, #16]
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	daf8      	bge.n	8009cde <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cec:	6903      	ldr	r3, [r0, #16]
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	6103      	str	r3, [r0, #16]
  count = 0U;
 8009cf4:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	4a06      	ldr	r2, [pc, #24]	; (8009d14 <USB_CoreReset+0x38>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d807      	bhi.n	8009d0e <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cfe:	6902      	ldr	r2, [r0, #16]
 8009d00:	f012 0f01 	tst.w	r2, #1
 8009d04:	d1f7      	bne.n	8009cf6 <USB_CoreReset+0x1a>

  return HAL_OK;
 8009d06:	2000      	movs	r0, #0
 8009d08:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009d0a:	2003      	movs	r0, #3
 8009d0c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009d0e:	2003      	movs	r0, #3
}
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	00030d40 	.word	0x00030d40

08009d18 <USB_CoreInit>:
{
 8009d18:	b084      	sub	sp, #16
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	f10d 0c0c 	add.w	ip, sp, #12
 8009d22:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d26:	68c3      	ldr	r3, [r0, #12]
 8009d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d2c:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 8009d2e:	f7ff ffd5 	bl	8009cdc <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 8009d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d34:	b93b      	cbnz	r3, 8009d46 <USB_CoreInit+0x2e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d3c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d42:	b004      	add	sp, #16
 8009d44:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d4e:	e7f6      	b.n	8009d3e <USB_CoreInit+0x26>

08009d50 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8009d50:	2a02      	cmp	r2, #2
 8009d52:	d00a      	beq.n	8009d6a <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d54:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d56:	68c3      	ldr	r3, [r0, #12]
 8009d58:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8009d5c:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d5e:	68c3      	ldr	r3, [r0, #12]
 8009d60:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8009d64:	60c3      	str	r3, [r0, #12]
}
 8009d66:	2000      	movs	r0, #0
 8009d68:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d6a:	4b23      	ldr	r3, [pc, #140]	; (8009df8 <USB_SetTurnaroundTime+0xa8>)
 8009d6c:	440b      	add	r3, r1
 8009d6e:	4a23      	ldr	r2, [pc, #140]	; (8009dfc <USB_SetTurnaroundTime+0xac>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d92f      	bls.n	8009dd4 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d74:	4b22      	ldr	r3, [pc, #136]	; (8009e00 <USB_SetTurnaroundTime+0xb0>)
 8009d76:	440b      	add	r3, r1
 8009d78:	4a22      	ldr	r2, [pc, #136]	; (8009e04 <USB_SetTurnaroundTime+0xb4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d92c      	bls.n	8009dd8 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d7e:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8009d82:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8009d86:	4a20      	ldr	r2, [pc, #128]	; (8009e08 <USB_SetTurnaroundTime+0xb8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d927      	bls.n	8009ddc <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d8c:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8009d90:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8009d94:	4a1d      	ldr	r2, [pc, #116]	; (8009e0c <USB_SetTurnaroundTime+0xbc>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d322      	bcc.n	8009de0 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d9a:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <USB_SetTurnaroundTime+0xc0>)
 8009d9c:	440b      	add	r3, r1
 8009d9e:	4a1d      	ldr	r2, [pc, #116]	; (8009e14 <USB_SetTurnaroundTime+0xc4>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d91f      	bls.n	8009de4 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009da4:	4b1c      	ldr	r3, [pc, #112]	; (8009e18 <USB_SetTurnaroundTime+0xc8>)
 8009da6:	440b      	add	r3, r1
 8009da8:	4a1c      	ldr	r2, [pc, #112]	; (8009e1c <USB_SetTurnaroundTime+0xcc>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d31c      	bcc.n	8009de8 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009dae:	4b1c      	ldr	r3, [pc, #112]	; (8009e20 <USB_SetTurnaroundTime+0xd0>)
 8009db0:	440b      	add	r3, r1
 8009db2:	4a1c      	ldr	r2, [pc, #112]	; (8009e24 <USB_SetTurnaroundTime+0xd4>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d319      	bcc.n	8009dec <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009db8:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8009dbc:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8009dc0:	4a19      	ldr	r2, [pc, #100]	; (8009e28 <USB_SetTurnaroundTime+0xd8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d314      	bcc.n	8009df0 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009dc6:	4b19      	ldr	r3, [pc, #100]	; (8009e2c <USB_SetTurnaroundTime+0xdc>)
 8009dc8:	440b      	add	r3, r1
 8009dca:	4a19      	ldr	r2, [pc, #100]	; (8009e30 <USB_SetTurnaroundTime+0xe0>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d211      	bcs.n	8009df4 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8009dd0:	2207      	movs	r2, #7
 8009dd2:	e7c0      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8009dd4:	220f      	movs	r2, #15
 8009dd6:	e7be      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8009dd8:	220e      	movs	r2, #14
 8009dda:	e7bc      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8009ddc:	220d      	movs	r2, #13
 8009dde:	e7ba      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8009de0:	220c      	movs	r2, #12
 8009de2:	e7b8      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8009de4:	220b      	movs	r2, #11
 8009de6:	e7b6      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8009de8:	220a      	movs	r2, #10
 8009dea:	e7b4      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8009dec:	2209      	movs	r2, #9
 8009dee:	e7b2      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8009df0:	2208      	movs	r2, #8
 8009df2:	e7b0      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8009df4:	2206      	movs	r2, #6
 8009df6:	e7ae      	b.n	8009d56 <USB_SetTurnaroundTime+0x6>
 8009df8:	ff275340 	.word	0xff275340
 8009dfc:	000c34ff 	.word	0x000c34ff
 8009e00:	ff1b1e40 	.word	0xff1b1e40
 8009e04:	000f423f 	.word	0x000f423f
 8009e08:	00124f7f 	.word	0x00124f7f
 8009e0c:	0013d620 	.word	0x0013d620
 8009e10:	fee5b660 	.word	0xfee5b660
 8009e14:	0016e35f 	.word	0x0016e35f
 8009e18:	feced300 	.word	0xfeced300
 8009e1c:	001b7740 	.word	0x001b7740
 8009e20:	feb35bc0 	.word	0xfeb35bc0
 8009e24:	002191c0 	.word	0x002191c0
 8009e28:	00387520 	.word	0x00387520
 8009e2c:	fe5954e0 	.word	0xfe5954e0
 8009e30:	00419ce0 	.word	0x00419ce0

08009e34 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e34:	6883      	ldr	r3, [r0, #8]
 8009e36:	f043 0301 	orr.w	r3, r3, #1
 8009e3a:	6083      	str	r3, [r0, #8]
}
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	4770      	bx	lr

08009e40 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e40:	6883      	ldr	r3, [r0, #8]
 8009e42:	f023 0301 	bic.w	r3, r3, #1
 8009e46:	6083      	str	r3, [r0, #8]
}
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4770      	bx	lr

08009e4c <USB_SetCurrentMode>:
{
 8009e4c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e4e:	68c3      	ldr	r3, [r0, #12]
 8009e50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009e54:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009e56:	2901      	cmp	r1, #1
 8009e58:	d009      	beq.n	8009e6e <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8009e5a:	b969      	cbnz	r1, 8009e78 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e5c:	68c3      	ldr	r3, [r0, #12]
 8009e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e62:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8009e64:	2032      	movs	r0, #50	; 0x32
 8009e66:	f7fb ffb9 	bl	8005ddc <HAL_Delay>
  return HAL_OK;
 8009e6a:	2000      	movs	r0, #0
}
 8009e6c:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e6e:	68c3      	ldr	r3, [r0, #12]
 8009e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e74:	60c3      	str	r3, [r0, #12]
 8009e76:	e7f5      	b.n	8009e64 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8009e78:	2001      	movs	r0, #1
 8009e7a:	e7f7      	b.n	8009e6c <USB_SetCurrentMode+0x20>

08009e7c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e7c:	0189      	lsls	r1, r1, #6
 8009e7e:	f041 0120 	orr.w	r1, r1, #32
 8009e82:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8009e84:	2300      	movs	r3, #0
    if (++count > 200000U)
 8009e86:	3301      	adds	r3, #1
 8009e88:	4a05      	ldr	r2, [pc, #20]	; (8009ea0 <USB_FlushTxFifo+0x24>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d805      	bhi.n	8009e9a <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e8e:	6902      	ldr	r2, [r0, #16]
 8009e90:	f012 0f20 	tst.w	r2, #32
 8009e94:	d1f7      	bne.n	8009e86 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8009e96:	2000      	movs	r0, #0
 8009e98:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009e9a:	2003      	movs	r0, #3
}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	00030d40 	.word	0x00030d40

08009ea4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8009ea8:	2300      	movs	r3, #0
    if (++count > 200000U)
 8009eaa:	3301      	adds	r3, #1
 8009eac:	4a05      	ldr	r2, [pc, #20]	; (8009ec4 <USB_FlushRxFifo+0x20>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d805      	bhi.n	8009ebe <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009eb2:	6902      	ldr	r2, [r0, #16]
 8009eb4:	f012 0f10 	tst.w	r2, #16
 8009eb8:	d1f7      	bne.n	8009eaa <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8009eba:	2000      	movs	r0, #0
 8009ebc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009ebe:	2003      	movs	r0, #3
}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	00030d40 	.word	0x00030d40

08009ec8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8009ec8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009ecc:	4319      	orrs	r1, r3
 8009ece:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	4770      	bx	lr
	...

08009ed8 <USB_DevInit>:
{
 8009ed8:	b084      	sub	sp, #16
 8009eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ede:	4604      	mov	r4, r0
 8009ee0:	a807      	add	r0, sp, #28
 8009ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e006      	b.n	8009ef8 <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 8009eea:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009eee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	2b0e      	cmp	r3, #14
 8009efa:	d9f6      	bls.n	8009eea <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 8009efc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009efe:	bb8f      	cbnz	r7, 8009f64 <USB_DevInit+0x8c>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f00:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8009f04:	f043 0302 	orr.w	r3, r3, #2
 8009f08:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f12:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f22:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f2a:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 8009f2e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009f32:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f36:	2103      	movs	r1, #3
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f7ff ffc5 	bl	8009ec8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f3e:	2110      	movs	r1, #16
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7ff ff9b 	bl	8009e7c <USB_FlushTxFifo>
 8009f46:	4680      	mov	r8, r0
 8009f48:	b108      	cbz	r0, 8009f4e <USB_DevInit+0x76>
    ret = HAL_ERROR;
 8009f4a:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7ff ffa8 	bl	8009ea4 <USB_FlushRxFifo>
 8009f54:	b108      	cbz	r0, 8009f5a <USB_DevInit+0x82>
    ret = HAL_ERROR;
 8009f56:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f5e:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f60:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f62:	e00f      	b.n	8009f84 <USB_DevInit+0xac>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f6c:	e7da      	b.n	8009f24 <USB_DevInit+0x4c>
      if (i == 0U)
 8009f6e:	b9c3      	cbnz	r3, 8009fa2 <USB_DevInit+0xca>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f70:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8009f74:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009f78:	2200      	movs	r2, #0
 8009f7a:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009f7c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8009f80:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f82:	3301      	adds	r3, #1
 8009f84:	9907      	ldr	r1, [sp, #28]
 8009f86:	4299      	cmp	r1, r3
 8009f88:	d910      	bls.n	8009fac <USB_DevInit+0xd4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f8a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8009f8e:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8009f92:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8009f96:	2800      	cmp	r0, #0
 8009f98:	dbe9      	blt.n	8009f6e <USB_DevInit+0x96>
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8009fa0:	e7ea      	b.n	8009f78 <USB_DevInit+0xa0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fa6:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8009faa:	e7e5      	b.n	8009f78 <USB_DevInit+0xa0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fac:	2300      	movs	r3, #0
 8009fae:	e00a      	b.n	8009fc6 <USB_DevInit+0xee>
      if (i == 0U)
 8009fb0:	b1c3      	cbz	r3, 8009fe4 <USB_DevInit+0x10c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009fb2:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 8009fb6:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009fba:	2200      	movs	r2, #0
 8009fbc:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009fbe:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8009fc2:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4299      	cmp	r1, r3
 8009fc8:	d911      	bls.n	8009fee <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fca:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8009fce:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8009fd2:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	dbea      	blt.n	8009fb0 <USB_DevInit+0xd8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009fda:	f04f 0c00 	mov.w	ip, #0
 8009fde:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 8009fe2:	e7ea      	b.n	8009fba <USB_DevInit+0xe2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009fe4:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8009fe8:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 8009fec:	e7e5      	b.n	8009fba <USB_DevInit+0xe2>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009fee:	692b      	ldr	r3, [r5, #16]
 8009ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ff4:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ffa:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8009ffe:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a000:	69a3      	ldr	r3, [r4, #24]
 800a002:	f043 0310 	orr.w	r3, r3, #16
 800a006:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a008:	69a2      	ldr	r2, [r4, #24]
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <USB_DevInit+0x160>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800a010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a012:	b11b      	cbz	r3, 800a01c <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a014:	69a3      	ldr	r3, [r4, #24]
 800a016:	f043 0308 	orr.w	r3, r3, #8
 800a01a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a01c:	2f01      	cmp	r7, #1
 800a01e:	d004      	beq.n	800a02a <USB_DevInit+0x152>
}
 800a020:	4640      	mov	r0, r8
 800a022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a026:	b004      	add	sp, #16
 800a028:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a02a:	69a3      	ldr	r3, [r4, #24]
 800a02c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a030:	f043 0304 	orr.w	r3, r3, #4
 800a034:	61a3      	str	r3, [r4, #24]
 800a036:	e7f3      	b.n	800a020 <USB_DevInit+0x148>
 800a038:	803c3800 	.word	0x803c3800

0800a03c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a03c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800a040:	f003 0306 	and.w	r3, r3, #6
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a044:	2b02      	cmp	r3, #2
 800a046:	d005      	beq.n	800a054 <USB_GetDevSpeed+0x18>
 800a048:	2b06      	cmp	r3, #6
 800a04a:	d001      	beq.n	800a050 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800a04c:	200f      	movs	r0, #15
}
 800a04e:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800a050:	2002      	movs	r0, #2
 800a052:	4770      	bx	lr
 800a054:	2002      	movs	r0, #2
 800a056:	4770      	bx	lr

0800a058 <USB_ActivateEndpoint>:
{
 800a058:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800a05a:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800a05e:	784b      	ldrb	r3, [r1, #1]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d023      	beq.n	800a0ac <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a064:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 800a068:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800a06c:	f00c 040f 	and.w	r4, ip, #15
 800a070:	2201      	movs	r2, #1
 800a072:	40a2      	lsls	r2, r4
 800a074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a078:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a07c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800a080:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a084:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a088:	d10e      	bne.n	800a0a8 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a08a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a08e:	688a      	ldr	r2, [r1, #8]
 800a090:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a094:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a096:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800a09a:	4313      	orrs	r3, r2
 800a09c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0a4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a0ac:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a0b0:	f00c 0e0f 	and.w	lr, ip, #15
 800a0b4:	fa03 f30e 	lsl.w	r3, r3, lr
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a0c0:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800a0c4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a0c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a0cc:	d1ec      	bne.n	800a0a8 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0ce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a0d2:	688a      	ldr	r2, [r1, #8]
 800a0d4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0d8:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0da:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0de:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ec:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a0f0:	e7da      	b.n	800a0a8 <USB_ActivateEndpoint+0x50>
	...

0800a0f4 <USB_DeactivateEndpoint>:
{
 800a0f4:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800a0f6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a0f8:	784a      	ldrb	r2, [r1, #1]
 800a0fa:	2a01      	cmp	r2, #1
 800a0fc:	d026      	beq.n	800a14c <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0fe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a102:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a106:	2a00      	cmp	r2, #0
 800a108:	db52      	blt.n	800a1b0 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a10a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800a10e:	780a      	ldrb	r2, [r1, #0]
 800a110:	f002 020f 	and.w	r2, r2, #15
 800a114:	f04f 0c01 	mov.w	ip, #1
 800a118:	fa0c f202 	lsl.w	r2, ip, r2
 800a11c:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800a120:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a124:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a128:	7809      	ldrb	r1, [r1, #0]
 800a12a:	f001 010f 	and.w	r1, r1, #15
 800a12e:	fa0c fc01 	lsl.w	ip, ip, r1
 800a132:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800a136:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a13a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800a13e:	4a23      	ldr	r2, [pc, #140]	; (800a1cc <USB_DeactivateEndpoint+0xd8>)
 800a140:	400a      	ands	r2, r1
 800a142:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a146:	2000      	movs	r0, #0
 800a148:	bc30      	pop	{r4, r5}
 800a14a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a14c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a150:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a154:	2a00      	cmp	r2, #0
 800a156:	db1e      	blt.n	800a196 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a158:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800a15c:	780a      	ldrb	r2, [r1, #0]
 800a15e:	f002 020f 	and.w	r2, r2, #15
 800a162:	2401      	movs	r4, #1
 800a164:	fa04 f202 	lsl.w	r2, r4, r2
 800a168:	b292      	uxth	r2, r2
 800a16a:	ea25 0202 	bic.w	r2, r5, r2
 800a16e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a172:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a176:	7809      	ldrb	r1, [r1, #0]
 800a178:	f001 010f 	and.w	r1, r1, #15
 800a17c:	408c      	lsls	r4, r1
 800a17e:	b2a4      	uxth	r4, r4
 800a180:	ea22 0204 	bic.w	r2, r2, r4
 800a184:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a188:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800a18c:	4a10      	ldr	r2, [pc, #64]	; (800a1d0 <USB_DeactivateEndpoint+0xdc>)
 800a18e:	400a      	ands	r2, r1
 800a190:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a194:	e7d7      	b.n	800a146 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a196:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a19a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a19e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1a2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a1a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a1aa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a1ae:	e7d3      	b.n	800a158 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1b0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a1b4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a1b8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a1bc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a1c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a1c4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a1c8:	e79f      	b.n	800a10a <USB_DeactivateEndpoint+0x16>
 800a1ca:	bf00      	nop
 800a1cc:	eff37800 	.word	0xeff37800
 800a1d0:	ec337800 	.word	0xec337800

0800a1d4 <USB_EP0StartXfer>:
  uint32_t epnum = (uint32_t)ep->num;
 800a1d4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a1d6:	784a      	ldrb	r2, [r1, #1]
 800a1d8:	2a01      	cmp	r2, #1
 800a1da:	d023      	beq.n	800a224 <USB_EP0StartXfer+0x50>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a1e0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800a1e4:	691a      	ldr	r2, [r3, #16]
 800a1e6:	0cd2      	lsrs	r2, r2, #19
 800a1e8:	04d2      	lsls	r2, r2, #19
 800a1ea:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800a1f2:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800a1f6:	611a      	str	r2, [r3, #16]
    if (ep->xfer_len > 0U)
 800a1f8:	694a      	ldr	r2, [r1, #20]
 800a1fa:	b10a      	cbz	r2, 800a200 <USB_EP0StartXfer+0x2c>
      ep->xfer_len = ep->maxpacket;
 800a1fc:	688a      	ldr	r2, [r1, #8]
 800a1fe:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a200:	691a      	ldr	r2, [r3, #16]
 800a202:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a206:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	6889      	ldr	r1, [r1, #8]
 800a20c:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800a210:	430a      	orrs	r2, r1
 800a212:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a214:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a218:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a21c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a220:	2000      	movs	r0, #0
 800a222:	4770      	bx	lr
{
 800a224:	b430      	push	{r4, r5}
    if (ep->xfer_len == 0U)
 800a226:	694a      	ldr	r2, [r1, #20]
 800a228:	bb62      	cbnz	r2, 800a284 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a22a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a22e:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a232:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a236:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a23a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a23e:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a242:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a246:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a24a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a24e:	0ce4      	lsrs	r4, r4, #19
 800a250:	04e4      	lsls	r4, r4, #19
 800a252:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a256:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a25a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a25e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a262:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800a266:	694b      	ldr	r3, [r1, #20]
 800a268:	b14b      	cbz	r3, 800a27e <USB_EP0StartXfer+0xaa>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a26a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800a26e:	7809      	ldrb	r1, [r1, #0]
 800a270:	f001 010f 	and.w	r1, r1, #15
 800a274:	2201      	movs	r2, #1
 800a276:	408a      	lsls	r2, r1
 800a278:	4313      	orrs	r3, r2
 800a27a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800a27e:	2000      	movs	r0, #0
 800a280:	bc30      	pop	{r4, r5}
 800a282:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a284:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a28c:	6914      	ldr	r4, [r2, #16]
 800a28e:	0ce4      	lsrs	r4, r4, #19
 800a290:	04e4      	lsls	r4, r4, #19
 800a292:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a294:	6914      	ldr	r4, [r2, #16]
 800a296:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a29a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a29e:	6114      	str	r4, [r2, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a2a0:	688c      	ldr	r4, [r1, #8]
 800a2a2:	694d      	ldr	r5, [r1, #20]
 800a2a4:	42a5      	cmp	r5, r4
 800a2a6:	d900      	bls.n	800a2aa <USB_EP0StartXfer+0xd6>
        ep->xfer_len = ep->maxpacket;
 800a2a8:	614c      	str	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2aa:	6914      	ldr	r4, [r2, #16]
 800a2ac:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a2b0:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2b2:	6914      	ldr	r4, [r2, #16]
 800a2b4:	694d      	ldr	r5, [r1, #20]
 800a2b6:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 800a2ba:	ea44 040c 	orr.w	r4, r4, ip
 800a2be:	6114      	str	r4, [r2, #16]
 800a2c0:	e7c9      	b.n	800a256 <USB_EP0StartXfer+0x82>

0800a2c2 <USB_WritePacket>:
{
 800a2c2:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 800a2c4:	1cdc      	adds	r4, r3, #3
 800a2c6:	08a4      	lsrs	r4, r4, #2
  for (i = 0U; i < count32b; i++)
 800a2c8:	f04f 0e00 	mov.w	lr, #0
 800a2cc:	e009      	b.n	800a2e2 <USB_WritePacket+0x20>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a2ce:	eb00 3c02 	add.w	ip, r0, r2, lsl #12
 800a2d2:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800a2d6:	f851 3b04 	ldr.w	r3, [r1], #4
 800a2da:	f8cc 3000 	str.w	r3, [ip]
  for (i = 0U; i < count32b; i++)
 800a2de:	f10e 0e01 	add.w	lr, lr, #1
 800a2e2:	45a6      	cmp	lr, r4
 800a2e4:	d3f3      	bcc.n	800a2ce <USB_WritePacket+0xc>
}
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	bd10      	pop	{r4, pc}
	...

0800a2ec <USB_EPStartXfer>:
{
 800a2ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800a2ee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a2f0:	784a      	ldrb	r2, [r1, #1]
 800a2f2:	2a01      	cmp	r2, #1
 800a2f4:	d027      	beq.n	800a346 <USB_EPStartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2f6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a2fa:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 800a2fe:	6914      	ldr	r4, [r2, #16]
 800a300:	0ce4      	lsrs	r4, r4, #19
 800a302:	04e4      	lsls	r4, r4, #19
 800a304:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a306:	6914      	ldr	r4, [r2, #16]
 800a308:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a30c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a310:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 800a312:	694c      	ldr	r4, [r1, #20]
 800a314:	2c00      	cmp	r4, #0
 800a316:	f040 8093 	bne.w	800a440 <USB_EPStartXfer+0x154>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a31a:	6914      	ldr	r4, [r2, #16]
 800a31c:	688d      	ldr	r5, [r1, #8]
 800a31e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a322:	432c      	orrs	r4, r5
 800a324:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a326:	6914      	ldr	r4, [r2, #16]
 800a328:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a32c:	6114      	str	r4, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800a32e:	78ca      	ldrb	r2, [r1, #3]
 800a330:	2a01      	cmp	r2, #1
 800a332:	f000 809b 	beq.w	800a46c <USB_EPStartXfer+0x180>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a336:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a33a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a33e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a342:	2000      	movs	r0, #0
 800a344:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0U)
 800a346:	694a      	ldr	r2, [r1, #20]
 800a348:	bb72      	cbnz	r2, 800a3a8 <USB_EPStartXfer+0xbc>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a34a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a34e:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a352:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a356:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a35a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a35e:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a362:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a366:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a36a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a36e:	0ce4      	lsrs	r4, r4, #19
 800a370:	04e4      	lsls	r4, r4, #19
 800a372:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a376:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a37a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a37e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a382:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800a386:	78ca      	ldrb	r2, [r1, #3]
 800a388:	2a01      	cmp	r2, #1
 800a38a:	d041      	beq.n	800a410 <USB_EPStartXfer+0x124>
      if (ep->xfer_len > 0U)
 800a38c:	694b      	ldr	r3, [r1, #20]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0d7      	beq.n	800a342 <USB_EPStartXfer+0x56>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a392:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800a396:	7809      	ldrb	r1, [r1, #0]
 800a398:	f001 010f 	and.w	r1, r1, #15
 800a39c:	2201      	movs	r2, #1
 800a39e:	408a      	lsls	r2, r1
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800a3a6:	e7cc      	b.n	800a342 <USB_EPStartXfer+0x56>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3a8:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a3ac:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a3b0:	0ce4      	lsrs	r4, r4, #19
 800a3b2:	04e4      	lsls	r4, r4, #19
 800a3b4:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3b8:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a3bc:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a3c0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a3c4:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a3c8:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 800a3cc:	694c      	ldr	r4, [r1, #20]
 800a3ce:	688e      	ldr	r6, [r1, #8]
 800a3d0:	4434      	add	r4, r6
 800a3d2:	3c01      	subs	r4, #1
 800a3d4:	fbb4 f4f6 	udiv	r4, r4, r6
 800a3d8:	4e2e      	ldr	r6, [pc, #184]	; (800a494 <USB_EPStartXfer+0x1a8>)
 800a3da:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800a3de:	432c      	orrs	r4, r5
 800a3e0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3e4:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a3e8:	694d      	ldr	r5, [r1, #20]
 800a3ea:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a3ee:	432c      	orrs	r4, r5
 800a3f0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800a3f8:	78cc      	ldrb	r4, [r1, #3]
 800a3fa:	2c01      	cmp	r4, #1
 800a3fc:	d1bb      	bne.n	800a376 <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a3fe:	6914      	ldr	r4, [r2, #16]
 800a400:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800a404:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a406:	6914      	ldr	r4, [r2, #16]
 800a408:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800a40c:	6114      	str	r4, [r2, #16]
 800a40e:	e7b2      	b.n	800a376 <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a410:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a414:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a418:	d10b      	bne.n	800a432 <USB_EPStartXfer+0x146>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a41a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a41e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a422:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a426:	8a8b      	ldrh	r3, [r1, #20]
 800a428:	780a      	ldrb	r2, [r1, #0]
 800a42a:	68c9      	ldr	r1, [r1, #12]
 800a42c:	f7ff ff49 	bl	800a2c2 <USB_WritePacket>
 800a430:	e787      	b.n	800a342 <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a432:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a43a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a43e:	e7f2      	b.n	800a426 <USB_EPStartXfer+0x13a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a440:	688d      	ldr	r5, [r1, #8]
 800a442:	442c      	add	r4, r5
 800a444:	3c01      	subs	r4, #1
 800a446:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a44a:	6915      	ldr	r5, [r2, #16]
 800a44c:	fa1f fc84 	uxth.w	ip, r4
 800a450:	4e10      	ldr	r6, [pc, #64]	; (800a494 <USB_EPStartXfer+0x1a8>)
 800a452:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800a456:	432c      	orrs	r4, r5
 800a458:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a45a:	6915      	ldr	r5, [r2, #16]
 800a45c:	688c      	ldr	r4, [r1, #8]
 800a45e:	fb0c f404 	mul.w	r4, ip, r4
 800a462:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a466:	432c      	orrs	r4, r5
 800a468:	6114      	str	r4, [r2, #16]
 800a46a:	e760      	b.n	800a32e <USB_EPStartXfer+0x42>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a46c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a470:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a474:	d106      	bne.n	800a484 <USB_EPStartXfer+0x198>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a476:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a47a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a47e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a482:	e758      	b.n	800a336 <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a484:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a488:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a48c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a490:	e751      	b.n	800a336 <USB_EPStartXfer+0x4a>
 800a492:	bf00      	nop
 800a494:	1ff80000 	.word	0x1ff80000

0800a498 <USB_ReadPacket>:
{
 800a498:	4684      	mov	ip, r0
 800a49a:	4608      	mov	r0, r1
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a49c:	3203      	adds	r2, #3
 800a49e:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e005      	b.n	800a4b0 <USB_ReadPacket+0x18>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4a4:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 800a4a8:	6809      	ldr	r1, [r1, #0]
 800a4aa:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d3f7      	bcc.n	800a4a4 <USB_ReadPacket+0xc>
}
 800a4b4:	4770      	bx	lr

0800a4b6 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a4b6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a4b8:	784a      	ldrb	r2, [r1, #1]
 800a4ba:	2a01      	cmp	r2, #1
 800a4bc:	d014      	beq.n	800a4e8 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4be:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a4c2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	db06      	blt.n	800a4d8 <USB_EPSetStall+0x22>
 800a4ca:	b12b      	cbz	r3, 800a4d8 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a4cc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a4d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4d4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a4d8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a4dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4e0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4e8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a4ec:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	db06      	blt.n	800a502 <USB_EPSetStall+0x4c>
 800a4f4:	b12b      	cbz	r3, 800a502 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a4f6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a4fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4fe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a502:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a50a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a50e:	e7e9      	b.n	800a4e4 <USB_EPSetStall+0x2e>

0800a510 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a510:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a512:	784a      	ldrb	r2, [r1, #1]
 800a514:	2a01      	cmp	r2, #1
 800a516:	d00e      	beq.n	800a536 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a518:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a51c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a524:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a528:	78cb      	ldrb	r3, [r1, #3]
 800a52a:	3b02      	subs	r3, #2
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d915      	bls.n	800a55e <USB_EPClearStall+0x4e>
}
 800a532:	2000      	movs	r0, #0
 800a534:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a536:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a53a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a53e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a542:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a546:	78cb      	ldrb	r3, [r1, #3]
 800a548:	3b02      	subs	r3, #2
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d8f0      	bhi.n	800a532 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a550:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a558:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a55c:	e7e9      	b.n	800a532 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a55e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a566:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800a56a:	e7e2      	b.n	800a532 <USB_EPClearStall+0x22>

0800a56c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a56c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a570:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a574:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a578:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a57c:	0109      	lsls	r1, r1, #4
 800a57e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800a582:	430b      	orrs	r3, r1
 800a584:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800a588:	2000      	movs	r0, #0
 800a58a:	4770      	bx	lr

0800a58c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a58c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800a590:	f023 0303 	bic.w	r3, r3, #3
 800a594:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a598:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a59c:	f023 0302 	bic.w	r3, r3, #2
 800a5a0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	4770      	bx	lr

0800a5a8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5a8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5b4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a5b8:	f043 0302 	orr.w	r3, r3, #2
 800a5bc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	4770      	bx	lr

0800a5c4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a5c4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a5c6:	6980      	ldr	r0, [r0, #24]
}
 800a5c8:	4010      	ands	r0, r2
 800a5ca:	4770      	bx	lr

0800a5cc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a5cc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a5d0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5d4:	69c0      	ldr	r0, [r0, #28]
 800a5d6:	4018      	ands	r0, r3
}
 800a5d8:	0c00      	lsrs	r0, r0, #16
 800a5da:	4770      	bx	lr

0800a5dc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a5dc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a5e0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5e4:	69c0      	ldr	r0, [r0, #28]
 800a5e6:	4018      	ands	r0, r3
}
 800a5e8:	b280      	uxth	r0, r0
 800a5ea:	4770      	bx	lr

0800a5ec <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5ec:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800a5f0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800a5f8:	6940      	ldr	r0, [r0, #20]
}
 800a5fa:	4010      	ands	r0, r2
 800a5fc:	4770      	bx	lr

0800a5fe <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800a5fe:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a602:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a606:	f001 0c0f 	and.w	ip, r1, #15
 800a60a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a60e:	01db      	lsls	r3, r3, #7
 800a610:	b2db      	uxtb	r3, r3
 800a612:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a614:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800a618:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800a61c:	6880      	ldr	r0, [r0, #8]
}
 800a61e:	4018      	ands	r0, r3
 800a620:	4770      	bx	lr

0800a622 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a622:	6940      	ldr	r0, [r0, #20]
}
 800a624:	f000 0001 	and.w	r0, r0, #1
 800a628:	4770      	bx	lr

0800a62a <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a62a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a62e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a632:	f023 0307 	bic.w	r3, r3, #7
 800a636:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a63a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a63e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a642:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a646:	2000      	movs	r0, #0
 800a648:	4770      	bx	lr
	...

0800a64c <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a64c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <USB_EP0_OutStart+0x40>)
 800a650:	429a      	cmp	r2, r3
 800a652:	d903      	bls.n	800a65c <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a654:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a658:	2b00      	cmp	r3, #0
 800a65a:	db14      	blt.n	800a686 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a662:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800a666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a66a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a66e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800a672:	f043 0318 	orr.w	r3, r3, #24
 800a676:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a67a:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800a67e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a682:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 800a686:	2000      	movs	r0, #0
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	4f54300a 	.word	0x4f54300a

0800a690 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800a690:	b510      	push	{r4, lr}
 800a692:	b08a      	sub	sp, #40	; 0x28
 800a694:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800a696:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 800a69a:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 800a69e:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	9101      	str	r1, [sp, #4]
 800a6a6:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a6aa:	9104      	str	r1, [sp, #16]
 800a6ac:	9105      	str	r1, [sp, #20]
 800a6ae:	9106      	str	r1, [sp, #24]
 800a6b0:	9107      	str	r1, [sp, #28]
 800a6b2:	9108      	str	r1, [sp, #32]
 800a6b4:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 800a6b6:	233f      	movs	r3, #63	; 0x3f
 800a6b8:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800a6bc:	238a      	movs	r3, #138	; 0x8a
 800a6be:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800a6c2:	ab03      	add	r3, sp, #12
 800a6c4:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 800a6ca:	ab01      	add	r3, sp, #4
 800a6cc:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800a6ce:	2307      	movs	r3, #7
 800a6d0:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a6d2:	a804      	add	r0, sp, #16
 800a6d4:	f000 fbfe 	bl	800aed4 <hci_send_req>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	db0f      	blt.n	800a6fc <aci_gap_init_IDB05A1+0x6c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800a6dc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a6e0:	b950      	cbnz	r0, 800a6f8 <aci_gap_init_IDB05A1+0x68>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800a6e2:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 800a6e6:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800a6e8:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 800a6ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ee:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800a6f0:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 800a6f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f6:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800a6f8:	b00a      	add	sp, #40	; 0x28
 800a6fa:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800a6fc:	20ff      	movs	r0, #255	; 0xff
 800a6fe:	e7fb      	b.n	800a6f8 <aci_gap_init_IDB05A1+0x68>

0800a700 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	b092      	sub	sp, #72	; 0x48
 800a704:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800a708:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800a70c:	192e      	adds	r6, r5, r4
 800a70e:	360e      	adds	r6, #14
 800a710:	2e28      	cmp	r6, #40	; 0x28
 800a712:	d851      	bhi.n	800a7b8 <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800a714:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800a718:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800a71c:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 800a720:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 800a724:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a728:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 800a72c:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800a730:	ae01      	add	r6, sp, #4
 800a732:	462a      	mov	r2, r5
 800a734:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a736:	a803      	add	r0, sp, #12
 800a738:	f001 ff9e 	bl	800c678 <memcpy>
  indx +=  LocalNameLen;
 800a73c:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 800a740:	aa12      	add	r2, sp, #72	; 0x48
 800a742:	fa52 f383 	uxtab	r3, r2, r3
 800a746:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 800a74a:	3509      	adds	r5, #9
 800a74c:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800a74e:	4622      	mov	r2, r4
 800a750:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a752:	1970      	adds	r0, r6, r5
 800a754:	f001 ff90 	bl	800c678 <memcpy>
  indx +=  ServiceUUIDLen;  
 800a758:	442c      	add	r4, r5
 800a75a:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800a75c:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800a760:	446b      	add	r3, sp
 800a762:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800a766:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 800a76a:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800a76c:	aa12      	add	r2, sp, #72	; 0x48
 800a76e:	fa52 f383 	uxtab	r3, r2, r3
 800a772:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800a776:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 800a77a:	3404      	adds	r4, #4
 800a77c:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a77e:	2100      	movs	r1, #0
 800a780:	910c      	str	r1, [sp, #48]	; 0x30
 800a782:	910d      	str	r1, [sp, #52]	; 0x34
 800a784:	910e      	str	r1, [sp, #56]	; 0x38
 800a786:	910f      	str	r1, [sp, #60]	; 0x3c
 800a788:	9110      	str	r1, [sp, #64]	; 0x40
 800a78a:	9111      	str	r1, [sp, #68]	; 0x44
  rq.ogf = OGF_VENDOR_CMD;
 800a78c:	233f      	movs	r3, #63	; 0x3f
 800a78e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800a792:	2383      	movs	r3, #131	; 0x83
 800a794:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 800a798:	960e      	str	r6, [sp, #56]	; 0x38
  rq.clen = indx;
 800a79a:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 800a79c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800a7a0:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800a7a6:	a80c      	add	r0, sp, #48	; 0x30
 800a7a8:	f000 fb94 	bl	800aed4 <hci_send_req>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	db05      	blt.n	800a7bc <aci_gap_set_discoverable+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a7b0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 800a7b4:	b012      	add	sp, #72	; 0x48
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a7b8:	2042      	movs	r0, #66	; 0x42
 800a7ba:	e7fb      	b.n	800a7b4 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_TIMEOUT;
 800a7bc:	20ff      	movs	r0, #255	; 0xff
 800a7be:	e7f9      	b.n	800a7b4 <aci_gap_set_discoverable+0xb4>

0800a7c0 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800a7c0:	b500      	push	{lr}
 800a7c2:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800a7c4:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 800a7c8:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800a7cc:	b161      	cbz	r1, 800a7e8 <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800a7ce:	f8d2 c000 	ldr.w	ip, [r2]
 800a7d2:	6850      	ldr	r0, [r2, #4]
 800a7d4:	6891      	ldr	r1, [r2, #8]
 800a7d6:	68d2      	ldr	r2, [r2, #12]
 800a7d8:	f8cd c006 	str.w	ip, [sp, #6]
 800a7dc:	f8cd 000a 	str.w	r0, [sp, #10]
 800a7e0:	f8cd 100e 	str.w	r1, [sp, #14]
 800a7e4:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800a7e8:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 800a7ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a7f0:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 800a7f4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800a7f8:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 800a7fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7fe:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 800a802:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800a806:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a80a:	2100      	movs	r1, #0
 800a80c:	9108      	str	r1, [sp, #32]
 800a80e:	9109      	str	r1, [sp, #36]	; 0x24
 800a810:	910a      	str	r1, [sp, #40]	; 0x28
 800a812:	910b      	str	r1, [sp, #44]	; 0x2c
 800a814:	910c      	str	r1, [sp, #48]	; 0x30
 800a816:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800a818:	233f      	movs	r3, #63	; 0x3f
 800a81a:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800a81e:	2386      	movs	r3, #134	; 0x86
 800a820:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800a824:	ab01      	add	r3, sp, #4
 800a826:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 800a828:	231a      	movs	r3, #26
 800a82a:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 800a82c:	f10d 0303 	add.w	r3, sp, #3
 800a830:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 800a832:	2301      	movs	r3, #1
 800a834:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800a836:	a808      	add	r0, sp, #32
 800a838:	f000 fb4c 	bl	800aed4 <hci_send_req>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	db04      	blt.n	800a84a <aci_gap_set_auth_requirement+0x8a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a840:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 800a844:	b00f      	add	sp, #60	; 0x3c
 800a846:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800a84a:	20ff      	movs	r0, #255	; 0xff
 800a84c:	e7fa      	b.n	800a844 <aci_gap_set_auth_requirement+0x84>

0800a84e <aci_gap_update_adv_data>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 800a84e:	281f      	cmp	r0, #31
 800a850:	d829      	bhi.n	800a8a6 <aci_gap_update_adv_data+0x58>
{
 800a852:	b510      	push	{r4, lr}
 800a854:	b090      	sub	sp, #64	; 0x40
 800a856:	4604      	mov	r4, r0
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 800a858:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800a85c:	4602      	mov	r2, r0
 800a85e:	f10d 0005 	add.w	r0, sp, #5
 800a862:	f001 ff09 	bl	800c678 <memcpy>
  indx +=  AdvLen;
 800a866:	3401      	adds	r4, #1
 800a868:	b2e4      	uxtb	r4, r4
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a86a:	2100      	movs	r1, #0
 800a86c:	910a      	str	r1, [sp, #40]	; 0x28
 800a86e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a870:	910c      	str	r1, [sp, #48]	; 0x30
 800a872:	910d      	str	r1, [sp, #52]	; 0x34
 800a874:	910e      	str	r1, [sp, #56]	; 0x38
 800a876:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_VENDOR_CMD;
 800a878:	233f      	movs	r3, #63	; 0x3f
 800a87a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800a87e:	238e      	movs	r3, #142	; 0x8e
 800a880:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = (void *)buffer;
 800a884:	ab01      	add	r3, sp, #4
 800a886:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 800a888:	940d      	str	r4, [sp, #52]	; 0x34
  rq.rparam = &status;
 800a88a:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 800a88e:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800a890:	2301      	movs	r3, #1
 800a892:	930f      	str	r3, [sp, #60]	; 0x3c
    
  if (hci_send_req(&rq, FALSE) < 0)
 800a894:	a80a      	add	r0, sp, #40	; 0x28
 800a896:	f000 fb1d 	bl	800aed4 <hci_send_req>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	db05      	blt.n	800a8aa <aci_gap_update_adv_data+0x5c>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 800a89e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 800a8a2:	b010      	add	sp, #64	; 0x40
 800a8a4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a8a6:	2042      	movs	r0, #66	; 0x42
}
 800a8a8:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800a8aa:	20ff      	movs	r0, #255	; 0xff
 800a8ac:	e7f9      	b.n	800a8a2 <aci_gap_update_adv_data+0x54>

0800a8ae <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800a8ae:	b500      	push	{lr}
 800a8b0:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	9102      	str	r1, [sp, #8]
 800a8b6:	9103      	str	r1, [sp, #12]
 800a8b8:	9104      	str	r1, [sp, #16]
 800a8ba:	9105      	str	r1, [sp, #20]
 800a8bc:	9106      	str	r1, [sp, #24]
 800a8be:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800a8c0:	233f      	movs	r3, #63	; 0x3f
 800a8c2:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 800a8c6:	f240 1301 	movw	r3, #257	; 0x101
 800a8ca:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800a8ce:	f10d 0307 	add.w	r3, sp, #7
 800a8d2:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800a8d8:	a802      	add	r0, sp, #8
 800a8da:	f000 fafb 	bl	800aed4 <hci_send_req>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	db04      	blt.n	800a8ec <aci_gatt_init+0x3e>
    return BLE_STATUS_TIMEOUT;

  return status;
 800a8e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a8e6:	b009      	add	sp, #36	; 0x24
 800a8e8:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800a8ec:	20ff      	movs	r0, #255	; 0xff
 800a8ee:	e7fa      	b.n	800a8e6 <aci_gatt_init+0x38>

0800a8f0 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	b08c      	sub	sp, #48	; 0x30
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 800a8f8:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 800a8fc:	2801      	cmp	r0, #1
 800a8fe:	d038      	beq.n	800a972 <aci_gatt_add_serv+0x82>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a900:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800a902:	4622      	mov	r2, r4
 800a904:	f10d 0001 	add.w	r0, sp, #1
 800a908:	f001 feb6 	bl	800c678 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800a90c:	f104 0331 	add.w	r3, r4, #49	; 0x31
 800a910:	446b      	add	r3, sp
 800a912:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
    
  buffer[indx] = max_attr_records;
 800a916:	f104 0332 	add.w	r3, r4, #50	; 0x32
 800a91a:	eb0d 0203 	add.w	r2, sp, r3
 800a91e:	f802 5c30 	strb.w	r5, [r2, #-48]
  indx++;
 800a922:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a924:	ab05      	add	r3, sp, #20
 800a926:	2100      	movs	r1, #0
 800a928:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a92c:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a930:	9106      	str	r1, [sp, #24]
 800a932:	9107      	str	r1, [sp, #28]
 800a934:	9108      	str	r1, [sp, #32]
 800a936:	9109      	str	r1, [sp, #36]	; 0x24
 800a938:	910a      	str	r1, [sp, #40]	; 0x28
 800a93a:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 800a93c:	223f      	movs	r2, #63	; 0x3f
 800a93e:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800a942:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a946:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 800a94a:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 800a94e:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800a950:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a952:	2303      	movs	r3, #3
 800a954:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800a956:	a806      	add	r0, sp, #24
 800a958:	f000 fabc 	bl	800aed4 <hci_send_req>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	db0a      	blt.n	800a976 <aci_gatt_add_serv+0x86>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800a960:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800a964:	b918      	cbnz	r0, 800a96e <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800a966:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 800a96a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a96c:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800a96e:	b00c      	add	sp, #48	; 0x30
 800a970:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 800a972:	2402      	movs	r4, #2
 800a974:	e7c5      	b.n	800a902 <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 800a976:	20ff      	movs	r0, #255	; 0xff
 800a978:	e7f9      	b.n	800a96e <aci_gatt_add_serv+0x7e>

0800a97a <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800a97a:	b530      	push	{r4, r5, lr}
 800a97c:	b08f      	sub	sp, #60	; 0x3c
 800a97e:	460c      	mov	r4, r1
 800a980:	4611      	mov	r1, r2
 800a982:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800a984:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 800a988:	f88d 4002 	strb.w	r4, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 800a98c:	2c01      	cmp	r4, #1
 800a98e:	d056      	beq.n	800aa3e <aci_gatt_add_char+0xc4>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a990:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a992:	4622      	mov	r2, r4
 800a994:	f10d 0003 	add.w	r0, sp, #3
 800a998:	f001 fe6e 	bl	800c678 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800a99c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 800a9a0:	eb0d 0203 	add.w	r2, sp, r3
 800a9a4:	f802 5c38 	strb.w	r5, [r2, #-56]
  indx++;
    
  buffer[indx] = charProperties;
 800a9a8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800a9ac:	446b      	add	r3, sp
 800a9ae:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800a9b2:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = secPermissions;
 800a9b6:	f104 033d 	add.w	r3, r4, #61	; 0x3d
 800a9ba:	446b      	add	r3, sp
 800a9bc:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800a9c0:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = gattEvtMask;
 800a9c4:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 800a9c8:	446b      	add	r3, sp
 800a9ca:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a9ce:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = encryKeySize;
 800a9d2:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 800a9d6:	446b      	add	r3, sp
 800a9d8:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a9dc:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = isVariable;
 800a9e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a9e4:	446b      	add	r3, sp
 800a9e6:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800a9ea:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 800a9ee:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a9f0:	ab07      	add	r3, sp, #28
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a9f8:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a9fc:	9108      	str	r1, [sp, #32]
 800a9fe:	9109      	str	r1, [sp, #36]	; 0x24
 800aa00:	910a      	str	r1, [sp, #40]	; 0x28
 800aa02:	910b      	str	r1, [sp, #44]	; 0x2c
 800aa04:	910c      	str	r1, [sp, #48]	; 0x30
 800aa06:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800aa08:	223f      	movs	r2, #63	; 0x3f
 800aa0a:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 800aa0e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aa12:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 800aa16:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 800aa1a:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 800aa1c:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800aa22:	a808      	add	r0, sp, #32
 800aa24:	f000 fa56 	bl	800aed4 <hci_send_req>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	db0a      	blt.n	800aa42 <aci_gatt_add_char+0xc8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800aa2c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800aa30:	b918      	cbnz	r0, 800aa3a <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800aa32:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 800aa36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa38:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800aa3a:	b00f      	add	sp, #60	; 0x3c
 800aa3c:	bd30      	pop	{r4, r5, pc}
    uuid_len = 2;
 800aa3e:	2402      	movs	r4, #2
 800aa40:	e7a7      	b.n	800a992 <aci_gatt_add_char+0x18>
    return BLE_STATUS_TIMEOUT;
 800aa42:	20ff      	movs	r0, #255	; 0xff
 800aa44:	e7f9      	b.n	800aa3a <aci_gatt_add_char+0xc0>

0800aa46 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800aa46:	2b7a      	cmp	r3, #122	; 0x7a
 800aa48:	d831      	bhi.n	800aaae <aci_gatt_update_char_value+0x68>
{
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	b0a8      	sub	sp, #160	; 0xa0
 800aa4e:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800aa50:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800aa54:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 800aa58:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 800aa5c:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800aa60:	461a      	mov	r2, r3
 800aa62:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800aa64:	f10d 000a 	add.w	r0, sp, #10
 800aa68:	f001 fe06 	bl	800c678 <memcpy>
  indx +=  charValueLen;
 800aa6c:	3406      	adds	r4, #6
 800aa6e:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aa70:	2100      	movs	r1, #0
 800aa72:	9122      	str	r1, [sp, #136]	; 0x88
 800aa74:	9123      	str	r1, [sp, #140]	; 0x8c
 800aa76:	9124      	str	r1, [sp, #144]	; 0x90
 800aa78:	9125      	str	r1, [sp, #148]	; 0x94
 800aa7a:	9126      	str	r1, [sp, #152]	; 0x98
 800aa7c:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800aa7e:	233f      	movs	r3, #63	; 0x3f
 800aa80:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800aa84:	f44f 7383 	mov.w	r3, #262	; 0x106
 800aa88:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800aa8c:	ab01      	add	r3, sp, #4
 800aa8e:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800aa90:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800aa92:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800aa96:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800aa9c:	a822      	add	r0, sp, #136	; 0x88
 800aa9e:	f000 fa19 	bl	800aed4 <hci_send_req>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	db05      	blt.n	800aab2 <aci_gatt_update_char_value+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800aaa6:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 800aaaa:	b028      	add	sp, #160	; 0xa0
 800aaac:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800aaae:	2042      	movs	r0, #66	; 0x42
}
 800aab0:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800aab2:	20ff      	movs	r0, #255	; 0xff
 800aab4:	e7f9      	b.n	800aaaa <aci_gatt_update_char_value+0x64>

0800aab6 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800aab6:	b500      	push	{lr}
 800aab8:	b089      	sub	sp, #36	; 0x24
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800aaba:	f8ad 0004 	strh.w	r0, [sp, #4]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800aabe:	2100      	movs	r1, #0
 800aac0:	9102      	str	r1, [sp, #8]
 800aac2:	9103      	str	r1, [sp, #12]
 800aac4:	9104      	str	r1, [sp, #16]
 800aac6:	9105      	str	r1, [sp, #20]
 800aac8:	9106      	str	r1, [sp, #24]
 800aaca:	9107      	str	r1, [sp, #28]
    rq.ogf = OGF_VENDOR_CMD;
 800aacc:	233f      	movs	r3, #63	; 0x3f
 800aace:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800aad2:	f240 1327 	movw	r3, #295	; 0x127
 800aad6:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 800aada:	ab01      	add	r3, sp, #4
 800aadc:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800aade:	2302      	movs	r3, #2
 800aae0:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 800aae2:	f10d 0303 	add.w	r3, sp, #3
 800aae6:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;
 800aae8:	2301      	movs	r3, #1
 800aaea:	9307      	str	r3, [sp, #28]

    if (hci_send_req(&rq, FALSE) < 0)
 800aaec:	a802      	add	r0, sp, #8
 800aaee:	f000 f9f1 	bl	800aed4 <hci_send_req>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	db04      	blt.n	800ab00 <aci_gatt_allow_read+0x4a>
      return BLE_STATUS_TIMEOUT;

    return status;
 800aaf6:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800aafa:	b009      	add	sp, #36	; 0x24
 800aafc:	f85d fb04 	ldr.w	pc, [sp], #4
      return BLE_STATUS_TIMEOUT;
 800ab00:	20ff      	movs	r0, #255	; 0xff
 800ab02:	e7fa      	b.n	800aafa <aci_gatt_allow_read+0x44>

0800ab04 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800ab04:	b510      	push	{r4, lr}
 800ab06:	b0a8      	sub	sp, #160	; 0xa0
 800ab08:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800ab0a:	297e      	cmp	r1, #126	; 0x7e
 800ab0c:	d829      	bhi.n	800ab62 <aci_hal_write_config_data+0x5e>
 800ab0e:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 800ab10:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 800ab14:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800ab18:	4622      	mov	r2, r4
 800ab1a:	f10d 0006 	add.w	r0, sp, #6
 800ab1e:	f001 fdab 	bl	800c678 <memcpy>
  indx +=  len;
 800ab22:	3402      	adds	r4, #2
 800ab24:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ab26:	2100      	movs	r1, #0
 800ab28:	9122      	str	r1, [sp, #136]	; 0x88
 800ab2a:	9123      	str	r1, [sp, #140]	; 0x8c
 800ab2c:	9124      	str	r1, [sp, #144]	; 0x90
 800ab2e:	9125      	str	r1, [sp, #148]	; 0x94
 800ab30:	9126      	str	r1, [sp, #152]	; 0x98
 800ab32:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800ab34:	233f      	movs	r3, #63	; 0x3f
 800ab36:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800ab3a:	230c      	movs	r3, #12
 800ab3c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800ab40:	ab01      	add	r3, sp, #4
 800ab42:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800ab44:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800ab46:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800ab4a:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800ab50:	a822      	add	r0, sp, #136	; 0x88
 800ab52:	f000 f9bf 	bl	800aed4 <hci_send_req>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	db05      	blt.n	800ab66 <aci_hal_write_config_data+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 800ab5a:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 800ab5e:	b028      	add	sp, #160	; 0xa0
 800ab60:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800ab62:	2042      	movs	r0, #66	; 0x42
 800ab64:	e7fb      	b.n	800ab5e <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
 800ab66:	20ff      	movs	r0, #255	; 0xff
 800ab68:	e7f9      	b.n	800ab5e <aci_hal_write_config_data+0x5a>

0800ab6a <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800ab6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6c:	b0a9      	sub	sp, #164	; 0xa4
 800ab6e:	460c      	mov	r4, r1
 800ab70:	4616      	mov	r6, r2
 800ab72:	461d      	mov	r5, r3
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800ab74:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ab78:	2100      	movs	r1, #0
 800ab7a:	9122      	str	r1, [sp, #136]	; 0x88
 800ab7c:	9123      	str	r1, [sp, #140]	; 0x8c
 800ab7e:	9124      	str	r1, [sp, #144]	; 0x90
 800ab80:	9125      	str	r1, [sp, #148]	; 0x94
 800ab82:	9126      	str	r1, [sp, #152]	; 0x98
 800ab84:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800ab86:	233f      	movs	r3, #63	; 0x3f
 800ab88:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800ab8c:	230d      	movs	r3, #13
 800ab8e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = &cp;
 800ab92:	ab21      	add	r3, sp, #132	; 0x84
 800ab94:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = sizeof(cp);
 800ab96:	2301      	movs	r3, #1
 800ab98:	9325      	str	r3, [sp, #148]	; 0x94
  rq.rparam = &rp;
 800ab9a:	ab01      	add	r3, sp, #4
 800ab9c:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = sizeof(rp);
 800ab9e:	2380      	movs	r3, #128	; 0x80
 800aba0:	9327      	str	r3, [sp, #156]	; 0x9c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800aba2:	a822      	add	r0, sp, #136	; 0x88
 800aba4:	f000 f996 	bl	800aed4 <hci_send_req>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	db18      	blt.n	800abde <aci_hal_read_config_data+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if(rp.status)
 800abac:	f89d 7004 	ldrb.w	r7, [sp, #4]
 800abb0:	b987      	cbnz	r7, 800abd4 <aci_hal_read_config_data+0x6a>
    return rp.status;
  
  *data_len_out_p = rq.rlen-1;
 800abb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800abb4:	f103 3cff 	add.w	ip, r3, #4294967295
 800abb8:	fa5f fc8c 	uxtb.w	ip, ip
 800abbc:	f886 c000 	strb.w	ip, [r6]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800abc0:	fa1f f38c 	uxth.w	r3, ip
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	d908      	bls.n	800abda <aci_hal_read_config_data+0x70>
 800abc8:	4622      	mov	r2, r4
 800abca:	f10d 0105 	add.w	r1, sp, #5
 800abce:	4628      	mov	r0, r5
 800abd0:	f001 fd52 	bl	800c678 <memcpy>
  
  return 0;
}
 800abd4:	4638      	mov	r0, r7
 800abd6:	b029      	add	sp, #164	; 0xa4
 800abd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800abda:	4662      	mov	r2, ip
 800abdc:	e7f5      	b.n	800abca <aci_hal_read_config_data+0x60>
    return BLE_STATUS_TIMEOUT;
 800abde:	27ff      	movs	r7, #255	; 0xff
 800abe0:	e7f8      	b.n	800abd4 <aci_hal_read_config_data+0x6a>

0800abe2 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800abe2:	b500      	push	{lr}
 800abe4:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800abe6:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800abea:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800abee:	2100      	movs	r1, #0
 800abf0:	9102      	str	r1, [sp, #8]
 800abf2:	9103      	str	r1, [sp, #12]
 800abf4:	9104      	str	r1, [sp, #16]
 800abf6:	9105      	str	r1, [sp, #20]
 800abf8:	9106      	str	r1, [sp, #24]
 800abfa:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800abfc:	233f      	movs	r3, #63	; 0x3f
 800abfe:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800ac02:	230f      	movs	r3, #15
 800ac04:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800ac08:	ab01      	add	r3, sp, #4
 800ac0a:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800ac10:	f10d 0303 	add.w	r3, sp, #3
 800ac14:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800ac16:	2301      	movs	r3, #1
 800ac18:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800ac1a:	a802      	add	r0, sp, #8
 800ac1c:	f000 f95a 	bl	800aed4 <hci_send_req>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	db04      	blt.n	800ac2e <aci_hal_set_tx_power_level+0x4c>
    return BLE_STATUS_TIMEOUT;

  return status;
 800ac24:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800ac28:	b009      	add	sp, #36	; 0x24
 800ac2a:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800ac2e:	20ff      	movs	r0, #255	; 0xff
 800ac30:	e7fa      	b.n	800ac28 <aci_hal_set_tx_power_level+0x46>

0800ac32 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800ac32:	b530      	push	{r4, r5, lr}
 800ac34:	b085      	sub	sp, #20
 800ac36:	4605      	mov	r5, r0
 800ac38:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800ac3a:	ab02      	add	r3, sp, #8
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	f10d 030a 	add.w	r3, sp, #10
 800ac42:	f10d 020e 	add.w	r2, sp, #14
 800ac46:	a903      	add	r1, sp, #12
 800ac48:	f10d 000f 	add.w	r0, sp, #15
 800ac4c:	f000 f839 	bl	800acc2 <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800ac50:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800ac54:	d114      	bne.n	800ac80 <getBlueNRGVersion+0x4e>
    *hwVersion = hci_revision >> 8;
 800ac56:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ac5a:	0a1a      	lsrs	r2, r3, #8
 800ac5c:	702a      	strb	r2, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800ac5e:	021b      	lsls	r3, r3, #8
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	8023      	strh	r3, [r4, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800ac64:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800ac68:	0912      	lsrs	r2, r2, #4
 800ac6a:	0112      	lsls	r2, r2, #4
 800ac6c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ac70:	4313      	orrs	r3, r2
 800ac72:	8023      	strh	r3, [r4, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800ac74:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800ac78:	f002 020f 	and.w	r2, r2, #15
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800ac80:	b005      	add	sp, #20
 800ac82:	bd30      	pop	{r4, r5, pc}

0800ac84 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800ac84:	b500      	push	{lr}
 800ac86:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ac88:	2100      	movs	r1, #0
 800ac8a:	9102      	str	r1, [sp, #8]
 800ac8c:	9103      	str	r1, [sp, #12]
 800ac8e:	9104      	str	r1, [sp, #16]
 800ac90:	9105      	str	r1, [sp, #20]
 800ac92:	9106      	str	r1, [sp, #24]
 800ac94:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_HOST_CTL;
 800ac96:	2303      	movs	r3, #3
 800ac98:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 800ac9c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800aca0:	f10d 0307 	add.w	r3, sp, #7
 800aca4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800aca6:	2301      	movs	r3, #1
 800aca8:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800acaa:	a802      	add	r0, sp, #8
 800acac:	f000 f912 	bl	800aed4 <hci_send_req>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	db04      	blt.n	800acbe <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800acb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800acb8:	b009      	add	sp, #36	; 0x24
 800acba:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800acbe:	20ff      	movs	r0, #255	; 0xff
 800acc0:	e7fa      	b.n	800acb8 <hci_reset+0x34>

0800acc2 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800acc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc6:	b08a      	sub	sp, #40	; 0x28
 800acc8:	4680      	mov	r8, r0
 800acca:	460f      	mov	r7, r1
 800accc:	4616      	mov	r6, r2
 800acce:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800acd0:	ac01      	add	r4, sp, #4
 800acd2:	2100      	movs	r1, #0
 800acd4:	9101      	str	r1, [sp, #4]
 800acd6:	9102      	str	r1, [sp, #8]
 800acd8:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800acdc:	9104      	str	r1, [sp, #16]
 800acde:	9105      	str	r1, [sp, #20]
 800ace0:	9106      	str	r1, [sp, #24]
 800ace2:	9107      	str	r1, [sp, #28]
 800ace4:	9108      	str	r1, [sp, #32]
 800ace6:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_INFO_PARAM;
 800ace8:	2304      	movs	r3, #4
 800acea:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800acee:	2301      	movs	r3, #1
 800acf0:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800acf4:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800acf6:	2309      	movs	r3, #9
 800acf8:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800acfa:	a804      	add	r0, sp, #16
 800acfc:	f000 f8ea 	bl	800aed4 <hci_send_req>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	db16      	blt.n	800ad32 <hci_le_read_local_version+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800ad04:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ad08:	b980      	cbnz	r0, 800ad2c <hci_le_read_local_version+0x6a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800ad0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad0e:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 800ad12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ad16:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800ad18:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ad1c:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800ad1e:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 800ad22:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800ad24:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 800ad28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad2a:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800ad2c:	b00a      	add	sp, #40	; 0x28
 800ad2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800ad32:	20ff      	movs	r0, #255	; 0xff
 800ad34:	e7fa      	b.n	800ad2c <hci_le_read_local_version+0x6a>

0800ad36 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800ad36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad38:	b091      	sub	sp, #68	; 0x44
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800ad3e:	af02      	add	r7, sp, #8
 800ad40:	2620      	movs	r6, #32
 800ad42:	4632      	mov	r2, r6
 800ad44:	2100      	movs	r1, #0
 800ad46:	4638      	mov	r0, r7
 800ad48:	f001 fc52 	bl	800c5f0 <memset>
  scan_resp_cp.length = length;
 800ad4c:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800ad50:	4622      	mov	r2, r4
 800ad52:	2c1f      	cmp	r4, #31
 800ad54:	bf28      	it	cs
 800ad56:	221f      	movcs	r2, #31
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f10d 0009 	add.w	r0, sp, #9
 800ad5e:	f001 fc8b 	bl	800c678 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ad62:	2100      	movs	r1, #0
 800ad64:	910a      	str	r1, [sp, #40]	; 0x28
 800ad66:	910b      	str	r1, [sp, #44]	; 0x2c
 800ad68:	910c      	str	r1, [sp, #48]	; 0x30
 800ad6a:	910d      	str	r1, [sp, #52]	; 0x34
 800ad6c:	910e      	str	r1, [sp, #56]	; 0x38
 800ad6e:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_LE_CTL;
 800ad70:	2308      	movs	r3, #8
 800ad72:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800ad76:	2309      	movs	r3, #9
 800ad78:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 800ad7c:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800ad7e:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 800ad80:	f10d 0307 	add.w	r3, sp, #7
 800ad84:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800ad86:	2301      	movs	r3, #1
 800ad88:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ad8a:	a80a      	add	r0, sp, #40	; 0x28
 800ad8c:	f000 f8a2 	bl	800aed4 <hci_send_req>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	db03      	blt.n	800ad9c <hci_le_set_scan_resp_data+0x66>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800ad94:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800ad98:	b011      	add	sp, #68	; 0x44
 800ad9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800ad9c:	20ff      	movs	r0, #255	; 0xff
 800ad9e:	e7fb      	b.n	800ad98 <hci_le_set_scan_resp_data+0x62>

0800ada0 <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ada0:	7a03      	ldrb	r3, [r0, #8]
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d107      	bne.n	800adb6 <verify_packet+0x16>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ada6:	7a82      	ldrb	r2, [r0, #10]
 800ada8:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 800adac:	3b03      	subs	r3, #3
 800adae:	429a      	cmp	r2, r3
 800adb0:	d103      	bne.n	800adba <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 800adb2:	2000      	movs	r0, #0
 800adb4:	4770      	bx	lr
    return 1; /* Incorrect type */
 800adb6:	2001      	movs	r0, #1
 800adb8:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 800adba:	2002      	movs	r0, #2
}
 800adbc:	4770      	bx	lr
	...

0800adc0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800adc0:	b510      	push	{r4, lr}
 800adc2:	b0a2      	sub	sp, #136	; 0x88
 800adc4:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800adc6:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 800adca:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
 800adce:	f8ad c004 	strh.w	ip, [sp, #4]
  hc.plen = plen;
 800add2:	f88d 2006 	strb.w	r2, [sp, #6]

  payload[0] = HCI_COMMAND_PKT;
 800add6:	2101      	movs	r1, #1
 800add8:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800addc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800ade0:	b2d1      	uxtb	r1, r2
 800ade2:	f8ad 0009 	strh.w	r0, [sp, #9]
 800ade6:	f88d 100b 	strb.w	r1, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800adea:	4619      	mov	r1, r3
 800adec:	a803      	add	r0, sp, #12
 800adee:	f001 fc43 	bl	800c678 <memcpy>
  
  if (hciContext.io.Send)
 800adf2:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <send_cmd+0x44>)
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	b113      	cbz	r3, 800adfe <send_cmd+0x3e>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800adf8:	1d21      	adds	r1, r4, #4
 800adfa:	a802      	add	r0, sp, #8
 800adfc:	4798      	blx	r3
  }
}
 800adfe:	b022      	add	sp, #136	; 0x88
 800ae00:	bd10      	pop	{r4, pc}
 800ae02:	bf00      	nop
 800ae04:	20002630 	.word	0x20002630

0800ae08 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	b082      	sub	sp, #8
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ae0c:	e00a      	b.n	800ae24 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800ae0e:	4c09      	ldr	r4, [pc, #36]	; (800ae34 <free_event_list+0x2c>)
 800ae10:	a901      	add	r1, sp, #4
 800ae12:	f104 0020 	add.w	r0, r4, #32
 800ae16:	f000 f997 	bl	800b148 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800ae1a:	9901      	ldr	r1, [sp, #4]
 800ae1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ae20:	f000 f97b 	bl	800b11a <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ae24:	4804      	ldr	r0, [pc, #16]	; (800ae38 <free_event_list+0x30>)
 800ae26:	f000 f9b1 	bl	800b18c <list_get_size>
 800ae2a:	2801      	cmp	r0, #1
 800ae2c:	ddef      	ble.n	800ae0e <free_event_list+0x6>
  }
}
 800ae2e:	b002      	add	sp, #8
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	bf00      	nop
 800ae34:	20002630 	.word	0x20002630
 800ae38:	20002658 	.word	0x20002658

0800ae3c <move_list>:
{
 800ae3c:	b530      	push	{r4, r5, lr}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	4605      	mov	r5, r0
 800ae42:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 800ae44:	e007      	b.n	800ae56 <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 800ae46:	a901      	add	r1, sp, #4
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 f98e 	bl	800b16a <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ae4e:	9901      	ldr	r1, [sp, #4]
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f956 	bl	800b102 <list_insert_head>
  while (!list_is_empty(src_list))
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 f947 	bl	800b0ea <list_is_empty>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0f2      	beq.n	800ae46 <move_list+0xa>
}
 800ae60:	b003      	add	sp, #12
 800ae62:	bd30      	pop	{r4, r5, pc}

0800ae64 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ae64:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 800ae66:	b108      	cbz	r0, 800ae6c <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800ae68:	4a12      	ldr	r2, [pc, #72]	; (800aeb4 <hci_init+0x50>)
 800ae6a:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800ae6c:	4c11      	ldr	r4, [pc, #68]	; (800aeb4 <hci_init+0x50>)
 800ae6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ae72:	f000 f937 	bl	800b0e4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800ae76:	f104 0020 	add.w	r0, r4, #32
 800ae7a:	f000 f933 	bl	800b0e4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800ae7e:	f7fa fa4f 	bl	8005320 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ae82:	2400      	movs	r4, #0
 800ae84:	e00a      	b.n	800ae9c <hci_init+0x38>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800ae86:	480b      	ldr	r0, [pc, #44]	; (800aeb4 <hci_init+0x50>)
 800ae88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae8c:	218c      	movs	r1, #140	; 0x8c
 800ae8e:	fb01 3104 	mla	r1, r1, r4, r3
 800ae92:	3028      	adds	r0, #40	; 0x28
 800ae94:	f000 f941 	bl	800b11a <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ae98:	3401      	adds	r4, #1
 800ae9a:	b2e4      	uxtb	r4, r4
 800ae9c:	2c04      	cmp	r4, #4
 800ae9e:	d9f2      	bls.n	800ae86 <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800aea0:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <hci_init+0x50>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	b10b      	cbz	r3, 800aeaa <hci_init+0x46>
 800aea6:	2000      	movs	r0, #0
 800aea8:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800aeaa:	4b02      	ldr	r3, [pc, #8]	; (800aeb4 <hci_init+0x50>)
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	b103      	cbz	r3, 800aeb2 <hci_init+0x4e>
 800aeb0:	4798      	blx	r3
}
 800aeb2:	bd10      	pop	{r4, pc}
 800aeb4:	20002630 	.word	0x20002630

0800aeb8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800aeb8:	6802      	ldr	r2, [r0, #0]
 800aeba:	4b05      	ldr	r3, [pc, #20]	; (800aed0 <hci_register_io_bus+0x18>)
 800aebc:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800aebe:	68c2      	ldr	r2, [r0, #12]
 800aec0:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800aec2:	6902      	ldr	r2, [r0, #16]
 800aec4:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800aec6:	6982      	ldr	r2, [r0, #24]
 800aec8:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800aeca:	6882      	ldr	r2, [r0, #8]
 800aecc:	609a      	str	r2, [r3, #8]
}
 800aece:	4770      	bx	lr
 800aed0:	20002630 	.word	0x20002630

0800aed4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	4605      	mov	r5, r0
 800aeda:	460c      	mov	r4, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800aedc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800aee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aee4:	8802      	ldrh	r2, [r0, #0]
 800aee6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800aeea:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800aeec:	2300      	movs	r3, #0
 800aeee:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800aef0:	a801      	add	r0, sp, #4
 800aef2:	f000 f8f7 	bl	800b0e4 <list_init_head>

  free_event_list();
 800aef6:	f7ff ff87 	bl	800ae08 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800aefa:	68ab      	ldr	r3, [r5, #8]
 800aefc:	7b2a      	ldrb	r2, [r5, #12]
 800aefe:	8869      	ldrh	r1, [r5, #2]
 800af00:	8828      	ldrh	r0, [r5, #0]
 800af02:	f7ff ff5d 	bl	800adc0 <send_cmd>
  
  if (async)
 800af06:	2c00      	cmp	r4, #0
 800af08:	f040 8086 	bne.w	800b018 <hci_send_req+0x144>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800af0c:	f7fb fd9a 	bl	8006a44 <HAL_GetTick>
 800af10:	4604      	mov	r4, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800af12:	f7fb fd97 	bl	8006a44 <HAL_GetTick>
 800af16:	1b00      	subs	r0, r0, r4
 800af18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800af1c:	d822      	bhi.n	800af64 <hci_send_req+0x90>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800af1e:	483f      	ldr	r0, [pc, #252]	; (800b01c <hci_send_req+0x148>)
 800af20:	f000 f8e3 	bl	800b0ea <list_is_empty>
 800af24:	2800      	cmp	r0, #0
 800af26:	d1f4      	bne.n	800af12 <hci_send_req+0x3e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800af28:	a903      	add	r1, sp, #12
 800af2a:	483c      	ldr	r0, [pc, #240]	; (800b01c <hci_send_req+0x148>)
 800af2c:	f000 f90c 	bl	800b148 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800af30:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 800af32:	7a1a      	ldrb	r2, [r3, #8]
 800af34:	2a04      	cmp	r2, #4
 800af36:	d128      	bne.n	800af8a <hci_send_req+0xb6>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800af38:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800af3c:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
 800af40:	1ec4      	subs	r4, r0, #3
    
      switch (event_pckt->evt) 
 800af42:	7a5a      	ldrb	r2, [r3, #9]
 800af44:	2a10      	cmp	r2, #16
 800af46:	d00d      	beq.n	800af64 <hci_send_req+0x90>
 800af48:	d819      	bhi.n	800af7e <hci_send_req+0xaa>
 800af4a:	2a0e      	cmp	r2, #14
 800af4c:	d036      	beq.n	800afbc <hci_send_req+0xe8>
 800af4e:	2a0f      	cmp	r2, #15
 800af50:	d11b      	bne.n	800af8a <hci_send_req+0xb6>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 800af52:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 800af56:	42b2      	cmp	r2, r6
 800af58:	d104      	bne.n	800af64 <hci_send_req+0x90>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800af5a:	686a      	ldr	r2, [r5, #4]
 800af5c:	2a0f      	cmp	r2, #15
 800af5e:	d024      	beq.n	800afaa <hci_send_req+0xd6>
          if (cs->status) {
 800af60:	7adb      	ldrb	r3, [r3, #11]
 800af62:	b193      	cbz	r3, 800af8a <hci_send_req+0xb6>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800af64:	9903      	ldr	r1, [sp, #12]
 800af66:	b111      	cbz	r1, 800af6e <hci_send_req+0x9a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800af68:	482d      	ldr	r0, [pc, #180]	; (800b020 <hci_send_req+0x14c>)
 800af6a:	f000 f8ca 	bl	800b102 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800af6e:	a901      	add	r1, sp, #4
 800af70:	482a      	ldr	r0, [pc, #168]	; (800b01c <hci_send_req+0x148>)
 800af72:	f7ff ff63 	bl	800ae3c <move_list>

  return -1;
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800af7a:	b004      	add	sp, #16
 800af7c:	bd70      	pop	{r4, r5, r6, pc}
      switch (event_pckt->evt) 
 800af7e:	2a3e      	cmp	r2, #62	; 0x3e
 800af80:	d103      	bne.n	800af8a <hci_send_req+0xb6>
        if (me->subevent != r->event)
 800af82:	7ad9      	ldrb	r1, [r3, #11]
 800af84:	686a      	ldr	r2, [r5, #4]
 800af86:	4291      	cmp	r1, r2
 800af88:	d033      	beq.n	800aff2 <hci_send_req+0x11e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800af8a:	4825      	ldr	r0, [pc, #148]	; (800b020 <hci_send_req+0x14c>)
 800af8c:	f000 f8ad 	bl	800b0ea <list_is_empty>
 800af90:	b120      	cbz	r0, 800af9c <hci_send_req+0xc8>
 800af92:	4822      	ldr	r0, [pc, #136]	; (800b01c <hci_send_req+0x148>)
 800af94:	f000 f8a9 	bl	800b0ea <list_is_empty>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d136      	bne.n	800b00a <hci_send_req+0x136>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800af9c:	9903      	ldr	r1, [sp, #12]
 800af9e:	a801      	add	r0, sp, #4
 800afa0:	f000 f8bb 	bl	800b11a <list_insert_tail>
      hciReadPacket=NULL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	e7b0      	b.n	800af0c <hci_send_req+0x38>
        r->rlen = MIN(len, r->rlen);
 800afaa:	696a      	ldr	r2, [r5, #20]
 800afac:	42a2      	cmp	r2, r4
 800afae:	bf28      	it	cs
 800afb0:	4622      	movcs	r2, r4
 800afb2:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800afb4:	6928      	ldr	r0, [r5, #16]
 800afb6:	f001 fb5f 	bl	800c678 <memcpy>
        goto done;
 800afba:	e00d      	b.n	800afd8 <hci_send_req+0x104>
        if (cc->opcode != opcode)
 800afbc:	899a      	ldrh	r2, [r3, #12]
 800afbe:	42b2      	cmp	r2, r6
 800afc0:	d1d0      	bne.n	800af64 <hci_send_req+0x90>
        len -= EVT_CMD_COMPLETE_SIZE;
 800afc2:	3806      	subs	r0, #6
        r->rlen = MIN(len, r->rlen);
 800afc4:	696a      	ldr	r2, [r5, #20]
 800afc6:	4282      	cmp	r2, r0
 800afc8:	bf28      	it	cs
 800afca:	4602      	movcs	r2, r0
 800afcc:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800afce:	f103 010e 	add.w	r1, r3, #14
 800afd2:	6928      	ldr	r0, [r5, #16]
 800afd4:	f001 fb50 	bl	800c678 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800afd8:	4c12      	ldr	r4, [pc, #72]	; (800b024 <hci_send_req+0x150>)
 800afda:	9903      	ldr	r1, [sp, #12]
 800afdc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800afe0:	f000 f88f 	bl	800b102 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800afe4:	a901      	add	r1, sp, #4
 800afe6:	f104 0020 	add.w	r0, r4, #32
 800afea:	f7ff ff27 	bl	800ae3c <move_list>
  return 0;
 800afee:	2000      	movs	r0, #0
 800aff0:	e7c3      	b.n	800af7a <hci_send_req+0xa6>
        len -= 1;
 800aff2:	3804      	subs	r0, #4
        r->rlen = MIN(len, r->rlen);
 800aff4:	696a      	ldr	r2, [r5, #20]
 800aff6:	4282      	cmp	r2, r0
 800aff8:	bf28      	it	cs
 800affa:	4602      	movcs	r2, r0
 800affc:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800affe:	f103 010c 	add.w	r1, r3, #12
 800b002:	6928      	ldr	r0, [r5, #16]
 800b004:	f001 fb38 	bl	800c678 <memcpy>
        goto done;
 800b008:	e7e6      	b.n	800afd8 <hci_send_req+0x104>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b00a:	9903      	ldr	r1, [sp, #12]
 800b00c:	4804      	ldr	r0, [pc, #16]	; (800b020 <hci_send_req+0x14c>)
 800b00e:	f000 f884 	bl	800b11a <list_insert_tail>
      hciReadPacket=NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	e779      	b.n	800af0c <hci_send_req+0x38>
    return 0;
 800b018:	2000      	movs	r0, #0
 800b01a:	e7ae      	b.n	800af7a <hci_send_req+0xa6>
 800b01c:	20002650 	.word	0x20002650
 800b020:	20002658 	.word	0x20002658
 800b024:	20002630 	.word	0x20002630

0800b028 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b028:	b510      	push	{r4, lr}
 800b02a:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b030:	e006      	b.n	800b040 <hci_user_evt_proc+0x18>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b032:	9801      	ldr	r0, [sp, #4]
 800b034:	3008      	adds	r0, #8
 800b036:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b038:	9901      	ldr	r1, [sp, #4]
 800b03a:	4809      	ldr	r0, [pc, #36]	; (800b060 <hci_user_evt_proc+0x38>)
 800b03c:	f000 f86d 	bl	800b11a <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b040:	4808      	ldr	r0, [pc, #32]	; (800b064 <hci_user_evt_proc+0x3c>)
 800b042:	f000 f852 	bl	800b0ea <list_is_empty>
 800b046:	b948      	cbnz	r0, 800b05c <hci_user_evt_proc+0x34>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b048:	4c07      	ldr	r4, [pc, #28]	; (800b068 <hci_user_evt_proc+0x40>)
 800b04a:	a901      	add	r1, sp, #4
 800b04c:	f104 0020 	add.w	r0, r4, #32
 800b050:	f000 f87a 	bl	800b148 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800b054:	69e3      	ldr	r3, [r4, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1eb      	bne.n	800b032 <hci_user_evt_proc+0xa>
 800b05a:	e7ed      	b.n	800b038 <hci_user_evt_proc+0x10>
  }
}
 800b05c:	b002      	add	sp, #8
 800b05e:	bd10      	pop	{r4, pc}
 800b060:	20002658 	.word	0x20002658
 800b064:	20002650 	.word	0x20002650
 800b068:	20002630 	.word	0x20002630

0800b06c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b06c:	b530      	push	{r4, r5, lr}
 800b06e:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b074:	4818      	ldr	r0, [pc, #96]	; (800b0d8 <hci_notify_asynch_evt+0x6c>)
 800b076:	f000 f838 	bl	800b0ea <list_is_empty>
 800b07a:	b118      	cbz	r0, 800b084 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 800b07c:	2401      	movs	r4, #1
  }
  return ret;

}
 800b07e:	4620      	mov	r0, r4
 800b080:	b003      	add	sp, #12
 800b082:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b084:	4c15      	ldr	r4, [pc, #84]	; (800b0dc <hci_notify_asynch_evt+0x70>)
 800b086:	a901      	add	r1, sp, #4
 800b088:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b08c:	f000 f85c 	bl	800b148 <list_remove_head>
    if (hciContext.io.Receive)
 800b090:	68e3      	ldr	r3, [r4, #12]
 800b092:	b1fb      	cbz	r3, 800b0d4 <hci_notify_asynch_evt+0x68>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b094:	2180      	movs	r1, #128	; 0x80
 800b096:	9801      	ldr	r0, [sp, #4]
 800b098:	3008      	adds	r0, #8
 800b09a:	4798      	blx	r3
      if (data_len > 0)
 800b09c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800b0a0:	d012      	beq.n	800b0c8 <hci_notify_asynch_evt+0x5c>
        hciReadPacket->data_len = data_len;
 800b0a2:	9d01      	ldr	r5, [sp, #4]
 800b0a4:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	f7ff fe79 	bl	800ada0 <verify_packet>
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	b920      	cbnz	r0, 800b0bc <hci_notify_asynch_evt+0x50>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	480a      	ldr	r0, [pc, #40]	; (800b0e0 <hci_notify_asynch_evt+0x74>)
 800b0b6:	f000 f830 	bl	800b11a <list_insert_tail>
 800b0ba:	e7e0      	b.n	800b07e <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b0bc:	4629      	mov	r1, r5
 800b0be:	4806      	ldr	r0, [pc, #24]	; (800b0d8 <hci_notify_asynch_evt+0x6c>)
 800b0c0:	f000 f81f 	bl	800b102 <list_insert_head>
  int32_t ret = 0;
 800b0c4:	2400      	movs	r4, #0
 800b0c6:	e7da      	b.n	800b07e <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b0c8:	9901      	ldr	r1, [sp, #4]
 800b0ca:	4803      	ldr	r0, [pc, #12]	; (800b0d8 <hci_notify_asynch_evt+0x6c>)
 800b0cc:	f000 f819 	bl	800b102 <list_insert_head>
  int32_t ret = 0;
 800b0d0:	2400      	movs	r4, #0
 800b0d2:	e7d4      	b.n	800b07e <hci_notify_asynch_evt+0x12>
 800b0d4:	2400      	movs	r4, #0
  return ret;
 800b0d6:	e7d2      	b.n	800b07e <hci_notify_asynch_evt+0x12>
 800b0d8:	20002658 	.word	0x20002658
 800b0dc:	20002630 	.word	0x20002630
 800b0e0:	20002650 	.word	0x20002650

0800b0e4 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800b0e4:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800b0e6:	6040      	str	r0, [r0, #4]
}
 800b0e8:	4770      	bx	lr

0800b0ea <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0ea:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b0ee:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b0f0:	6802      	ldr	r2, [r0, #0]
 800b0f2:	4282      	cmp	r2, r0
 800b0f4:	d003      	beq.n	800b0fe <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 800b0f6:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0f8:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800b0fc:	4770      	bx	lr
    return_value = 1;
 800b0fe:	2001      	movs	r0, #1
 800b100:	e7fa      	b.n	800b0f8 <list_is_empty+0xe>

0800b102 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b102:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b106:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b108:	6802      	ldr	r2, [r0, #0]
 800b10a:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800b10c:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800b10e:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800b110:	680a      	ldr	r2, [r1, #0]
 800b112:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b114:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b118:	4770      	bx	lr

0800b11a <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b11a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b11e:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b120:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800b122:	6842      	ldr	r2, [r0, #4]
 800b124:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800b126:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800b128:	684a      	ldr	r2, [r1, #4]
 800b12a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b12c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b130:	4770      	bx	lr

0800b132 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b132:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b136:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b138:	6841      	ldr	r1, [r0, #4]
 800b13a:	6803      	ldr	r3, [r0, #0]
 800b13c:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 800b13e:	6841      	ldr	r1, [r0, #4]
 800b140:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b142:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b146:	4770      	bx	lr

0800b148 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b14c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b150:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b152:	6800      	ldr	r0, [r0, #0]
 800b154:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 800b156:	f7ff ffec 	bl	800b132 <list_remove_node>
  (*node)->next = NULL;
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	2300      	movs	r3, #0
 800b15e:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b164:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b168:	bd38      	pop	{r3, r4, r5, pc}

0800b16a <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b16a:	b538      	push	{r3, r4, r5, lr}
 800b16c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b16e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b172:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b174:	6840      	ldr	r0, [r0, #4]
 800b176:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 800b178:	f7ff ffdb 	bl	800b132 <list_remove_node>
  (*node)->next = NULL;
 800b17c:	6822      	ldr	r2, [r4, #0]
 800b17e:	2300      	movs	r3, #0
 800b180:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800b182:	6822      	ldr	r2, [r4, #0]
 800b184:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b186:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b18a:	bd38      	pop	{r3, r4, r5, pc}

0800b18c <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b18c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b18e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b192:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b194:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 800b196:	2000      	movs	r0, #0
  while (temp != listHead)
 800b198:	e001      	b.n	800b19e <list_get_size+0x12>
  {
    size++;
 800b19a:	3001      	adds	r0, #1
    temp = temp->next;		
 800b19c:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d1fb      	bne.n	800b19a <list_get_size+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1a2:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800b1a6:	4770      	bx	lr

0800b1a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1a8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1aa:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b1ae:	b184      	cbz	r4, 800b1d2 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1b0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b1b4:	b17b      	cbz	r3, 800b1d6 <USBD_CDC_EP0_RxReady+0x2e>
 800b1b6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b1ba:	28ff      	cmp	r0, #255	; 0xff
 800b1bc:	d00d      	beq.n	800b1da <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800b1c8:	23ff      	movs	r3, #255	; 0xff
 800b1ca:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b1ce:	2000      	movs	r0, #0
}
 800b1d0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800b1d2:	2003      	movs	r0, #3
 800b1d4:	e7fc      	b.n	800b1d0 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e7fa      	b.n	800b1d0 <USBD_CDC_EP0_RxReady+0x28>
 800b1da:	2000      	movs	r0, #0
 800b1dc:	e7f8      	b.n	800b1d0 <USBD_CDC_EP0_RxReady+0x28>
	...

0800b1e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b1e0:	2343      	movs	r3, #67	; 0x43
 800b1e2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800b1e4:	4800      	ldr	r0, [pc, #0]	; (800b1e8 <USBD_CDC_GetFSCfgDesc+0x8>)
 800b1e6:	4770      	bx	lr
 800b1e8:	20000088 	.word	0x20000088

0800b1ec <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b1ec:	2343      	movs	r3, #67	; 0x43
 800b1ee:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800b1f0:	4800      	ldr	r0, [pc, #0]	; (800b1f4 <USBD_CDC_GetHSCfgDesc+0x8>)
 800b1f2:	4770      	bx	lr
 800b1f4:	200000cc 	.word	0x200000cc

0800b1f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b1f8:	2343      	movs	r3, #67	; 0x43
 800b1fa:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b1fc:	4800      	ldr	r0, [pc, #0]	; (800b200 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b1fe:	4770      	bx	lr
 800b200:	20000110 	.word	0x20000110

0800b204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b204:	230a      	movs	r3, #10
 800b206:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800b208:	4800      	ldr	r0, [pc, #0]	; (800b20c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b20a:	4770      	bx	lr
 800b20c:	20000154 	.word	0x20000154

0800b210 <USBD_CDC_DataOut>:
{
 800b210:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b212:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800b216:	b175      	cbz	r5, 800b236 <USBD_CDC_DataOut+0x26>
 800b218:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b21a:	f7fb f9b7 	bl	800658c <USBD_LL_GetRxDataSize>
 800b21e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b222:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b22c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b230:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800b232:	2000      	movs	r0, #0
}
 800b234:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800b236:	2003      	movs	r0, #3
 800b238:	e7fc      	b.n	800b234 <USBD_CDC_DataOut+0x24>

0800b23a <USBD_CDC_DataIn>:
{
 800b23a:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b23c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800b240:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800b244:	b353      	cbz	r3, 800b29c <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b246:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800b24a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b24e:	6992      	ldr	r2, [r2, #24]
 800b250:	b14a      	cbz	r2, 800b266 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b252:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800b256:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800b25a:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800b25c:	fbb2 fcf4 	udiv	ip, r2, r4
 800b260:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b264:	b172      	cbz	r2, 800b284 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b26c:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800b270:	6914      	ldr	r4, [r2, #16]
 800b272:	b1ac      	cbz	r4, 800b2a0 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b274:	460a      	mov	r2, r1
 800b276:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800b27a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800b27e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800b280:	2000      	movs	r0, #0
}
 800b282:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800b284:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b288:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b28c:	2400      	movs	r4, #0
 800b28e:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b290:	4623      	mov	r3, r4
 800b292:	4622      	mov	r2, r4
 800b294:	f7fb f96c 	bl	8006570 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800b298:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b29a:	e7f2      	b.n	800b282 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800b29c:	2003      	movs	r0, #3
 800b29e:	e7f0      	b.n	800b282 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	e7ee      	b.n	800b282 <USBD_CDC_DataIn+0x48>

0800b2a4 <USBD_CDC_Setup>:
{
 800b2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2a6:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2a8:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800b2b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	d06c      	beq.n	800b394 <USBD_CDC_Setup+0xf0>
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2be:	780b      	ldrb	r3, [r1, #0]
 800b2c0:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800b2c4:	d02a      	beq.n	800b31c <USBD_CDC_Setup+0x78>
 800b2c6:	2d20      	cmp	r5, #32
 800b2c8:	d15e      	bne.n	800b388 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800b2ca:	88ca      	ldrh	r2, [r1, #6]
 800b2cc:	b1f2      	cbz	r2, 800b30c <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800b2ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b2d2:	d00f      	beq.n	800b2f4 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2d4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	4631      	mov	r1, r6
 800b2dc:	7860      	ldrb	r0, [r4, #1]
 800b2de:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2e0:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2e2:	2a07      	cmp	r2, #7
 800b2e4:	bf28      	it	cs
 800b2e6:	2207      	movcs	r2, #7
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f000 fdfa 	bl	800bee4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f0:	2500      	movs	r5, #0
 800b2f2:	e04c      	b.n	800b38e <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800b2f4:	784b      	ldrb	r3, [r1, #1]
 800b2f6:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b2fa:	798b      	ldrb	r3, [r1, #6]
 800b2fc:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b300:	88ca      	ldrh	r2, [r1, #6]
 800b302:	4631      	mov	r1, r6
 800b304:	f000 fe03 	bl	800bf0e <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800b308:	2500      	movs	r5, #0
 800b30a:	e040      	b.n	800b38e <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b30c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	2200      	movs	r2, #0
 800b314:	7848      	ldrb	r0, [r1, #1]
 800b316:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800b318:	2500      	movs	r5, #0
 800b31a:	e038      	b.n	800b38e <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800b31c:	784e      	ldrb	r6, [r1, #1]
 800b31e:	2e0b      	cmp	r6, #11
 800b320:	d82e      	bhi.n	800b380 <USBD_CDC_Setup+0xdc>
 800b322:	e8df f006 	tbb	[pc, r6]
 800b326:	3406      	.short	0x3406
 800b328:	2d2d2d2d 	.word	0x2d2d2d2d
 800b32c:	2d2d2d2d 	.word	0x2d2d2d2d
 800b330:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b332:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b03      	cmp	r3, #3
 800b33a:	d003      	beq.n	800b344 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800b33c:	f000 faa9 	bl	800b892 <USBD_CtlError>
            ret = USBD_FAIL;
 800b340:	2503      	movs	r5, #3
 800b342:	e024      	b.n	800b38e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b344:	2202      	movs	r2, #2
 800b346:	a901      	add	r1, sp, #4
 800b348:	f000 fdcc 	bl	800bee4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b34c:	4635      	mov	r5, r6
 800b34e:	e01e      	b.n	800b38e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b350:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b03      	cmp	r3, #3
 800b358:	d003      	beq.n	800b362 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800b35a:	f000 fa9a 	bl	800b892 <USBD_CtlError>
            ret = USBD_FAIL;
 800b35e:	2503      	movs	r5, #3
 800b360:	e015      	b.n	800b38e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b362:	2201      	movs	r2, #1
 800b364:	f10d 0107 	add.w	r1, sp, #7
 800b368:	f000 fdbc 	bl	800bee4 <USBD_CtlSendData>
 800b36c:	e00f      	b.n	800b38e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b36e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b03      	cmp	r3, #3
 800b376:	d00a      	beq.n	800b38e <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800b378:	f000 fa8b 	bl	800b892 <USBD_CtlError>
            ret = USBD_FAIL;
 800b37c:	2503      	movs	r5, #3
 800b37e:	e006      	b.n	800b38e <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800b380:	f000 fa87 	bl	800b892 <USBD_CtlError>
          ret = USBD_FAIL;
 800b384:	2503      	movs	r5, #3
          break;
 800b386:	e002      	b.n	800b38e <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800b388:	f000 fa83 	bl	800b892 <USBD_CtlError>
      ret = USBD_FAIL;
 800b38c:	2503      	movs	r5, #3
}
 800b38e:	4628      	mov	r0, r5
 800b390:	b003      	add	sp, #12
 800b392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800b394:	2503      	movs	r5, #3
 800b396:	e7fa      	b.n	800b38e <USBD_CDC_Setup+0xea>

0800b398 <USBD_CDC_DeInit>:
{
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b39c:	2181      	movs	r1, #129	; 0x81
 800b39e:	f7fb f8b4 	bl	800650a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b3a2:	2500      	movs	r5, #0
 800b3a4:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7fb f8ae 	bl	800650a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b3ae:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b3b2:	2182      	movs	r1, #130	; 0x82
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f7fb f8a8 	bl	800650a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b3ba:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b3be:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800b3c2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800b3c6:	b14b      	cbz	r3, 800b3dc <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b3c8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b3d0:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800b3d4:	f001 f838 	bl	800c448 <free>
    pdev->pClassData = NULL;
 800b3d8:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800b3dc:	2000      	movs	r0, #0
 800b3de:	bd38      	pop	{r3, r4, r5, pc}

0800b3e0 <USBD_CDC_Init>:
{
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3e8:	f001 f826 	bl	800c438 <malloc>
  if (hcdc == NULL)
 800b3ec:	b3b8      	cbz	r0, 800b45e <USBD_CDC_Init+0x7e>
 800b3ee:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800b3f0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3f4:	7c23      	ldrb	r3, [r4, #16]
 800b3f6:	bbbb      	cbnz	r3, 800b468 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	2181      	movs	r1, #129	; 0x81
 800b400:	4620      	mov	r0, r4
 800b402:	f7fb f878 	bl	80064f6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b406:	2501      	movs	r5, #1
 800b408:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b40a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b40e:	2202      	movs	r2, #2
 800b410:	4629      	mov	r1, r5
 800b412:	4620      	mov	r0, r4
 800b414:	f7fb f86f 	bl	80064f6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b418:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b41c:	2310      	movs	r3, #16
 800b41e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b422:	2308      	movs	r3, #8
 800b424:	2203      	movs	r2, #3
 800b426:	2182      	movs	r1, #130	; 0x82
 800b428:	4620      	mov	r0, r4
 800b42a:	f7fb f864 	bl	80064f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b42e:	2301      	movs	r3, #1
 800b430:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b434:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4798      	blx	r3
  hcdc->TxState = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800b442:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b446:	7c25      	ldrb	r5, [r4, #16]
 800b448:	bb15      	cbnz	r5, 800b490 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b44a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b44e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800b452:	2101      	movs	r1, #1
 800b454:	4620      	mov	r0, r4
 800b456:	f7fb f892 	bl	800657e <USBD_LL_PrepareReceive>
}
 800b45a:	4628      	mov	r0, r5
 800b45c:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b464:	2502      	movs	r5, #2
 800b466:	e7f8      	b.n	800b45a <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b468:	2340      	movs	r3, #64	; 0x40
 800b46a:	2202      	movs	r2, #2
 800b46c:	2181      	movs	r1, #129	; 0x81
 800b46e:	4620      	mov	r0, r4
 800b470:	f7fb f841 	bl	80064f6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b474:	2501      	movs	r5, #1
 800b476:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b478:	2340      	movs	r3, #64	; 0x40
 800b47a:	2202      	movs	r2, #2
 800b47c:	4629      	mov	r1, r5
 800b47e:	4620      	mov	r0, r4
 800b480:	f7fb f839 	bl	80064f6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b484:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b488:	2310      	movs	r3, #16
 800b48a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800b48e:	e7c8      	b.n	800b422 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800b496:	2101      	movs	r1, #1
 800b498:	4620      	mov	r0, r4
 800b49a:	f7fb f870 	bl	800657e <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800b49e:	2500      	movs	r5, #0
 800b4a0:	e7db      	b.n	800b45a <USBD_CDC_Init+0x7a>

0800b4a2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800b4a2:	b119      	cbz	r1, 800b4ac <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800b4a4:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b4ac:	2003      	movs	r0, #3
}
 800b4ae:	4770      	bx	lr

0800b4b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4b0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b4b4:	b12b      	cbz	r3, 800b4c2 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800b4b6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b4ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b4be:	2000      	movs	r0, #0
 800b4c0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b4c2:	2003      	movs	r0, #3
}
 800b4c4:	4770      	bx	lr

0800b4c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4c6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b4ca:	b11b      	cbz	r3, 800b4d4 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800b4cc:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b4d4:	2003      	movs	r0, #3
}
 800b4d6:	4770      	bx	lr

0800b4d8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4d8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800b4dc:	b1a2      	cbz	r2, 800b508 <USBD_CDC_TransmitPacket+0x30>
{
 800b4de:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800b4e0:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800b4e4:	b10b      	cbz	r3, 800b4ea <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b4e6:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800b4e8:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b4f0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800b4f4:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b4f6:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800b4fa:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800b4fe:	2181      	movs	r1, #129	; 0x81
 800b500:	f7fb f836 	bl	8006570 <USBD_LL_Transmit>
    ret = USBD_OK;
 800b504:	2000      	movs	r0, #0
 800b506:	e7ef      	b.n	800b4e8 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800b508:	2003      	movs	r0, #3
}
 800b50a:	4770      	bx	lr

0800b50c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b50c:	b198      	cbz	r0, 800b536 <USBD_Init+0x2a>
{
 800b50e:	b508      	push	{r3, lr}
 800b510:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b512:	2000      	movs	r0, #0
 800b514:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b518:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b51c:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b520:	b109      	cbz	r1, 800b526 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800b522:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b526:	2101      	movs	r1, #1
 800b528:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800b52c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fa ffac 	bl	800648c <USBD_LL_Init>

  return ret;
}
 800b534:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b536:	2003      	movs	r0, #3
}
 800b538:	4770      	bx	lr

0800b53a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b53a:	b510      	push	{r4, lr}
 800b53c:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800b53e:	2300      	movs	r3, #0
 800b540:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800b544:	b161      	cbz	r1, 800b560 <USBD_RegisterClass+0x26>
 800b546:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b548:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b54c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800b54e:	b14b      	cbz	r3, 800b564 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b550:	f10d 0006 	add.w	r0, sp, #6
 800b554:	4798      	blx	r3
 800b556:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b55a:	2000      	movs	r0, #0
}
 800b55c:	b002      	add	sp, #8
 800b55e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800b560:	2003      	movs	r0, #3
 800b562:	e7fb      	b.n	800b55c <USBD_RegisterClass+0x22>
  return USBD_OK;
 800b564:	2000      	movs	r0, #0
 800b566:	e7f9      	b.n	800b55c <USBD_RegisterClass+0x22>

0800b568 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b568:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b56a:	f7fa ffbd 	bl	80064e8 <USBD_LL_Start>
}
 800b56e:	bd08      	pop	{r3, pc}

0800b570 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b570:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800b572:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b576:	b113      	cbz	r3, 800b57e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4798      	blx	r3
  }

  return ret;
}
 800b57c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b57e:	2003      	movs	r0, #3
 800b580:	e7fc      	b.n	800b57c <USBD_SetClassConfig+0xc>

0800b582 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b582:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b584:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b588:	b10b      	cbz	r3, 800b58e <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800b58e:	2000      	movs	r0, #0
 800b590:	bd08      	pop	{r3, pc}

0800b592 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b592:	b538      	push	{r3, r4, r5, lr}
 800b594:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b596:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 f965 	bl	800b86a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5a6:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800b5aa:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5ae:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800b5b2:	f001 031f 	and.w	r3, r1, #31
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d00d      	beq.n	800b5d6 <USBD_LL_SetupStage+0x44>
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d010      	beq.n	800b5e0 <USBD_LL_SetupStage+0x4e>
 800b5be:	b12b      	cbz	r3, 800b5cc <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5c0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f7fa ffa7 	bl	8006518 <USBD_LL_StallEP>
      break;
 800b5ca:	e003      	b.n	800b5d4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 fb09 	bl	800bbe6 <USBD_StdDevReq>
  }

  return ret;
}
 800b5d4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 fb3c 	bl	800bc56 <USBD_StdItfReq>
      break;
 800b5de:	e7f9      	b.n	800b5d4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 fb6b 	bl	800bcbe <USBD_StdEPReq>
      break;
 800b5e8:	e7f4      	b.n	800b5d4 <USBD_LL_SetupStage+0x42>

0800b5ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5ea:	b538      	push	{r3, r4, r5, lr}
 800b5ec:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	bb41      	cbnz	r1, 800b644 <USBD_LL_DataOutStage+0x5a>
 800b5f2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5f4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b5f8:	2a03      	cmp	r2, #3
 800b5fa:	d001      	beq.n	800b600 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800b5fc:	4608      	mov	r0, r1
}
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800b600:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800b604:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800b608:	4291      	cmp	r1, r2
 800b60a:	d809      	bhi.n	800b620 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b03      	cmp	r3, #3
 800b614:	d00f      	beq.n	800b636 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fc90 	bl	800bf3c <USBD_CtlSendStatus>
  return USBD_OK;
 800b61c:	4628      	mov	r0, r5
 800b61e:	e7ee      	b.n	800b5fe <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800b620:	1a89      	subs	r1, r1, r2
 800b622:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b626:	428a      	cmp	r2, r1
 800b628:	bf28      	it	cs
 800b62a:	460a      	movcs	r2, r1
 800b62c:	4619      	mov	r1, r3
 800b62e:	f000 fc7d 	bl	800bf2c <USBD_CtlContinueRx>
  return USBD_OK;
 800b632:	4628      	mov	r0, r5
 800b634:	e7e3      	b.n	800b5fe <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800b636:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0ea      	beq.n	800b616 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800b640:	4798      	blx	r3
 800b642:	e7e8      	b.n	800b616 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b644:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d001      	beq.n	800b652 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800b64e:	2000      	movs	r0, #0
 800b650:	e7d5      	b.n	800b5fe <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800b652:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	b10b      	cbz	r3, 800b65e <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b65a:	4798      	blx	r3
        if (ret != USBD_OK)
 800b65c:	e7cf      	b.n	800b5fe <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800b65e:	2000      	movs	r0, #0
 800b660:	e7cd      	b.n	800b5fe <USBD_LL_DataOutStage+0x14>

0800b662 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b662:	b538      	push	{r3, r4, r5, lr}
 800b664:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b666:	460d      	mov	r5, r1
 800b668:	2900      	cmp	r1, #0
 800b66a:	d14a      	bne.n	800b702 <USBD_LL_DataInStage+0xa0>
 800b66c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b66e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b672:	2a02      	cmp	r2, #2
 800b674:	d005      	beq.n	800b682 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b676:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d03c      	beq.n	800b6f8 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800b67e:	4628      	mov	r0, r5
}
 800b680:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800b682:	69c2      	ldr	r2, [r0, #28]
 800b684:	6a01      	ldr	r1, [r0, #32]
 800b686:	428a      	cmp	r2, r1
 800b688:	d80e      	bhi.n	800b6a8 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800b68a:	428a      	cmp	r2, r1
 800b68c:	d018      	beq.n	800b6c0 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b68e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b03      	cmp	r3, #3
 800b696:	d027      	beq.n	800b6e8 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b698:	2180      	movs	r1, #128	; 0x80
 800b69a:	4620      	mov	r0, r4
 800b69c:	f7fa ff3c 	bl	8006518 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fc56 	bl	800bf52 <USBD_CtlReceiveStatus>
 800b6a6:	e7e6      	b.n	800b676 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800b6a8:	1a52      	subs	r2, r2, r1
 800b6aa:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f000 fc26 	bl	800befe <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f7fa ff60 	bl	800657e <USBD_LL_PrepareReceive>
 800b6be:	e7da      	b.n	800b676 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800b6c0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6c2:	4299      	cmp	r1, r3
 800b6c4:	d8e3      	bhi.n	800b68e <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800b6c6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d2df      	bcs.n	800b68e <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	f000 fc14 	bl	800befe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6dc:	460b      	mov	r3, r1
 800b6de:	460a      	mov	r2, r1
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7fa ff4c 	bl	800657e <USBD_LL_PrepareReceive>
 800b6e6:	e7c6      	b.n	800b676 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800b6e8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0d2      	beq.n	800b698 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4798      	blx	r3
 800b6f6:	e7cf      	b.n	800b698 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800b6fe:	4628      	mov	r0, r5
 800b700:	e7be      	b.n	800b680 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b702:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d001      	beq.n	800b710 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7b7      	b.n	800b680 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800b710:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	b10b      	cbz	r3, 800b71c <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b718:	4798      	blx	r3
        if (ret != USBD_OK)
 800b71a:	e7b1      	b.n	800b680 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800b71c:	2000      	movs	r0, #0
 800b71e:	e7af      	b.n	800b680 <USBD_LL_DataInStage+0x1e>

0800b720 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b720:	2301      	movs	r3, #1
 800b722:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b726:	2300      	movs	r3, #0
 800b728:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800b72c:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800b72e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b732:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b736:	b1f3      	cbz	r3, 800b776 <USBD_LL_Reset+0x56>
{
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800b73c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800b740:	b11a      	cbz	r2, 800b74a <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	b10b      	cbz	r3, 800b74a <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b746:	2100      	movs	r1, #0
 800b748:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b74a:	2340      	movs	r3, #64	; 0x40
 800b74c:	2200      	movs	r2, #0
 800b74e:	4611      	mov	r1, r2
 800b750:	4620      	mov	r0, r4
 800b752:	f7fa fed0 	bl	80064f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b756:	2601      	movs	r6, #1
 800b758:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b75c:	2540      	movs	r5, #64	; 0x40
 800b75e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b762:	462b      	mov	r3, r5
 800b764:	2200      	movs	r2, #0
 800b766:	2180      	movs	r1, #128	; 0x80
 800b768:	4620      	mov	r0, r4
 800b76a:	f7fa fec4 	bl	80064f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b76e:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b770:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800b772:	2000      	movs	r0, #0
}
 800b774:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800b776:	2003      	movs	r0, #3
}
 800b778:	4770      	bx	lr

0800b77a <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b77a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800b77c:	2000      	movs	r0, #0
 800b77e:	4770      	bx	lr

0800b780 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800b780:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b784:	b2db      	uxtb	r3, r3
 800b786:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b78a:	2304      	movs	r3, #4
 800b78c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800b790:	2000      	movs	r0, #0
 800b792:	4770      	bx	lr

0800b794 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b794:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d001      	beq.n	800b7a2 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800b79e:	2000      	movs	r0, #0
 800b7a0:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800b7a2:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800b7ac:	e7f7      	b.n	800b79e <USBD_LL_Resume+0xa>

0800b7ae <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800b7ae:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b7b2:	b162      	cbz	r2, 800b7ce <USBD_LL_SOF+0x20>
{
 800b7b4:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d001      	beq.n	800b7c4 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800b7c0:	2000      	movs	r0, #0
}
 800b7c2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800b7c4:	69d3      	ldr	r3, [r2, #28]
 800b7c6:	b123      	cbz	r3, 800b7d2 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800b7c8:	4798      	blx	r3
  return USBD_OK;
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	e7f9      	b.n	800b7c2 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800b7ce:	2003      	movs	r0, #3
}
 800b7d0:	4770      	bx	lr
  return USBD_OK;
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	e7f5      	b.n	800b7c2 <USBD_LL_SOF+0x14>

0800b7d6 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800b7d6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b7da:	b162      	cbz	r2, 800b7f6 <USBD_LL_IsoINIncomplete+0x20>
{
 800b7dc:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d001      	beq.n	800b7ec <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800b7e8:	2000      	movs	r0, #0
}
 800b7ea:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b7ec:	6a13      	ldr	r3, [r2, #32]
 800b7ee:	b123      	cbz	r3, 800b7fa <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b7f0:	4798      	blx	r3
  return USBD_OK;
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	e7f9      	b.n	800b7ea <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 800b7f6:	2003      	movs	r0, #3
}
 800b7f8:	4770      	bx	lr
  return USBD_OK;
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e7f5      	b.n	800b7ea <USBD_LL_IsoINIncomplete+0x14>

0800b7fe <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800b7fe:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b802:	b162      	cbz	r2, 800b81e <USBD_LL_IsoOUTIncomplete+0x20>
{
 800b804:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b806:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b03      	cmp	r3, #3
 800b80e:	d001      	beq.n	800b814 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800b810:	2000      	movs	r0, #0
}
 800b812:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b814:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b816:	b123      	cbz	r3, 800b822 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b818:	4798      	blx	r3
  return USBD_OK;
 800b81a:	2000      	movs	r0, #0
 800b81c:	e7f9      	b.n	800b812 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 800b81e:	2003      	movs	r0, #3
}
 800b820:	4770      	bx	lr
  return USBD_OK;
 800b822:	2000      	movs	r0, #0
 800b824:	e7f5      	b.n	800b812 <USBD_LL_IsoOUTIncomplete+0x14>

0800b826 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800b826:	2000      	movs	r0, #0
 800b828:	4770      	bx	lr

0800b82a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b82a:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b832:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b836:	b113      	cbz	r3, 800b83e <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	7901      	ldrb	r1, [r0, #4]
 800b83c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800b83e:	2000      	movs	r0, #0
 800b840:	bd08      	pop	{r3, pc}

0800b842 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b842:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800b844:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800b846:	e002      	b.n	800b84e <USBD_GetLen+0xc>
  {
    len++;
 800b848:	3001      	adds	r0, #1
 800b84a:	b2c0      	uxtb	r0, r0
    pbuff++;
 800b84c:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800b84e:	781a      	ldrb	r2, [r3, #0]
 800b850:	2a00      	cmp	r2, #0
 800b852:	d1f9      	bne.n	800b848 <USBD_GetLen+0x6>
  }

  return len;
}
 800b854:	4770      	bx	lr

0800b856 <USBD_SetFeature>:
{
 800b856:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b858:	884b      	ldrh	r3, [r1, #2]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d000      	beq.n	800b860 <USBD_SetFeature+0xa>
}
 800b85e:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800b860:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b864:	f000 fb6a 	bl	800bf3c <USBD_CtlSendStatus>
}
 800b868:	e7f9      	b.n	800b85e <USBD_SetFeature+0x8>

0800b86a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800b86a:	780b      	ldrb	r3, [r1, #0]
 800b86c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800b86e:	784b      	ldrb	r3, [r1, #1]
 800b870:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800b872:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800b874:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b876:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800b87a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800b87c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800b87e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800b884:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800b886:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800b888:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b88a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800b88e:	80c3      	strh	r3, [r0, #6]
}
 800b890:	4770      	bx	lr

0800b892 <USBD_CtlError>:
{
 800b892:	b510      	push	{r4, lr}
 800b894:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b896:	2180      	movs	r1, #128	; 0x80
 800b898:	f7fa fe3e 	bl	8006518 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b89c:	2100      	movs	r1, #0
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7fa fe3a 	bl	8006518 <USBD_LL_StallEP>
}
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <USBD_GetDescriptor>:
{
 800b8a6:	b530      	push	{r4, r5, lr}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800b8b4:	884a      	ldrh	r2, [r1, #2]
 800b8b6:	0a13      	lsrs	r3, r2, #8
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	2b06      	cmp	r3, #6
 800b8bc:	f200 80ab 	bhi.w	800ba16 <USBD_GetDescriptor+0x170>
 800b8c0:	e8df f003 	tbb	[pc, r3]
 800b8c4:	a9331f04 	.word	0xa9331f04
 800b8c8:	8da9      	.short	0x8da9
 800b8ca:	9a          	.byte	0x9a
 800b8cb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b8cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f10d 0106 	add.w	r1, sp, #6
 800b8d6:	7c00      	ldrb	r0, [r0, #16]
 800b8d8:	4798      	blx	r3
  if (req->wLength != 0U)
 800b8da:	88ea      	ldrh	r2, [r5, #6]
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	f000 80a3 	beq.w	800ba28 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800b8e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 8099 	beq.w	800ba1e <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	bf28      	it	cs
 800b8f0:	461a      	movcs	r2, r3
 800b8f2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 faf3 	bl	800bee4 <USBD_CtlSendData>
}
 800b8fe:	b003      	add	sp, #12
 800b900:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b902:	7c03      	ldrb	r3, [r0, #16]
 800b904:	b943      	cbnz	r3, 800b918 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b906:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90c:	f10d 0006 	add.w	r0, sp, #6
 800b910:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b912:	2302      	movs	r3, #2
 800b914:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b916:	e7e0      	b.n	800b8da <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b918:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	f10d 0006 	add.w	r0, sp, #6
 800b922:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b924:	2302      	movs	r3, #2
 800b926:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b928:	e7d7      	b.n	800b8da <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800b92a:	b2d2      	uxtb	r2, r2
 800b92c:	2a05      	cmp	r2, #5
 800b92e:	d852      	bhi.n	800b9d6 <USBD_GetDescriptor+0x130>
 800b930:	e8df f002 	tbb	[pc, r2]
 800b934:	2a1d1003 	.word	0x2a1d1003
 800b938:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b93a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	b123      	cbz	r3, 800b94c <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b942:	f10d 0106 	add.w	r1, sp, #6
 800b946:	7c00      	ldrb	r0, [r0, #16]
 800b948:	4798      	blx	r3
  if (err != 0U)
 800b94a:	e7c6      	b.n	800b8da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800b94c:	4629      	mov	r1, r5
 800b94e:	f7ff ffa0 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b952:	e7d4      	b.n	800b8fe <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b954:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	b123      	cbz	r3, 800b966 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b95c:	f10d 0106 	add.w	r1, sp, #6
 800b960:	7c00      	ldrb	r0, [r0, #16]
 800b962:	4798      	blx	r3
  if (err != 0U)
 800b964:	e7b9      	b.n	800b8da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800b966:	4629      	mov	r1, r5
 800b968:	f7ff ff93 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b96c:	e7c7      	b.n	800b8fe <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b96e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	b123      	cbz	r3, 800b980 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b976:	f10d 0106 	add.w	r1, sp, #6
 800b97a:	7c00      	ldrb	r0, [r0, #16]
 800b97c:	4798      	blx	r3
  if (err != 0U)
 800b97e:	e7ac      	b.n	800b8da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800b980:	4629      	mov	r1, r5
 800b982:	f7ff ff86 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b986:	e7ba      	b.n	800b8fe <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b988:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	b123      	cbz	r3, 800b99a <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b990:	f10d 0106 	add.w	r1, sp, #6
 800b994:	7c00      	ldrb	r0, [r0, #16]
 800b996:	4798      	blx	r3
  if (err != 0U)
 800b998:	e79f      	b.n	800b8da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800b99a:	4629      	mov	r1, r5
 800b99c:	f7ff ff79 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b9a0:	e7ad      	b.n	800b8fe <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	b123      	cbz	r3, 800b9b4 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9aa:	f10d 0106 	add.w	r1, sp, #6
 800b9ae:	7c00      	ldrb	r0, [r0, #16]
 800b9b0:	4798      	blx	r3
  if (err != 0U)
 800b9b2:	e792      	b.n	800b8da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	f7ff ff6c 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b9ba:	e7a0      	b.n	800b8fe <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	b123      	cbz	r3, 800b9ce <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9c4:	f10d 0106 	add.w	r1, sp, #6
 800b9c8:	7c00      	ldrb	r0, [r0, #16]
 800b9ca:	4798      	blx	r3
  if (err != 0U)
 800b9cc:	e785      	b.n	800b8da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	f7ff ff5f 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b9d4:	e793      	b.n	800b8fe <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	f7ff ff5b 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b9dc:	e78f      	b.n	800b8fe <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9de:	7c03      	ldrb	r3, [r0, #16]
 800b9e0:	b933      	cbnz	r3, 800b9f0 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e8:	f10d 0006 	add.w	r0, sp, #6
 800b9ec:	4798      	blx	r3
  if (err != 0U)
 800b9ee:	e774      	b.n	800b8da <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	f7ff ff4e 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800b9f6:	e782      	b.n	800b8fe <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9f8:	7c03      	ldrb	r3, [r0, #16]
 800b9fa:	b943      	cbnz	r3, 800ba0e <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ba00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba02:	f10d 0006 	add.w	r0, sp, #6
 800ba06:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba08:	2307      	movs	r3, #7
 800ba0a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ba0c:	e765      	b.n	800b8da <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7ff ff3f 	bl	800b892 <USBD_CtlError>
  if (err != 0U)
 800ba14:	e773      	b.n	800b8fe <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7ff ff3b 	bl	800b892 <USBD_CtlError>
    return;
 800ba1c:	e76f      	b.n	800b8fe <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800ba1e:	4629      	mov	r1, r5
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7ff ff36 	bl	800b892 <USBD_CtlError>
 800ba26:	e76a      	b.n	800b8fe <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f000 fa87 	bl	800bf3c <USBD_CtlSendStatus>
 800ba2e:	e766      	b.n	800b8fe <USBD_GetDescriptor+0x58>

0800ba30 <USBD_SetAddress>:
{
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba34:	888b      	ldrh	r3, [r1, #4]
 800ba36:	b9fb      	cbnz	r3, 800ba78 <USBD_SetAddress+0x48>
 800ba38:	88cb      	ldrh	r3, [r1, #6]
 800ba3a:	b9eb      	cbnz	r3, 800ba78 <USBD_SetAddress+0x48>
 800ba3c:	884b      	ldrh	r3, [r1, #2]
 800ba3e:	2b7f      	cmp	r3, #127	; 0x7f
 800ba40:	d81a      	bhi.n	800ba78 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba42:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba46:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d00c      	beq.n	800ba6a <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800ba50:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7fa fd84 	bl	8006562 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 fa6e 	bl	800bf3c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800ba60:	b135      	cbz	r5, 800ba70 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba62:	2302      	movs	r3, #2
 800ba64:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ba68:	e009      	b.n	800ba7e <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800ba6a:	f7ff ff12 	bl	800b892 <USBD_CtlError>
 800ba6e:	e006      	b.n	800ba7e <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba70:	2301      	movs	r3, #1
 800ba72:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ba76:	e002      	b.n	800ba7e <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f7ff ff0a 	bl	800b892 <USBD_CtlError>
}
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}

0800ba80 <USBD_SetConfig>:
{
 800ba80:	b570      	push	{r4, r5, r6, lr}
 800ba82:	4604      	mov	r4, r0
 800ba84:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800ba86:	788d      	ldrb	r5, [r1, #2]
 800ba88:	4b2e      	ldr	r3, [pc, #184]	; (800bb44 <USBD_SetConfig+0xc4>)
 800ba8a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba8c:	2d01      	cmp	r5, #1
 800ba8e:	d810      	bhi.n	800bab2 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800ba90:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d00f      	beq.n	800baba <USBD_SetConfig+0x3a>
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d023      	beq.n	800bae6 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800ba9e:	f7ff fef8 	bl	800b892 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800baa2:	4b28      	ldr	r3, [pc, #160]	; (800bb44 <USBD_SetConfig+0xc4>)
 800baa4:	7819      	ldrb	r1, [r3, #0]
 800baa6:	4620      	mov	r0, r4
 800baa8:	f7ff fd6b 	bl	800b582 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800baac:	2503      	movs	r5, #3
}
 800baae:	4628      	mov	r0, r5
 800bab0:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800bab2:	f7ff feee 	bl	800b892 <USBD_CtlError>
    return USBD_FAIL;
 800bab6:	2503      	movs	r5, #3
 800bab8:	e7f9      	b.n	800baae <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800baba:	b18d      	cbz	r5, 800bae0 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800babc:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800babe:	4629      	mov	r1, r5
 800bac0:	f7ff fd56 	bl	800b570 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800bac4:	4605      	mov	r5, r0
 800bac6:	b120      	cbz	r0, 800bad2 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800bac8:	4631      	mov	r1, r6
 800baca:	4620      	mov	r0, r4
 800bacc:	f7ff fee1 	bl	800b892 <USBD_CtlError>
 800bad0:	e7ed      	b.n	800baae <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800bad2:	4620      	mov	r0, r4
 800bad4:	f000 fa32 	bl	800bf3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bad8:	2303      	movs	r3, #3
 800bada:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800bade:	e7e6      	b.n	800baae <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800bae0:	f000 fa2c 	bl	800bf3c <USBD_CtlSendStatus>
 800bae4:	e7e3      	b.n	800baae <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800bae6:	b1cd      	cbz	r5, 800bb1c <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800bae8:	6841      	ldr	r1, [r0, #4]
 800baea:	428d      	cmp	r5, r1
 800baec:	d025      	beq.n	800bb3a <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baee:	b2c9      	uxtb	r1, r1
 800baf0:	f7ff fd47 	bl	800b582 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800baf4:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <USBD_SetConfig+0xc4>)
 800baf6:	7819      	ldrb	r1, [r3, #0]
 800baf8:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bafa:	4620      	mov	r0, r4
 800bafc:	f7ff fd38 	bl	800b570 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800bb00:	4605      	mov	r5, r0
 800bb02:	b1b0      	cbz	r0, 800bb32 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800bb04:	4631      	mov	r1, r6
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7ff fec3 	bl	800b892 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb0c:	7921      	ldrb	r1, [r4, #4]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f7ff fd37 	bl	800b582 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb14:	2302      	movs	r3, #2
 800bb16:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800bb1a:	e7c8      	b.n	800baae <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb22:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7ff fd2c 	bl	800b582 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f000 fa06 	bl	800bf3c <USBD_CtlSendStatus>
 800bb30:	e7bd      	b.n	800baae <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800bb32:	4620      	mov	r0, r4
 800bb34:	f000 fa02 	bl	800bf3c <USBD_CtlSendStatus>
 800bb38:	e7b9      	b.n	800baae <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800bb3a:	f000 f9ff 	bl	800bf3c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800bb3e:	2500      	movs	r5, #0
 800bb40:	e7b5      	b.n	800baae <USBD_SetConfig+0x2e>
 800bb42:	bf00      	nop
 800bb44:	2000291c 	.word	0x2000291c

0800bb48 <USBD_GetConfig>:
{
 800bb48:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800bb4a:	88cb      	ldrh	r3, [r1, #6]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d10b      	bne.n	800bb68 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800bb50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d909      	bls.n	800bb6e <USBD_GetConfig+0x26>
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d109      	bne.n	800bb72 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bb5e:	2201      	movs	r2, #1
 800bb60:	1d01      	adds	r1, r0, #4
 800bb62:	f000 f9bf 	bl	800bee4 <USBD_CtlSendData>
        break;
 800bb66:	e001      	b.n	800bb6c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800bb68:	f7ff fe93 	bl	800b892 <USBD_CtlError>
}
 800bb6c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800bb6e:	b25b      	sxtb	r3, r3
 800bb70:	b913      	cbnz	r3, 800bb78 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800bb72:	f7ff fe8e 	bl	800b892 <USBD_CtlError>
}
 800bb76:	e7f9      	b.n	800bb6c <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800bb78:	4601      	mov	r1, r0
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb80:	2201      	movs	r2, #1
 800bb82:	f000 f9af 	bl	800bee4 <USBD_CtlSendData>
        break;
 800bb86:	e7f1      	b.n	800bb6c <USBD_GetConfig+0x24>

0800bb88 <USBD_GetStatus>:
{
 800bb88:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800bb8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d812      	bhi.n	800bbba <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800bb94:	88cb      	ldrh	r3, [r1, #6]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d10c      	bne.n	800bbb4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800bb9e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800bba2:	b10b      	cbz	r3, 800bba8 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bba4:	2303      	movs	r3, #3
 800bba6:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bba8:	2202      	movs	r2, #2
 800bbaa:	f100 010c 	add.w	r1, r0, #12
 800bbae:	f000 f999 	bl	800bee4 <USBD_CtlSendData>
}
 800bbb2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800bbb4:	f7ff fe6d 	bl	800b892 <USBD_CtlError>
        break;
 800bbb8:	e7fb      	b.n	800bbb2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800bbba:	f7ff fe6a 	bl	800b892 <USBD_CtlError>
}
 800bbbe:	e7f8      	b.n	800bbb2 <USBD_GetStatus+0x2a>

0800bbc0 <USBD_ClrFeature>:
{
 800bbc0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800bbc2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d809      	bhi.n	800bbe0 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbcc:	884b      	ldrh	r3, [r1, #2]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d000      	beq.n	800bbd4 <USBD_ClrFeature+0x14>
}
 800bbd2:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bbda:	f000 f9af 	bl	800bf3c <USBD_CtlSendStatus>
 800bbde:	e7f8      	b.n	800bbd2 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800bbe0:	f7ff fe57 	bl	800b892 <USBD_CtlError>
}
 800bbe4:	e7f5      	b.n	800bbd2 <USBD_ClrFeature+0x12>

0800bbe6 <USBD_StdDevReq>:
{
 800bbe6:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbe8:	780c      	ldrb	r4, [r1, #0]
 800bbea:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800bbee:	2c20      	cmp	r4, #32
 800bbf0:	d006      	beq.n	800bc00 <USBD_StdDevReq+0x1a>
 800bbf2:	2c40      	cmp	r4, #64	; 0x40
 800bbf4:	d004      	beq.n	800bc00 <USBD_StdDevReq+0x1a>
 800bbf6:	b154      	cbz	r4, 800bc0e <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800bbf8:	f7ff fe4b 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bbfc:	2400      	movs	r4, #0
      break;
 800bbfe:	e004      	b.n	800bc0a <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc00:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	4798      	blx	r3
 800bc08:	4604      	mov	r4, r0
}
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800bc0e:	784d      	ldrb	r5, [r1, #1]
 800bc10:	2d09      	cmp	r5, #9
 800bc12:	d81d      	bhi.n	800bc50 <USBD_StdDevReq+0x6a>
 800bc14:	e8df f005 	tbb	[pc, r5]
 800bc18:	161c1912 	.word	0x161c1912
 800bc1c:	1c05081c 	.word	0x1c05081c
 800bc20:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800bc22:	f7ff fe40 	bl	800b8a6 <USBD_GetDescriptor>
          break;
 800bc26:	e7f0      	b.n	800bc0a <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800bc28:	f7ff ff02 	bl	800ba30 <USBD_SetAddress>
          break;
 800bc2c:	e7ed      	b.n	800bc0a <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800bc2e:	f7ff ff27 	bl	800ba80 <USBD_SetConfig>
 800bc32:	4604      	mov	r4, r0
          break;
 800bc34:	e7e9      	b.n	800bc0a <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800bc36:	f7ff ff87 	bl	800bb48 <USBD_GetConfig>
          break;
 800bc3a:	e7e6      	b.n	800bc0a <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800bc3c:	f7ff ffa4 	bl	800bb88 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800bc40:	462c      	mov	r4, r5
          break;
 800bc42:	e7e2      	b.n	800bc0a <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800bc44:	f7ff fe07 	bl	800b856 <USBD_SetFeature>
          break;
 800bc48:	e7df      	b.n	800bc0a <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800bc4a:	f7ff ffb9 	bl	800bbc0 <USBD_ClrFeature>
          break;
 800bc4e:	e7dc      	b.n	800bc0a <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800bc50:	f7ff fe1f 	bl	800b892 <USBD_CtlError>
          break;
 800bc54:	e7d9      	b.n	800bc0a <USBD_StdDevReq+0x24>

0800bc56 <USBD_StdItfReq>:
{
 800bc56:	b570      	push	{r4, r5, r6, lr}
 800bc58:	4605      	mov	r5, r0
 800bc5a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc5c:	780b      	ldrb	r3, [r1, #0]
 800bc5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc62:	2b20      	cmp	r3, #32
 800bc64:	d007      	beq.n	800bc76 <USBD_StdItfReq+0x20>
 800bc66:	2b40      	cmp	r3, #64	; 0x40
 800bc68:	d005      	beq.n	800bc76 <USBD_StdItfReq+0x20>
 800bc6a:	b123      	cbz	r3, 800bc76 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800bc6c:	f7ff fe11 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bc70:	2600      	movs	r6, #0
}
 800bc72:	4630      	mov	r0, r6
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800bc76:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d818      	bhi.n	800bcb2 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc80:	7923      	ldrb	r3, [r4, #4]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d80f      	bhi.n	800bca6 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc86:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4628      	mov	r0, r5
 800bc90:	4798      	blx	r3
 800bc92:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc94:	88e3      	ldrh	r3, [r4, #6]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1eb      	bne.n	800bc72 <USBD_StdItfReq+0x1c>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d1e9      	bne.n	800bc72 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f000 f94c 	bl	800bf3c <USBD_CtlSendStatus>
 800bca4:	e7e5      	b.n	800bc72 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f7ff fdf2 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bcae:	2600      	movs	r6, #0
 800bcb0:	e7df      	b.n	800bc72 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7ff fdec 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bcba:	2600      	movs	r6, #0
          break;
 800bcbc:	e7d9      	b.n	800bc72 <USBD_StdItfReq+0x1c>

0800bcbe <USBD_StdEPReq>:
{
 800bcbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800bcc4:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcc6:	780c      	ldrb	r4, [r1, #0]
 800bcc8:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800bccc:	2c20      	cmp	r4, #32
 800bcce:	d008      	beq.n	800bce2 <USBD_StdEPReq+0x24>
 800bcd0:	b2d9      	uxtb	r1, r3
 800bcd2:	2c40      	cmp	r4, #64	; 0x40
 800bcd4:	d005      	beq.n	800bce2 <USBD_StdEPReq+0x24>
 800bcd6:	b16c      	cbz	r4, 800bcf4 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7ff fdda 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bcde:	2400      	movs	r4, #0
      break;
 800bce0:	e006      	b.n	800bcf0 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bce2:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	4629      	mov	r1, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	4798      	blx	r3
 800bcee:	4604      	mov	r4, r0
}
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800bcf4:	786f      	ldrb	r7, [r5, #1]
 800bcf6:	2f01      	cmp	r7, #1
 800bcf8:	d02f      	beq.n	800bd5a <USBD_StdEPReq+0x9c>
 800bcfa:	2f03      	cmp	r7, #3
 800bcfc:	d005      	beq.n	800bd0a <USBD_StdEPReq+0x4c>
 800bcfe:	2f00      	cmp	r7, #0
 800bd00:	d059      	beq.n	800bdb6 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800bd02:	4629      	mov	r1, r5
 800bd04:	f7ff fdc5 	bl	800b892 <USBD_CtlError>
          break;
 800bd08:	e7f2      	b.n	800bcf0 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800bd0a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d005      	beq.n	800bd20 <USBD_StdEPReq+0x62>
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	d012      	beq.n	800bd3e <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f7ff fdba 	bl	800b892 <USBD_CtlError>
              break;
 800bd1e:	e7e7      	b.n	800bcf0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd20:	b109      	cbz	r1, 800bd26 <USBD_StdEPReq+0x68>
 800bd22:	2980      	cmp	r1, #128	; 0x80
 800bd24:	d104      	bne.n	800bd30 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800bd26:	4629      	mov	r1, r5
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f7ff fdb2 	bl	800b892 <USBD_CtlError>
 800bd2e:	e7df      	b.n	800bcf0 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd30:	f7fa fbf2 	bl	8006518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd34:	2180      	movs	r1, #128	; 0x80
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7fa fbee 	bl	8006518 <USBD_LL_StallEP>
 800bd3c:	e7d8      	b.n	800bcf0 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd3e:	886b      	ldrh	r3, [r5, #2]
 800bd40:	b923      	cbnz	r3, 800bd4c <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd42:	b119      	cbz	r1, 800bd4c <USBD_StdEPReq+0x8e>
 800bd44:	2980      	cmp	r1, #128	; 0x80
 800bd46:	d001      	beq.n	800bd4c <USBD_StdEPReq+0x8e>
 800bd48:	88eb      	ldrh	r3, [r5, #6]
 800bd4a:	b11b      	cbz	r3, 800bd54 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f000 f8f5 	bl	800bf3c <USBD_CtlSendStatus>
              break;
 800bd52:	e7cd      	b.n	800bcf0 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd54:	f7fa fbe0 	bl	8006518 <USBD_LL_StallEP>
 800bd58:	e7f8      	b.n	800bd4c <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800bd5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d005      	beq.n	800bd70 <USBD_StdEPReq+0xb2>
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d012      	beq.n	800bd8e <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7ff fd92 	bl	800b892 <USBD_CtlError>
              break;
 800bd6e:	e7bf      	b.n	800bcf0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd70:	b109      	cbz	r1, 800bd76 <USBD_StdEPReq+0xb8>
 800bd72:	2980      	cmp	r1, #128	; 0x80
 800bd74:	d104      	bne.n	800bd80 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800bd76:	4629      	mov	r1, r5
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f7ff fd8a 	bl	800b892 <USBD_CtlError>
 800bd7e:	e7b7      	b.n	800bcf0 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd80:	f7fa fbca 	bl	8006518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd84:	2180      	movs	r1, #128	; 0x80
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7fa fbc6 	bl	8006518 <USBD_LL_StallEP>
 800bd8c:	e7b0      	b.n	800bcf0 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd8e:	886b      	ldrh	r3, [r5, #2]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1ad      	bne.n	800bcf0 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd94:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800bd98:	d10a      	bne.n	800bdb0 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f000 f8ce 	bl	800bf3c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bda0:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	4629      	mov	r1, r5
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4798      	blx	r3
 800bdac:	4604      	mov	r4, r0
 800bdae:	e79f      	b.n	800bcf0 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bdb0:	f7fa fbb9 	bl	8006526 <USBD_LL_ClearStallEP>
 800bdb4:	e7f1      	b.n	800bd9a <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800bdb6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	2a02      	cmp	r2, #2
 800bdbe:	d006      	beq.n	800bdce <USBD_StdEPReq+0x110>
 800bdc0:	2a03      	cmp	r2, #3
 800bdc2:	d029      	beq.n	800be18 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7ff fd64 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bdca:	463c      	mov	r4, r7
              break;
 800bdcc:	e790      	b.n	800bcf0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdce:	b109      	cbz	r1, 800bdd4 <USBD_StdEPReq+0x116>
 800bdd0:	2980      	cmp	r1, #128	; 0x80
 800bdd2:	d113      	bne.n	800bdfc <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bdd8:	d115      	bne.n	800be06 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdda:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdde:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800bde2:	0089      	lsls	r1, r1, #2
 800bde4:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800bde8:	4431      	add	r1, r6
 800bdea:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800bdec:	2300      	movs	r3, #0
 800bdee:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f000 f876 	bl	800bee4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800bdf8:	463c      	mov	r4, r7
              break;
 800bdfa:	e779      	b.n	800bcf0 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f7ff fd48 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800be02:	463c      	mov	r4, r7
                break;
 800be04:	e774      	b.n	800bcf0 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be06:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800be0a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be0e:	0089      	lsls	r1, r1, #2
 800be10:	3110      	adds	r1, #16
 800be12:	4431      	add	r1, r6
 800be14:	3104      	adds	r1, #4
 800be16:	e7e9      	b.n	800bdec <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800be18:	b25b      	sxtb	r3, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	db1f      	blt.n	800be5e <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be1e:	f001 020f 	and.w	r2, r1, #15
 800be22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800be26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800be2a:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800be2e:	b322      	cbz	r2, 800be7a <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be30:	2b00      	cmp	r3, #0
 800be32:	db27      	blt.n	800be84 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be34:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800be3c:	009c      	lsls	r4, r3, #2
 800be3e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800be42:	4434      	add	r4, r6
 800be44:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be46:	b109      	cbz	r1, 800be4c <USBD_StdEPReq+0x18e>
 800be48:	2980      	cmp	r1, #128	; 0x80
 800be4a:	d124      	bne.n	800be96 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800be4c:	2300      	movs	r3, #0
 800be4e:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be50:	2202      	movs	r2, #2
 800be52:	4621      	mov	r1, r4
 800be54:	4630      	mov	r0, r6
 800be56:	f000 f845 	bl	800bee4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800be5a:	463c      	mov	r4, r7
              break;
 800be5c:	e748      	b.n	800bcf0 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be5e:	f001 020f 	and.w	r2, r1, #15
 800be62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800be66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800be6a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	d1df      	bne.n	800be30 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800be70:	4629      	mov	r1, r5
 800be72:	f7ff fd0e 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800be76:	463c      	mov	r4, r7
                  break;
 800be78:	e73a      	b.n	800bcf0 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800be7a:	4629      	mov	r1, r5
 800be7c:	f7ff fd09 	bl	800b892 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800be80:	463c      	mov	r4, r7
                  break;
 800be82:	e735      	b.n	800bcf0 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be84:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800be88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800be8c:	009c      	lsls	r4, r3, #2
 800be8e:	3410      	adds	r4, #16
 800be90:	4434      	add	r4, r6
 800be92:	3404      	adds	r4, #4
 800be94:	e7d7      	b.n	800be46 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be96:	4630      	mov	r0, r6
 800be98:	f7fa fb4c 	bl	8006534 <USBD_LL_IsStallEP>
 800be9c:	b110      	cbz	r0, 800bea4 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800be9e:	2301      	movs	r3, #1
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	e7d5      	b.n	800be50 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	e7d2      	b.n	800be50 <USBD_StdEPReq+0x192>

0800beaa <USBD_GetString>:
  if (desc == NULL)
 800beaa:	b1d0      	cbz	r0, 800bee2 <USBD_GetString+0x38>
{
 800beac:	b570      	push	{r4, r5, r6, lr}
 800beae:	460d      	mov	r5, r1
 800beb0:	4616      	mov	r6, r2
 800beb2:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800beb4:	f7ff fcc5 	bl	800b842 <USBD_GetLen>
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800bec0:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bec2:	2303      	movs	r3, #3
 800bec4:	706b      	strb	r3, [r5, #1]
  idx++;
 800bec6:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800bec8:	e007      	b.n	800beda <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800beca:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800becc:	3401      	adds	r4, #1
    idx++;
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800bed2:	2100      	movs	r1, #0
 800bed4:	54a9      	strb	r1, [r5, r2]
    idx++;
 800bed6:	3302      	adds	r3, #2
 800bed8:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800beda:	7822      	ldrb	r2, [r4, #0]
 800bedc:	2a00      	cmp	r2, #0
 800bede:	d1f4      	bne.n	800beca <USBD_GetString+0x20>
}
 800bee0:	bd70      	pop	{r4, r5, r6, pc}
 800bee2:	4770      	bx	lr

0800bee4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bee4:	b508      	push	{r3, lr}
 800bee6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bee8:	2202      	movs	r2, #2
 800beea:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800beee:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bef0:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bef2:	460a      	mov	r2, r1
 800bef4:	2100      	movs	r1, #0
 800bef6:	f7fa fb3b 	bl	8006570 <USBD_LL_Transmit>

  return USBD_OK;
}
 800befa:	2000      	movs	r0, #0
 800befc:	bd08      	pop	{r3, pc}

0800befe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800befe:	b508      	push	{r3, lr}
 800bf00:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf02:	460a      	mov	r2, r1
 800bf04:	2100      	movs	r1, #0
 800bf06:	f7fa fb33 	bl	8006570 <USBD_LL_Transmit>

  return USBD_OK;
}
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	bd08      	pop	{r3, pc}

0800bf0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf0e:	b508      	push	{r3, lr}
 800bf10:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf12:	2203      	movs	r2, #3
 800bf14:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf18:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf1c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf20:	460a      	mov	r2, r1
 800bf22:	2100      	movs	r1, #0
 800bf24:	f7fa fb2b 	bl	800657e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bf28:	2000      	movs	r0, #0
 800bf2a:	bd08      	pop	{r3, pc}

0800bf2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf2c:	b508      	push	{r3, lr}
 800bf2e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf30:	460a      	mov	r2, r1
 800bf32:	2100      	movs	r1, #0
 800bf34:	f7fa fb23 	bl	800657e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bf38:	2000      	movs	r0, #0
 800bf3a:	bd08      	pop	{r3, pc}

0800bf3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf3c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf3e:	2204      	movs	r2, #4
 800bf40:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf44:	2300      	movs	r3, #0
 800bf46:	461a      	mov	r2, r3
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f7fa fb11 	bl	8006570 <USBD_LL_Transmit>

  return USBD_OK;
}
 800bf4e:	2000      	movs	r0, #0
 800bf50:	bd08      	pop	{r3, pc}

0800bf52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf52:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf54:	2205      	movs	r2, #5
 800bf56:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	4619      	mov	r1, r3
 800bf60:	f7fa fb0d 	bl	800657e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bf64:	2000      	movs	r0, #0
 800bf66:	bd08      	pop	{r3, pc}

0800bf68 <atan2>:
 800bf68:	f000 b802 	b.w	800bf70 <__ieee754_atan2>
 800bf6c:	0000      	movs	r0, r0
	...

0800bf70 <__ieee754_atan2>:
 800bf70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4617      	mov	r7, r2
 800bf76:	4690      	mov	r8, r2
 800bf78:	4699      	mov	r9, r3
 800bf7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf7e:	427b      	negs	r3, r7
 800bf80:	f8df a184 	ldr.w	sl, [pc, #388]	; 800c108 <__ieee754_atan2+0x198>
 800bf84:	433b      	orrs	r3, r7
 800bf86:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bf8a:	4553      	cmp	r3, sl
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	460d      	mov	r5, r1
 800bf90:	d809      	bhi.n	800bfa6 <__ieee754_atan2+0x36>
 800bf92:	4246      	negs	r6, r0
 800bf94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf98:	4306      	orrs	r6, r0
 800bf9a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800bf9e:	4556      	cmp	r6, sl
 800bfa0:	468e      	mov	lr, r1
 800bfa2:	4683      	mov	fp, r0
 800bfa4:	d908      	bls.n	800bfb8 <__ieee754_atan2+0x48>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4620      	mov	r0, r4
 800bfac:	4629      	mov	r1, r5
 800bfae:	f7f8 f965 	bl	800427c <__adddf3>
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	e019      	b.n	800bfec <__ieee754_atan2+0x7c>
 800bfb8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800bfbc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bfc0:	433e      	orrs	r6, r7
 800bfc2:	d103      	bne.n	800bfcc <__ieee754_atan2+0x5c>
 800bfc4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	f000 b8a2 	b.w	800c110 <atan>
 800bfcc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800bfd0:	f006 0602 	and.w	r6, r6, #2
 800bfd4:	ea53 0b0b 	orrs.w	fp, r3, fp
 800bfd8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bfdc:	d10a      	bne.n	800bff4 <__ieee754_atan2+0x84>
 800bfde:	2e02      	cmp	r6, #2
 800bfe0:	d067      	beq.n	800c0b2 <__ieee754_atan2+0x142>
 800bfe2:	2e03      	cmp	r6, #3
 800bfe4:	d102      	bne.n	800bfec <__ieee754_atan2+0x7c>
 800bfe6:	a544      	add	r5, pc, #272	; (adr r5, 800c0f8 <__ieee754_atan2+0x188>)
 800bfe8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfec:	4620      	mov	r0, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff4:	4317      	orrs	r7, r2
 800bff6:	d106      	bne.n	800c006 <__ieee754_atan2+0x96>
 800bff8:	f1be 0f00 	cmp.w	lr, #0
 800bffc:	da64      	bge.n	800c0c8 <__ieee754_atan2+0x158>
 800bffe:	a540      	add	r5, pc, #256	; (adr r5, 800c100 <__ieee754_atan2+0x190>)
 800c000:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c004:	e7f2      	b.n	800bfec <__ieee754_atan2+0x7c>
 800c006:	4552      	cmp	r2, sl
 800c008:	d10f      	bne.n	800c02a <__ieee754_atan2+0xba>
 800c00a:	4293      	cmp	r3, r2
 800c00c:	f106 36ff 	add.w	r6, r6, #4294967295
 800c010:	d107      	bne.n	800c022 <__ieee754_atan2+0xb2>
 800c012:	2e02      	cmp	r6, #2
 800c014:	d851      	bhi.n	800c0ba <__ieee754_atan2+0x14a>
 800c016:	4b36      	ldr	r3, [pc, #216]	; (800c0f0 <__ieee754_atan2+0x180>)
 800c018:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c01c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c020:	e7e4      	b.n	800bfec <__ieee754_atan2+0x7c>
 800c022:	2e02      	cmp	r6, #2
 800c024:	d84d      	bhi.n	800c0c2 <__ieee754_atan2+0x152>
 800c026:	4b33      	ldr	r3, [pc, #204]	; (800c0f4 <__ieee754_atan2+0x184>)
 800c028:	e7f6      	b.n	800c018 <__ieee754_atan2+0xa8>
 800c02a:	4553      	cmp	r3, sl
 800c02c:	d0e4      	beq.n	800bff8 <__ieee754_atan2+0x88>
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c034:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c038:	da21      	bge.n	800c07e <__ieee754_atan2+0x10e>
 800c03a:	f1b9 0f00 	cmp.w	r9, #0
 800c03e:	da01      	bge.n	800c044 <__ieee754_atan2+0xd4>
 800c040:	323c      	adds	r2, #60	; 0x3c
 800c042:	db20      	blt.n	800c086 <__ieee754_atan2+0x116>
 800c044:	4642      	mov	r2, r8
 800c046:	464b      	mov	r3, r9
 800c048:	4620      	mov	r0, r4
 800c04a:	4629      	mov	r1, r5
 800c04c:	f7f8 fbf6 	bl	800483c <__aeabi_ddiv>
 800c050:	f000 f9ee 	bl	800c430 <fabs>
 800c054:	f000 f85c 	bl	800c110 <atan>
 800c058:	4604      	mov	r4, r0
 800c05a:	460d      	mov	r5, r1
 800c05c:	2e01      	cmp	r6, #1
 800c05e:	d015      	beq.n	800c08c <__ieee754_atan2+0x11c>
 800c060:	2e02      	cmp	r6, #2
 800c062:	d017      	beq.n	800c094 <__ieee754_atan2+0x124>
 800c064:	2e00      	cmp	r6, #0
 800c066:	d0c1      	beq.n	800bfec <__ieee754_atan2+0x7c>
 800c068:	a319      	add	r3, pc, #100	; (adr r3, 800c0d0 <__ieee754_atan2+0x160>)
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	4620      	mov	r0, r4
 800c070:	4629      	mov	r1, r5
 800c072:	f7f8 f901 	bl	8004278 <__aeabi_dsub>
 800c076:	a318      	add	r3, pc, #96	; (adr r3, 800c0d8 <__ieee754_atan2+0x168>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	e016      	b.n	800c0ac <__ieee754_atan2+0x13c>
 800c07e:	a518      	add	r5, pc, #96	; (adr r5, 800c0e0 <__ieee754_atan2+0x170>)
 800c080:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c084:	e7ea      	b.n	800c05c <__ieee754_atan2+0xec>
 800c086:	2400      	movs	r4, #0
 800c088:	2500      	movs	r5, #0
 800c08a:	e7e7      	b.n	800c05c <__ieee754_atan2+0xec>
 800c08c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c090:	461d      	mov	r5, r3
 800c092:	e7ab      	b.n	800bfec <__ieee754_atan2+0x7c>
 800c094:	a30e      	add	r3, pc, #56	; (adr r3, 800c0d0 <__ieee754_atan2+0x160>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	4620      	mov	r0, r4
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7f8 f8eb 	bl	8004278 <__aeabi_dsub>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	a10c      	add	r1, pc, #48	; (adr r1, 800c0d8 <__ieee754_atan2+0x168>)
 800c0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ac:	f7f8 f8e4 	bl	8004278 <__aeabi_dsub>
 800c0b0:	e77f      	b.n	800bfb2 <__ieee754_atan2+0x42>
 800c0b2:	a509      	add	r5, pc, #36	; (adr r5, 800c0d8 <__ieee754_atan2+0x168>)
 800c0b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0b8:	e798      	b.n	800bfec <__ieee754_atan2+0x7c>
 800c0ba:	a50b      	add	r5, pc, #44	; (adr r5, 800c0e8 <__ieee754_atan2+0x178>)
 800c0bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0c0:	e794      	b.n	800bfec <__ieee754_atan2+0x7c>
 800c0c2:	2400      	movs	r4, #0
 800c0c4:	2500      	movs	r5, #0
 800c0c6:	e791      	b.n	800bfec <__ieee754_atan2+0x7c>
 800c0c8:	a505      	add	r5, pc, #20	; (adr r5, 800c0e0 <__ieee754_atan2+0x170>)
 800c0ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0ce:	e78d      	b.n	800bfec <__ieee754_atan2+0x7c>
 800c0d0:	33145c07 	.word	0x33145c07
 800c0d4:	3ca1a626 	.word	0x3ca1a626
 800c0d8:	54442d18 	.word	0x54442d18
 800c0dc:	400921fb 	.word	0x400921fb
 800c0e0:	54442d18 	.word	0x54442d18
 800c0e4:	3ff921fb 	.word	0x3ff921fb
 800c0e8:	54442d18 	.word	0x54442d18
 800c0ec:	3fe921fb 	.word	0x3fe921fb
 800c0f0:	0800d0e0 	.word	0x0800d0e0
 800c0f4:	0800d0f8 	.word	0x0800d0f8
 800c0f8:	54442d18 	.word	0x54442d18
 800c0fc:	c00921fb 	.word	0xc00921fb
 800c100:	54442d18 	.word	0x54442d18
 800c104:	bff921fb 	.word	0xbff921fb
 800c108:	7ff00000 	.word	0x7ff00000
 800c10c:	00000000 	.word	0x00000000

0800c110 <atan>:
 800c110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	4bbc      	ldr	r3, [pc, #752]	; (800c408 <atan+0x2f8>)
 800c116:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c11a:	429e      	cmp	r6, r3
 800c11c:	4604      	mov	r4, r0
 800c11e:	460d      	mov	r5, r1
 800c120:	468b      	mov	fp, r1
 800c122:	dd18      	ble.n	800c156 <atan+0x46>
 800c124:	4bb9      	ldr	r3, [pc, #740]	; (800c40c <atan+0x2fc>)
 800c126:	429e      	cmp	r6, r3
 800c128:	dc01      	bgt.n	800c12e <atan+0x1e>
 800c12a:	d109      	bne.n	800c140 <atan+0x30>
 800c12c:	b140      	cbz	r0, 800c140 <atan+0x30>
 800c12e:	4622      	mov	r2, r4
 800c130:	462b      	mov	r3, r5
 800c132:	4620      	mov	r0, r4
 800c134:	4629      	mov	r1, r5
 800c136:	f7f8 f8a1 	bl	800427c <__adddf3>
 800c13a:	4604      	mov	r4, r0
 800c13c:	460d      	mov	r5, r1
 800c13e:	e006      	b.n	800c14e <atan+0x3e>
 800c140:	f1bb 0f00 	cmp.w	fp, #0
 800c144:	f300 8123 	bgt.w	800c38e <atan+0x27e>
 800c148:	a593      	add	r5, pc, #588	; (adr r5, 800c398 <atan+0x288>)
 800c14a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c156:	4bae      	ldr	r3, [pc, #696]	; (800c410 <atan+0x300>)
 800c158:	429e      	cmp	r6, r3
 800c15a:	dc11      	bgt.n	800c180 <atan+0x70>
 800c15c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c160:	429e      	cmp	r6, r3
 800c162:	dc0a      	bgt.n	800c17a <atan+0x6a>
 800c164:	a38e      	add	r3, pc, #568	; (adr r3, 800c3a0 <atan+0x290>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	f7f8 f887 	bl	800427c <__adddf3>
 800c16e:	4ba9      	ldr	r3, [pc, #676]	; (800c414 <atan+0x304>)
 800c170:	2200      	movs	r2, #0
 800c172:	f7f8 fcc9 	bl	8004b08 <__aeabi_dcmpgt>
 800c176:	2800      	cmp	r0, #0
 800c178:	d1e9      	bne.n	800c14e <atan+0x3e>
 800c17a:	f04f 3aff 	mov.w	sl, #4294967295
 800c17e:	e027      	b.n	800c1d0 <atan+0xc0>
 800c180:	f000 f956 	bl	800c430 <fabs>
 800c184:	4ba4      	ldr	r3, [pc, #656]	; (800c418 <atan+0x308>)
 800c186:	429e      	cmp	r6, r3
 800c188:	4604      	mov	r4, r0
 800c18a:	460d      	mov	r5, r1
 800c18c:	f300 80b8 	bgt.w	800c300 <atan+0x1f0>
 800c190:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c194:	429e      	cmp	r6, r3
 800c196:	f300 809c 	bgt.w	800c2d2 <atan+0x1c2>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	f7f8 f86d 	bl	800427c <__adddf3>
 800c1a2:	4b9c      	ldr	r3, [pc, #624]	; (800c414 <atan+0x304>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f7f8 f867 	bl	8004278 <__aeabi_dsub>
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	f7f8 f860 	bl	800427c <__adddf3>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	f7f8 fb3a 	bl	800483c <__aeabi_ddiv>
 800c1c8:	f04f 0a00 	mov.w	sl, #0
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	460d      	mov	r5, r1
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	462b      	mov	r3, r5
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	f7f8 fa06 	bl	80045e8 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	4689      	mov	r9, r1
 800c1e4:	f7f8 fa00 	bl	80045e8 <__aeabi_dmul>
 800c1e8:	a36f      	add	r3, pc, #444	; (adr r3, 800c3a8 <atan+0x298>)
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	460f      	mov	r7, r1
 800c1f2:	f7f8 f9f9 	bl	80045e8 <__aeabi_dmul>
 800c1f6:	a36e      	add	r3, pc, #440	; (adr r3, 800c3b0 <atan+0x2a0>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	f7f8 f83e 	bl	800427c <__adddf3>
 800c200:	4632      	mov	r2, r6
 800c202:	463b      	mov	r3, r7
 800c204:	f7f8 f9f0 	bl	80045e8 <__aeabi_dmul>
 800c208:	a36b      	add	r3, pc, #428	; (adr r3, 800c3b8 <atan+0x2a8>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f8 f835 	bl	800427c <__adddf3>
 800c212:	4632      	mov	r2, r6
 800c214:	463b      	mov	r3, r7
 800c216:	f7f8 f9e7 	bl	80045e8 <__aeabi_dmul>
 800c21a:	a369      	add	r3, pc, #420	; (adr r3, 800c3c0 <atan+0x2b0>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f7f8 f82c 	bl	800427c <__adddf3>
 800c224:	4632      	mov	r2, r6
 800c226:	463b      	mov	r3, r7
 800c228:	f7f8 f9de 	bl	80045e8 <__aeabi_dmul>
 800c22c:	a366      	add	r3, pc, #408	; (adr r3, 800c3c8 <atan+0x2b8>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	f7f8 f823 	bl	800427c <__adddf3>
 800c236:	4632      	mov	r2, r6
 800c238:	463b      	mov	r3, r7
 800c23a:	f7f8 f9d5 	bl	80045e8 <__aeabi_dmul>
 800c23e:	a364      	add	r3, pc, #400	; (adr r3, 800c3d0 <atan+0x2c0>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f8 f81a 	bl	800427c <__adddf3>
 800c248:	4642      	mov	r2, r8
 800c24a:	464b      	mov	r3, r9
 800c24c:	f7f8 f9cc 	bl	80045e8 <__aeabi_dmul>
 800c250:	a361      	add	r3, pc, #388	; (adr r3, 800c3d8 <atan+0x2c8>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	4680      	mov	r8, r0
 800c258:	4689      	mov	r9, r1
 800c25a:	4630      	mov	r0, r6
 800c25c:	4639      	mov	r1, r7
 800c25e:	f7f8 f9c3 	bl	80045e8 <__aeabi_dmul>
 800c262:	a35f      	add	r3, pc, #380	; (adr r3, 800c3e0 <atan+0x2d0>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f8 f806 	bl	8004278 <__aeabi_dsub>
 800c26c:	4632      	mov	r2, r6
 800c26e:	463b      	mov	r3, r7
 800c270:	f7f8 f9ba 	bl	80045e8 <__aeabi_dmul>
 800c274:	a35c      	add	r3, pc, #368	; (adr r3, 800c3e8 <atan+0x2d8>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f7 fffd 	bl	8004278 <__aeabi_dsub>
 800c27e:	4632      	mov	r2, r6
 800c280:	463b      	mov	r3, r7
 800c282:	f7f8 f9b1 	bl	80045e8 <__aeabi_dmul>
 800c286:	a35a      	add	r3, pc, #360	; (adr r3, 800c3f0 <atan+0x2e0>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f7 fff4 	bl	8004278 <__aeabi_dsub>
 800c290:	4632      	mov	r2, r6
 800c292:	463b      	mov	r3, r7
 800c294:	f7f8 f9a8 	bl	80045e8 <__aeabi_dmul>
 800c298:	a357      	add	r3, pc, #348	; (adr r3, 800c3f8 <atan+0x2e8>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f7f7 ffeb 	bl	8004278 <__aeabi_dsub>
 800c2a2:	4632      	mov	r2, r6
 800c2a4:	463b      	mov	r3, r7
 800c2a6:	f7f8 f99f 	bl	80045e8 <__aeabi_dmul>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	f7f7 ffe3 	bl	800427c <__adddf3>
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	f7f8 f995 	bl	80045e8 <__aeabi_dmul>
 800c2be:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	d144      	bne.n	800c352 <atan+0x242>
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	f7f7 ffd4 	bl	8004278 <__aeabi_dsub>
 800c2d0:	e733      	b.n	800c13a <atan+0x2a>
 800c2d2:	4b50      	ldr	r3, [pc, #320]	; (800c414 <atan+0x304>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f7f7 ffcf 	bl	8004278 <__aeabi_dsub>
 800c2da:	4b4e      	ldr	r3, [pc, #312]	; (800c414 <atan+0x304>)
 800c2dc:	4606      	mov	r6, r0
 800c2de:	460f      	mov	r7, r1
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	f7f7 ffc9 	bl	800427c <__adddf3>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	f7f8 faa3 	bl	800483c <__aeabi_ddiv>
 800c2f6:	f04f 0a01 	mov.w	sl, #1
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	e767      	b.n	800c1d0 <atan+0xc0>
 800c300:	4b46      	ldr	r3, [pc, #280]	; (800c41c <atan+0x30c>)
 800c302:	429e      	cmp	r6, r3
 800c304:	da1a      	bge.n	800c33c <atan+0x22c>
 800c306:	4b46      	ldr	r3, [pc, #280]	; (800c420 <atan+0x310>)
 800c308:	2200      	movs	r2, #0
 800c30a:	f7f7 ffb5 	bl	8004278 <__aeabi_dsub>
 800c30e:	4b44      	ldr	r3, [pc, #272]	; (800c420 <atan+0x310>)
 800c310:	4606      	mov	r6, r0
 800c312:	460f      	mov	r7, r1
 800c314:	2200      	movs	r2, #0
 800c316:	4620      	mov	r0, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f8 f965 	bl	80045e8 <__aeabi_dmul>
 800c31e:	4b3d      	ldr	r3, [pc, #244]	; (800c414 <atan+0x304>)
 800c320:	2200      	movs	r2, #0
 800c322:	f7f7 ffab 	bl	800427c <__adddf3>
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	4630      	mov	r0, r6
 800c32c:	4639      	mov	r1, r7
 800c32e:	f7f8 fa85 	bl	800483c <__aeabi_ddiv>
 800c332:	f04f 0a02 	mov.w	sl, #2
 800c336:	4604      	mov	r4, r0
 800c338:	460d      	mov	r5, r1
 800c33a:	e749      	b.n	800c1d0 <atan+0xc0>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	2000      	movs	r0, #0
 800c342:	4938      	ldr	r1, [pc, #224]	; (800c424 <atan+0x314>)
 800c344:	f7f8 fa7a 	bl	800483c <__aeabi_ddiv>
 800c348:	f04f 0a03 	mov.w	sl, #3
 800c34c:	4604      	mov	r4, r0
 800c34e:	460d      	mov	r5, r1
 800c350:	e73e      	b.n	800c1d0 <atan+0xc0>
 800c352:	4b35      	ldr	r3, [pc, #212]	; (800c428 <atan+0x318>)
 800c354:	4e35      	ldr	r6, [pc, #212]	; (800c42c <atan+0x31c>)
 800c356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	f7f7 ff8b 	bl	8004278 <__aeabi_dsub>
 800c362:	4622      	mov	r2, r4
 800c364:	462b      	mov	r3, r5
 800c366:	f7f7 ff87 	bl	8004278 <__aeabi_dsub>
 800c36a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c376:	f7f7 ff7f 	bl	8004278 <__aeabi_dsub>
 800c37a:	f1bb 0f00 	cmp.w	fp, #0
 800c37e:	4604      	mov	r4, r0
 800c380:	460d      	mov	r5, r1
 800c382:	f6bf aee4 	bge.w	800c14e <atan+0x3e>
 800c386:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c38a:	461d      	mov	r5, r3
 800c38c:	e6df      	b.n	800c14e <atan+0x3e>
 800c38e:	a51c      	add	r5, pc, #112	; (adr r5, 800c400 <atan+0x2f0>)
 800c390:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c394:	e6db      	b.n	800c14e <atan+0x3e>
 800c396:	bf00      	nop
 800c398:	54442d18 	.word	0x54442d18
 800c39c:	bff921fb 	.word	0xbff921fb
 800c3a0:	8800759c 	.word	0x8800759c
 800c3a4:	7e37e43c 	.word	0x7e37e43c
 800c3a8:	e322da11 	.word	0xe322da11
 800c3ac:	3f90ad3a 	.word	0x3f90ad3a
 800c3b0:	24760deb 	.word	0x24760deb
 800c3b4:	3fa97b4b 	.word	0x3fa97b4b
 800c3b8:	a0d03d51 	.word	0xa0d03d51
 800c3bc:	3fb10d66 	.word	0x3fb10d66
 800c3c0:	c54c206e 	.word	0xc54c206e
 800c3c4:	3fb745cd 	.word	0x3fb745cd
 800c3c8:	920083ff 	.word	0x920083ff
 800c3cc:	3fc24924 	.word	0x3fc24924
 800c3d0:	5555550d 	.word	0x5555550d
 800c3d4:	3fd55555 	.word	0x3fd55555
 800c3d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c3dc:	bfa2b444 	.word	0xbfa2b444
 800c3e0:	52defd9a 	.word	0x52defd9a
 800c3e4:	3fadde2d 	.word	0x3fadde2d
 800c3e8:	af749a6d 	.word	0xaf749a6d
 800c3ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800c3f0:	fe231671 	.word	0xfe231671
 800c3f4:	3fbc71c6 	.word	0x3fbc71c6
 800c3f8:	9998ebc4 	.word	0x9998ebc4
 800c3fc:	3fc99999 	.word	0x3fc99999
 800c400:	54442d18 	.word	0x54442d18
 800c404:	3ff921fb 	.word	0x3ff921fb
 800c408:	440fffff 	.word	0x440fffff
 800c40c:	7ff00000 	.word	0x7ff00000
 800c410:	3fdbffff 	.word	0x3fdbffff
 800c414:	3ff00000 	.word	0x3ff00000
 800c418:	3ff2ffff 	.word	0x3ff2ffff
 800c41c:	40038000 	.word	0x40038000
 800c420:	3ff80000 	.word	0x3ff80000
 800c424:	bff00000 	.word	0xbff00000
 800c428:	0800d130 	.word	0x0800d130
 800c42c:	0800d110 	.word	0x0800d110

0800c430 <fabs>:
 800c430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c434:	4619      	mov	r1, r3
 800c436:	4770      	bx	lr

0800c438 <malloc>:
 800c438:	4b02      	ldr	r3, [pc, #8]	; (800c444 <malloc+0xc>)
 800c43a:	4601      	mov	r1, r0
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	f000 b82b 	b.w	800c498 <_malloc_r>
 800c442:	bf00      	nop
 800c444:	200001e4 	.word	0x200001e4

0800c448 <free>:
 800c448:	4b02      	ldr	r3, [pc, #8]	; (800c454 <free+0xc>)
 800c44a:	4601      	mov	r1, r0
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f000 b921 	b.w	800c694 <_free_r>
 800c452:	bf00      	nop
 800c454:	200001e4 	.word	0x200001e4

0800c458 <sbrk_aligned>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	4e0e      	ldr	r6, [pc, #56]	; (800c494 <sbrk_aligned+0x3c>)
 800c45c:	460c      	mov	r4, r1
 800c45e:	6831      	ldr	r1, [r6, #0]
 800c460:	4605      	mov	r5, r0
 800c462:	b911      	cbnz	r1, 800c46a <sbrk_aligned+0x12>
 800c464:	f000 f8cc 	bl	800c600 <_sbrk_r>
 800c468:	6030      	str	r0, [r6, #0]
 800c46a:	4621      	mov	r1, r4
 800c46c:	4628      	mov	r0, r5
 800c46e:	f000 f8c7 	bl	800c600 <_sbrk_r>
 800c472:	1c43      	adds	r3, r0, #1
 800c474:	d00a      	beq.n	800c48c <sbrk_aligned+0x34>
 800c476:	1cc4      	adds	r4, r0, #3
 800c478:	f024 0403 	bic.w	r4, r4, #3
 800c47c:	42a0      	cmp	r0, r4
 800c47e:	d007      	beq.n	800c490 <sbrk_aligned+0x38>
 800c480:	1a21      	subs	r1, r4, r0
 800c482:	4628      	mov	r0, r5
 800c484:	f000 f8bc 	bl	800c600 <_sbrk_r>
 800c488:	3001      	adds	r0, #1
 800c48a:	d101      	bne.n	800c490 <sbrk_aligned+0x38>
 800c48c:	f04f 34ff 	mov.w	r4, #4294967295
 800c490:	4620      	mov	r0, r4
 800c492:	bd70      	pop	{r4, r5, r6, pc}
 800c494:	20002924 	.word	0x20002924

0800c498 <_malloc_r>:
 800c498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c49c:	1ccd      	adds	r5, r1, #3
 800c49e:	f025 0503 	bic.w	r5, r5, #3
 800c4a2:	3508      	adds	r5, #8
 800c4a4:	2d0c      	cmp	r5, #12
 800c4a6:	bf38      	it	cc
 800c4a8:	250c      	movcc	r5, #12
 800c4aa:	2d00      	cmp	r5, #0
 800c4ac:	4607      	mov	r7, r0
 800c4ae:	db01      	blt.n	800c4b4 <_malloc_r+0x1c>
 800c4b0:	42a9      	cmp	r1, r5
 800c4b2:	d905      	bls.n	800c4c0 <_malloc_r+0x28>
 800c4b4:	230c      	movs	r3, #12
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	2600      	movs	r6, #0
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c594 <_malloc_r+0xfc>
 800c4c4:	f000 f868 	bl	800c598 <__malloc_lock>
 800c4c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4cc:	461c      	mov	r4, r3
 800c4ce:	bb5c      	cbnz	r4, 800c528 <_malloc_r+0x90>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	f7ff ffc0 	bl	800c458 <sbrk_aligned>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	4604      	mov	r4, r0
 800c4dc:	d155      	bne.n	800c58a <_malloc_r+0xf2>
 800c4de:	f8d8 4000 	ldr.w	r4, [r8]
 800c4e2:	4626      	mov	r6, r4
 800c4e4:	2e00      	cmp	r6, #0
 800c4e6:	d145      	bne.n	800c574 <_malloc_r+0xdc>
 800c4e8:	2c00      	cmp	r4, #0
 800c4ea:	d048      	beq.n	800c57e <_malloc_r+0xe6>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	eb04 0903 	add.w	r9, r4, r3
 800c4f6:	f000 f883 	bl	800c600 <_sbrk_r>
 800c4fa:	4581      	cmp	r9, r0
 800c4fc:	d13f      	bne.n	800c57e <_malloc_r+0xe6>
 800c4fe:	6821      	ldr	r1, [r4, #0]
 800c500:	1a6d      	subs	r5, r5, r1
 800c502:	4629      	mov	r1, r5
 800c504:	4638      	mov	r0, r7
 800c506:	f7ff ffa7 	bl	800c458 <sbrk_aligned>
 800c50a:	3001      	adds	r0, #1
 800c50c:	d037      	beq.n	800c57e <_malloc_r+0xe6>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	442b      	add	r3, r5
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	f8d8 3000 	ldr.w	r3, [r8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d038      	beq.n	800c58e <_malloc_r+0xf6>
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	42a2      	cmp	r2, r4
 800c520:	d12b      	bne.n	800c57a <_malloc_r+0xe2>
 800c522:	2200      	movs	r2, #0
 800c524:	605a      	str	r2, [r3, #4]
 800c526:	e00f      	b.n	800c548 <_malloc_r+0xb0>
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	1b52      	subs	r2, r2, r5
 800c52c:	d41f      	bmi.n	800c56e <_malloc_r+0xd6>
 800c52e:	2a0b      	cmp	r2, #11
 800c530:	d917      	bls.n	800c562 <_malloc_r+0xca>
 800c532:	1961      	adds	r1, r4, r5
 800c534:	42a3      	cmp	r3, r4
 800c536:	6025      	str	r5, [r4, #0]
 800c538:	bf18      	it	ne
 800c53a:	6059      	strne	r1, [r3, #4]
 800c53c:	6863      	ldr	r3, [r4, #4]
 800c53e:	bf08      	it	eq
 800c540:	f8c8 1000 	streq.w	r1, [r8]
 800c544:	5162      	str	r2, [r4, r5]
 800c546:	604b      	str	r3, [r1, #4]
 800c548:	4638      	mov	r0, r7
 800c54a:	f104 060b 	add.w	r6, r4, #11
 800c54e:	f000 f829 	bl	800c5a4 <__malloc_unlock>
 800c552:	f026 0607 	bic.w	r6, r6, #7
 800c556:	1d23      	adds	r3, r4, #4
 800c558:	1af2      	subs	r2, r6, r3
 800c55a:	d0ae      	beq.n	800c4ba <_malloc_r+0x22>
 800c55c:	1b9b      	subs	r3, r3, r6
 800c55e:	50a3      	str	r3, [r4, r2]
 800c560:	e7ab      	b.n	800c4ba <_malloc_r+0x22>
 800c562:	42a3      	cmp	r3, r4
 800c564:	6862      	ldr	r2, [r4, #4]
 800c566:	d1dd      	bne.n	800c524 <_malloc_r+0x8c>
 800c568:	f8c8 2000 	str.w	r2, [r8]
 800c56c:	e7ec      	b.n	800c548 <_malloc_r+0xb0>
 800c56e:	4623      	mov	r3, r4
 800c570:	6864      	ldr	r4, [r4, #4]
 800c572:	e7ac      	b.n	800c4ce <_malloc_r+0x36>
 800c574:	4634      	mov	r4, r6
 800c576:	6876      	ldr	r6, [r6, #4]
 800c578:	e7b4      	b.n	800c4e4 <_malloc_r+0x4c>
 800c57a:	4613      	mov	r3, r2
 800c57c:	e7cc      	b.n	800c518 <_malloc_r+0x80>
 800c57e:	230c      	movs	r3, #12
 800c580:	603b      	str	r3, [r7, #0]
 800c582:	4638      	mov	r0, r7
 800c584:	f000 f80e 	bl	800c5a4 <__malloc_unlock>
 800c588:	e797      	b.n	800c4ba <_malloc_r+0x22>
 800c58a:	6025      	str	r5, [r4, #0]
 800c58c:	e7dc      	b.n	800c548 <_malloc_r+0xb0>
 800c58e:	605b      	str	r3, [r3, #4]
 800c590:	deff      	udf	#255	; 0xff
 800c592:	bf00      	nop
 800c594:	20002920 	.word	0x20002920

0800c598 <__malloc_lock>:
 800c598:	4801      	ldr	r0, [pc, #4]	; (800c5a0 <__malloc_lock+0x8>)
 800c59a:	f000 b86b 	b.w	800c674 <__retarget_lock_acquire_recursive>
 800c59e:	bf00      	nop
 800c5a0:	20002a64 	.word	0x20002a64

0800c5a4 <__malloc_unlock>:
 800c5a4:	4801      	ldr	r0, [pc, #4]	; (800c5ac <__malloc_unlock+0x8>)
 800c5a6:	f000 b866 	b.w	800c676 <__retarget_lock_release_recursive>
 800c5aa:	bf00      	nop
 800c5ac:	20002a64 	.word	0x20002a64

0800c5b0 <siprintf>:
 800c5b0:	b40e      	push	{r1, r2, r3}
 800c5b2:	b500      	push	{lr}
 800c5b4:	b09c      	sub	sp, #112	; 0x70
 800c5b6:	ab1d      	add	r3, sp, #116	; 0x74
 800c5b8:	9002      	str	r0, [sp, #8]
 800c5ba:	9006      	str	r0, [sp, #24]
 800c5bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5c0:	4809      	ldr	r0, [pc, #36]	; (800c5e8 <siprintf+0x38>)
 800c5c2:	9107      	str	r1, [sp, #28]
 800c5c4:	9104      	str	r1, [sp, #16]
 800c5c6:	4909      	ldr	r1, [pc, #36]	; (800c5ec <siprintf+0x3c>)
 800c5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5cc:	9105      	str	r1, [sp, #20]
 800c5ce:	6800      	ldr	r0, [r0, #0]
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	a902      	add	r1, sp, #8
 800c5d4:	f000 f904 	bl	800c7e0 <_svfiprintf_r>
 800c5d8:	9b02      	ldr	r3, [sp, #8]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	701a      	strb	r2, [r3, #0]
 800c5de:	b01c      	add	sp, #112	; 0x70
 800c5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5e4:	b003      	add	sp, #12
 800c5e6:	4770      	bx	lr
 800c5e8:	200001e4 	.word	0x200001e4
 800c5ec:	ffff0208 	.word	0xffff0208

0800c5f0 <memset>:
 800c5f0:	4402      	add	r2, r0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d100      	bne.n	800c5fa <memset+0xa>
 800c5f8:	4770      	bx	lr
 800c5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c5fe:	e7f9      	b.n	800c5f4 <memset+0x4>

0800c600 <_sbrk_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_sbrk_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f9 fdfc 	bl	8006208 <_sbrk>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_sbrk_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_sbrk_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20002a60 	.word	0x20002a60

0800c620 <__errno>:
 800c620:	4b01      	ldr	r3, [pc, #4]	; (800c628 <__errno+0x8>)
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	200001e4 	.word	0x200001e4

0800c62c <__libc_init_array>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4d0d      	ldr	r5, [pc, #52]	; (800c664 <__libc_init_array+0x38>)
 800c630:	4c0d      	ldr	r4, [pc, #52]	; (800c668 <__libc_init_array+0x3c>)
 800c632:	1b64      	subs	r4, r4, r5
 800c634:	10a4      	asrs	r4, r4, #2
 800c636:	2600      	movs	r6, #0
 800c638:	42a6      	cmp	r6, r4
 800c63a:	d109      	bne.n	800c650 <__libc_init_array+0x24>
 800c63c:	4d0b      	ldr	r5, [pc, #44]	; (800c66c <__libc_init_array+0x40>)
 800c63e:	4c0c      	ldr	r4, [pc, #48]	; (800c670 <__libc_init_array+0x44>)
 800c640:	f000 fbae 	bl	800cda0 <_init>
 800c644:	1b64      	subs	r4, r4, r5
 800c646:	10a4      	asrs	r4, r4, #2
 800c648:	2600      	movs	r6, #0
 800c64a:	42a6      	cmp	r6, r4
 800c64c:	d105      	bne.n	800c65a <__libc_init_array+0x2e>
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	f855 3b04 	ldr.w	r3, [r5], #4
 800c654:	4798      	blx	r3
 800c656:	3601      	adds	r6, #1
 800c658:	e7ee      	b.n	800c638 <__libc_init_array+0xc>
 800c65a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c65e:	4798      	blx	r3
 800c660:	3601      	adds	r6, #1
 800c662:	e7f2      	b.n	800c64a <__libc_init_array+0x1e>
 800c664:	0800d188 	.word	0x0800d188
 800c668:	0800d188 	.word	0x0800d188
 800c66c:	0800d188 	.word	0x0800d188
 800c670:	0800d18c 	.word	0x0800d18c

0800c674 <__retarget_lock_acquire_recursive>:
 800c674:	4770      	bx	lr

0800c676 <__retarget_lock_release_recursive>:
 800c676:	4770      	bx	lr

0800c678 <memcpy>:
 800c678:	440a      	add	r2, r1
 800c67a:	4291      	cmp	r1, r2
 800c67c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c680:	d100      	bne.n	800c684 <memcpy+0xc>
 800c682:	4770      	bx	lr
 800c684:	b510      	push	{r4, lr}
 800c686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c68a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c68e:	4291      	cmp	r1, r2
 800c690:	d1f9      	bne.n	800c686 <memcpy+0xe>
 800c692:	bd10      	pop	{r4, pc}

0800c694 <_free_r>:
 800c694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c696:	2900      	cmp	r1, #0
 800c698:	d044      	beq.n	800c724 <_free_r+0x90>
 800c69a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c69e:	9001      	str	r0, [sp, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c6a6:	bfb8      	it	lt
 800c6a8:	18e4      	addlt	r4, r4, r3
 800c6aa:	f7ff ff75 	bl	800c598 <__malloc_lock>
 800c6ae:	4a1e      	ldr	r2, [pc, #120]	; (800c728 <_free_r+0x94>)
 800c6b0:	9801      	ldr	r0, [sp, #4]
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	b933      	cbnz	r3, 800c6c4 <_free_r+0x30>
 800c6b6:	6063      	str	r3, [r4, #4]
 800c6b8:	6014      	str	r4, [r2, #0]
 800c6ba:	b003      	add	sp, #12
 800c6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6c0:	f7ff bf70 	b.w	800c5a4 <__malloc_unlock>
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	d908      	bls.n	800c6da <_free_r+0x46>
 800c6c8:	6825      	ldr	r5, [r4, #0]
 800c6ca:	1961      	adds	r1, r4, r5
 800c6cc:	428b      	cmp	r3, r1
 800c6ce:	bf01      	itttt	eq
 800c6d0:	6819      	ldreq	r1, [r3, #0]
 800c6d2:	685b      	ldreq	r3, [r3, #4]
 800c6d4:	1949      	addeq	r1, r1, r5
 800c6d6:	6021      	streq	r1, [r4, #0]
 800c6d8:	e7ed      	b.n	800c6b6 <_free_r+0x22>
 800c6da:	461a      	mov	r2, r3
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	b10b      	cbz	r3, 800c6e4 <_free_r+0x50>
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d9fa      	bls.n	800c6da <_free_r+0x46>
 800c6e4:	6811      	ldr	r1, [r2, #0]
 800c6e6:	1855      	adds	r5, r2, r1
 800c6e8:	42a5      	cmp	r5, r4
 800c6ea:	d10b      	bne.n	800c704 <_free_r+0x70>
 800c6ec:	6824      	ldr	r4, [r4, #0]
 800c6ee:	4421      	add	r1, r4
 800c6f0:	1854      	adds	r4, r2, r1
 800c6f2:	42a3      	cmp	r3, r4
 800c6f4:	6011      	str	r1, [r2, #0]
 800c6f6:	d1e0      	bne.n	800c6ba <_free_r+0x26>
 800c6f8:	681c      	ldr	r4, [r3, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	6053      	str	r3, [r2, #4]
 800c6fe:	440c      	add	r4, r1
 800c700:	6014      	str	r4, [r2, #0]
 800c702:	e7da      	b.n	800c6ba <_free_r+0x26>
 800c704:	d902      	bls.n	800c70c <_free_r+0x78>
 800c706:	230c      	movs	r3, #12
 800c708:	6003      	str	r3, [r0, #0]
 800c70a:	e7d6      	b.n	800c6ba <_free_r+0x26>
 800c70c:	6825      	ldr	r5, [r4, #0]
 800c70e:	1961      	adds	r1, r4, r5
 800c710:	428b      	cmp	r3, r1
 800c712:	bf04      	itt	eq
 800c714:	6819      	ldreq	r1, [r3, #0]
 800c716:	685b      	ldreq	r3, [r3, #4]
 800c718:	6063      	str	r3, [r4, #4]
 800c71a:	bf04      	itt	eq
 800c71c:	1949      	addeq	r1, r1, r5
 800c71e:	6021      	streq	r1, [r4, #0]
 800c720:	6054      	str	r4, [r2, #4]
 800c722:	e7ca      	b.n	800c6ba <_free_r+0x26>
 800c724:	b003      	add	sp, #12
 800c726:	bd30      	pop	{r4, r5, pc}
 800c728:	20002920 	.word	0x20002920

0800c72c <__ssputs_r>:
 800c72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c730:	688e      	ldr	r6, [r1, #8]
 800c732:	461f      	mov	r7, r3
 800c734:	42be      	cmp	r6, r7
 800c736:	680b      	ldr	r3, [r1, #0]
 800c738:	4682      	mov	sl, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	4690      	mov	r8, r2
 800c73e:	d82c      	bhi.n	800c79a <__ssputs_r+0x6e>
 800c740:	898a      	ldrh	r2, [r1, #12]
 800c742:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c746:	d026      	beq.n	800c796 <__ssputs_r+0x6a>
 800c748:	6965      	ldr	r5, [r4, #20]
 800c74a:	6909      	ldr	r1, [r1, #16]
 800c74c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c750:	eba3 0901 	sub.w	r9, r3, r1
 800c754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c758:	1c7b      	adds	r3, r7, #1
 800c75a:	444b      	add	r3, r9
 800c75c:	106d      	asrs	r5, r5, #1
 800c75e:	429d      	cmp	r5, r3
 800c760:	bf38      	it	cc
 800c762:	461d      	movcc	r5, r3
 800c764:	0553      	lsls	r3, r2, #21
 800c766:	d527      	bpl.n	800c7b8 <__ssputs_r+0x8c>
 800c768:	4629      	mov	r1, r5
 800c76a:	f7ff fe95 	bl	800c498 <_malloc_r>
 800c76e:	4606      	mov	r6, r0
 800c770:	b360      	cbz	r0, 800c7cc <__ssputs_r+0xa0>
 800c772:	6921      	ldr	r1, [r4, #16]
 800c774:	464a      	mov	r2, r9
 800c776:	f7ff ff7f 	bl	800c678 <memcpy>
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	6126      	str	r6, [r4, #16]
 800c788:	6165      	str	r5, [r4, #20]
 800c78a:	444e      	add	r6, r9
 800c78c:	eba5 0509 	sub.w	r5, r5, r9
 800c790:	6026      	str	r6, [r4, #0]
 800c792:	60a5      	str	r5, [r4, #8]
 800c794:	463e      	mov	r6, r7
 800c796:	42be      	cmp	r6, r7
 800c798:	d900      	bls.n	800c79c <__ssputs_r+0x70>
 800c79a:	463e      	mov	r6, r7
 800c79c:	6820      	ldr	r0, [r4, #0]
 800c79e:	4632      	mov	r2, r6
 800c7a0:	4641      	mov	r1, r8
 800c7a2:	f000 faab 	bl	800ccfc <memmove>
 800c7a6:	68a3      	ldr	r3, [r4, #8]
 800c7a8:	1b9b      	subs	r3, r3, r6
 800c7aa:	60a3      	str	r3, [r4, #8]
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	4433      	add	r3, r6
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	f000 fab9 	bl	800cd30 <_realloc_r>
 800c7be:	4606      	mov	r6, r0
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d1e0      	bne.n	800c786 <__ssputs_r+0x5a>
 800c7c4:	6921      	ldr	r1, [r4, #16]
 800c7c6:	4650      	mov	r0, sl
 800c7c8:	f7ff ff64 	bl	800c694 <_free_r>
 800c7cc:	230c      	movs	r3, #12
 800c7ce:	f8ca 3000 	str.w	r3, [sl]
 800c7d2:	89a3      	ldrh	r3, [r4, #12]
 800c7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7d8:	81a3      	strh	r3, [r4, #12]
 800c7da:	f04f 30ff 	mov.w	r0, #4294967295
 800c7de:	e7e9      	b.n	800c7b4 <__ssputs_r+0x88>

0800c7e0 <_svfiprintf_r>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	4698      	mov	r8, r3
 800c7e6:	898b      	ldrh	r3, [r1, #12]
 800c7e8:	061b      	lsls	r3, r3, #24
 800c7ea:	b09d      	sub	sp, #116	; 0x74
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	4614      	mov	r4, r2
 800c7f2:	d50e      	bpl.n	800c812 <_svfiprintf_r+0x32>
 800c7f4:	690b      	ldr	r3, [r1, #16]
 800c7f6:	b963      	cbnz	r3, 800c812 <_svfiprintf_r+0x32>
 800c7f8:	2140      	movs	r1, #64	; 0x40
 800c7fa:	f7ff fe4d 	bl	800c498 <_malloc_r>
 800c7fe:	6028      	str	r0, [r5, #0]
 800c800:	6128      	str	r0, [r5, #16]
 800c802:	b920      	cbnz	r0, 800c80e <_svfiprintf_r+0x2e>
 800c804:	230c      	movs	r3, #12
 800c806:	603b      	str	r3, [r7, #0]
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	e0d0      	b.n	800c9b0 <_svfiprintf_r+0x1d0>
 800c80e:	2340      	movs	r3, #64	; 0x40
 800c810:	616b      	str	r3, [r5, #20]
 800c812:	2300      	movs	r3, #0
 800c814:	9309      	str	r3, [sp, #36]	; 0x24
 800c816:	2320      	movs	r3, #32
 800c818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c81c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c820:	2330      	movs	r3, #48	; 0x30
 800c822:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c9c8 <_svfiprintf_r+0x1e8>
 800c826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c82a:	f04f 0901 	mov.w	r9, #1
 800c82e:	4623      	mov	r3, r4
 800c830:	469a      	mov	sl, r3
 800c832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c836:	b10a      	cbz	r2, 800c83c <_svfiprintf_r+0x5c>
 800c838:	2a25      	cmp	r2, #37	; 0x25
 800c83a:	d1f9      	bne.n	800c830 <_svfiprintf_r+0x50>
 800c83c:	ebba 0b04 	subs.w	fp, sl, r4
 800c840:	d00b      	beq.n	800c85a <_svfiprintf_r+0x7a>
 800c842:	465b      	mov	r3, fp
 800c844:	4622      	mov	r2, r4
 800c846:	4629      	mov	r1, r5
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff ff6f 	bl	800c72c <__ssputs_r>
 800c84e:	3001      	adds	r0, #1
 800c850:	f000 80a9 	beq.w	800c9a6 <_svfiprintf_r+0x1c6>
 800c854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c856:	445a      	add	r2, fp
 800c858:	9209      	str	r2, [sp, #36]	; 0x24
 800c85a:	f89a 3000 	ldrb.w	r3, [sl]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 80a1 	beq.w	800c9a6 <_svfiprintf_r+0x1c6>
 800c864:	2300      	movs	r3, #0
 800c866:	f04f 32ff 	mov.w	r2, #4294967295
 800c86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c86e:	f10a 0a01 	add.w	sl, sl, #1
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	9307      	str	r3, [sp, #28]
 800c876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c87a:	931a      	str	r3, [sp, #104]	; 0x68
 800c87c:	4654      	mov	r4, sl
 800c87e:	2205      	movs	r2, #5
 800c880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c884:	4850      	ldr	r0, [pc, #320]	; (800c9c8 <_svfiprintf_r+0x1e8>)
 800c886:	f7f7 fca3 	bl	80041d0 <memchr>
 800c88a:	9a04      	ldr	r2, [sp, #16]
 800c88c:	b9d8      	cbnz	r0, 800c8c6 <_svfiprintf_r+0xe6>
 800c88e:	06d0      	lsls	r0, r2, #27
 800c890:	bf44      	itt	mi
 800c892:	2320      	movmi	r3, #32
 800c894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c898:	0711      	lsls	r1, r2, #28
 800c89a:	bf44      	itt	mi
 800c89c:	232b      	movmi	r3, #43	; 0x2b
 800c89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8a8:	d015      	beq.n	800c8d6 <_svfiprintf_r+0xf6>
 800c8aa:	9a07      	ldr	r2, [sp, #28]
 800c8ac:	4654      	mov	r4, sl
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	f04f 0c0a 	mov.w	ip, #10
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ba:	3b30      	subs	r3, #48	; 0x30
 800c8bc:	2b09      	cmp	r3, #9
 800c8be:	d94d      	bls.n	800c95c <_svfiprintf_r+0x17c>
 800c8c0:	b1b0      	cbz	r0, 800c8f0 <_svfiprintf_r+0x110>
 800c8c2:	9207      	str	r2, [sp, #28]
 800c8c4:	e014      	b.n	800c8f0 <_svfiprintf_r+0x110>
 800c8c6:	eba0 0308 	sub.w	r3, r0, r8
 800c8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	9304      	str	r3, [sp, #16]
 800c8d2:	46a2      	mov	sl, r4
 800c8d4:	e7d2      	b.n	800c87c <_svfiprintf_r+0x9c>
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	1d19      	adds	r1, r3, #4
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	9103      	str	r1, [sp, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	bfbb      	ittet	lt
 800c8e2:	425b      	neglt	r3, r3
 800c8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8e8:	9307      	strge	r3, [sp, #28]
 800c8ea:	9307      	strlt	r3, [sp, #28]
 800c8ec:	bfb8      	it	lt
 800c8ee:	9204      	strlt	r2, [sp, #16]
 800c8f0:	7823      	ldrb	r3, [r4, #0]
 800c8f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8f4:	d10c      	bne.n	800c910 <_svfiprintf_r+0x130>
 800c8f6:	7863      	ldrb	r3, [r4, #1]
 800c8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fa:	d134      	bne.n	800c966 <_svfiprintf_r+0x186>
 800c8fc:	9b03      	ldr	r3, [sp, #12]
 800c8fe:	1d1a      	adds	r2, r3, #4
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	9203      	str	r2, [sp, #12]
 800c904:	2b00      	cmp	r3, #0
 800c906:	bfb8      	it	lt
 800c908:	f04f 33ff 	movlt.w	r3, #4294967295
 800c90c:	3402      	adds	r4, #2
 800c90e:	9305      	str	r3, [sp, #20]
 800c910:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c9d8 <_svfiprintf_r+0x1f8>
 800c914:	7821      	ldrb	r1, [r4, #0]
 800c916:	2203      	movs	r2, #3
 800c918:	4650      	mov	r0, sl
 800c91a:	f7f7 fc59 	bl	80041d0 <memchr>
 800c91e:	b138      	cbz	r0, 800c930 <_svfiprintf_r+0x150>
 800c920:	9b04      	ldr	r3, [sp, #16]
 800c922:	eba0 000a 	sub.w	r0, r0, sl
 800c926:	2240      	movs	r2, #64	; 0x40
 800c928:	4082      	lsls	r2, r0
 800c92a:	4313      	orrs	r3, r2
 800c92c:	3401      	adds	r4, #1
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c934:	4825      	ldr	r0, [pc, #148]	; (800c9cc <_svfiprintf_r+0x1ec>)
 800c936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c93a:	2206      	movs	r2, #6
 800c93c:	f7f7 fc48 	bl	80041d0 <memchr>
 800c940:	2800      	cmp	r0, #0
 800c942:	d038      	beq.n	800c9b6 <_svfiprintf_r+0x1d6>
 800c944:	4b22      	ldr	r3, [pc, #136]	; (800c9d0 <_svfiprintf_r+0x1f0>)
 800c946:	bb1b      	cbnz	r3, 800c990 <_svfiprintf_r+0x1b0>
 800c948:	9b03      	ldr	r3, [sp, #12]
 800c94a:	3307      	adds	r3, #7
 800c94c:	f023 0307 	bic.w	r3, r3, #7
 800c950:	3308      	adds	r3, #8
 800c952:	9303      	str	r3, [sp, #12]
 800c954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c956:	4433      	add	r3, r6
 800c958:	9309      	str	r3, [sp, #36]	; 0x24
 800c95a:	e768      	b.n	800c82e <_svfiprintf_r+0x4e>
 800c95c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c960:	460c      	mov	r4, r1
 800c962:	2001      	movs	r0, #1
 800c964:	e7a6      	b.n	800c8b4 <_svfiprintf_r+0xd4>
 800c966:	2300      	movs	r3, #0
 800c968:	3401      	adds	r4, #1
 800c96a:	9305      	str	r3, [sp, #20]
 800c96c:	4619      	mov	r1, r3
 800c96e:	f04f 0c0a 	mov.w	ip, #10
 800c972:	4620      	mov	r0, r4
 800c974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c978:	3a30      	subs	r2, #48	; 0x30
 800c97a:	2a09      	cmp	r2, #9
 800c97c:	d903      	bls.n	800c986 <_svfiprintf_r+0x1a6>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0c6      	beq.n	800c910 <_svfiprintf_r+0x130>
 800c982:	9105      	str	r1, [sp, #20]
 800c984:	e7c4      	b.n	800c910 <_svfiprintf_r+0x130>
 800c986:	fb0c 2101 	mla	r1, ip, r1, r2
 800c98a:	4604      	mov	r4, r0
 800c98c:	2301      	movs	r3, #1
 800c98e:	e7f0      	b.n	800c972 <_svfiprintf_r+0x192>
 800c990:	ab03      	add	r3, sp, #12
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	462a      	mov	r2, r5
 800c996:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <_svfiprintf_r+0x1f4>)
 800c998:	a904      	add	r1, sp, #16
 800c99a:	4638      	mov	r0, r7
 800c99c:	f3af 8000 	nop.w
 800c9a0:	1c42      	adds	r2, r0, #1
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	d1d6      	bne.n	800c954 <_svfiprintf_r+0x174>
 800c9a6:	89ab      	ldrh	r3, [r5, #12]
 800c9a8:	065b      	lsls	r3, r3, #25
 800c9aa:	f53f af2d 	bmi.w	800c808 <_svfiprintf_r+0x28>
 800c9ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9b0:	b01d      	add	sp, #116	; 0x74
 800c9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b6:	ab03      	add	r3, sp, #12
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	462a      	mov	r2, r5
 800c9bc:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <_svfiprintf_r+0x1f4>)
 800c9be:	a904      	add	r1, sp, #16
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f000 f879 	bl	800cab8 <_printf_i>
 800c9c6:	e7eb      	b.n	800c9a0 <_svfiprintf_r+0x1c0>
 800c9c8:	0800d150 	.word	0x0800d150
 800c9cc:	0800d15a 	.word	0x0800d15a
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	0800c72d 	.word	0x0800c72d
 800c9d8:	0800d156 	.word	0x0800d156

0800c9dc <_printf_common>:
 800c9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e0:	4616      	mov	r6, r2
 800c9e2:	4699      	mov	r9, r3
 800c9e4:	688a      	ldr	r2, [r1, #8]
 800c9e6:	690b      	ldr	r3, [r1, #16]
 800c9e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	bfb8      	it	lt
 800c9f0:	4613      	movlt	r3, r2
 800c9f2:	6033      	str	r3, [r6, #0]
 800c9f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	b10a      	cbz	r2, 800ca02 <_printf_common+0x26>
 800c9fe:	3301      	adds	r3, #1
 800ca00:	6033      	str	r3, [r6, #0]
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	0699      	lsls	r1, r3, #26
 800ca06:	bf42      	ittt	mi
 800ca08:	6833      	ldrmi	r3, [r6, #0]
 800ca0a:	3302      	addmi	r3, #2
 800ca0c:	6033      	strmi	r3, [r6, #0]
 800ca0e:	6825      	ldr	r5, [r4, #0]
 800ca10:	f015 0506 	ands.w	r5, r5, #6
 800ca14:	d106      	bne.n	800ca24 <_printf_common+0x48>
 800ca16:	f104 0a19 	add.w	sl, r4, #25
 800ca1a:	68e3      	ldr	r3, [r4, #12]
 800ca1c:	6832      	ldr	r2, [r6, #0]
 800ca1e:	1a9b      	subs	r3, r3, r2
 800ca20:	42ab      	cmp	r3, r5
 800ca22:	dc26      	bgt.n	800ca72 <_printf_common+0x96>
 800ca24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca28:	1e13      	subs	r3, r2, #0
 800ca2a:	6822      	ldr	r2, [r4, #0]
 800ca2c:	bf18      	it	ne
 800ca2e:	2301      	movne	r3, #1
 800ca30:	0692      	lsls	r2, r2, #26
 800ca32:	d42b      	bmi.n	800ca8c <_printf_common+0xb0>
 800ca34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca38:	4649      	mov	r1, r9
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	47c0      	blx	r8
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d01e      	beq.n	800ca80 <_printf_common+0xa4>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	6922      	ldr	r2, [r4, #16]
 800ca46:	f003 0306 	and.w	r3, r3, #6
 800ca4a:	2b04      	cmp	r3, #4
 800ca4c:	bf02      	ittt	eq
 800ca4e:	68e5      	ldreq	r5, [r4, #12]
 800ca50:	6833      	ldreq	r3, [r6, #0]
 800ca52:	1aed      	subeq	r5, r5, r3
 800ca54:	68a3      	ldr	r3, [r4, #8]
 800ca56:	bf0c      	ite	eq
 800ca58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca5c:	2500      	movne	r5, #0
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	bfc4      	itt	gt
 800ca62:	1a9b      	subgt	r3, r3, r2
 800ca64:	18ed      	addgt	r5, r5, r3
 800ca66:	2600      	movs	r6, #0
 800ca68:	341a      	adds	r4, #26
 800ca6a:	42b5      	cmp	r5, r6
 800ca6c:	d11a      	bne.n	800caa4 <_printf_common+0xc8>
 800ca6e:	2000      	movs	r0, #0
 800ca70:	e008      	b.n	800ca84 <_printf_common+0xa8>
 800ca72:	2301      	movs	r3, #1
 800ca74:	4652      	mov	r2, sl
 800ca76:	4649      	mov	r1, r9
 800ca78:	4638      	mov	r0, r7
 800ca7a:	47c0      	blx	r8
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d103      	bne.n	800ca88 <_printf_common+0xac>
 800ca80:	f04f 30ff 	mov.w	r0, #4294967295
 800ca84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca88:	3501      	adds	r5, #1
 800ca8a:	e7c6      	b.n	800ca1a <_printf_common+0x3e>
 800ca8c:	18e1      	adds	r1, r4, r3
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	2030      	movs	r0, #48	; 0x30
 800ca92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca96:	4422      	add	r2, r4
 800ca98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caa0:	3302      	adds	r3, #2
 800caa2:	e7c7      	b.n	800ca34 <_printf_common+0x58>
 800caa4:	2301      	movs	r3, #1
 800caa6:	4622      	mov	r2, r4
 800caa8:	4649      	mov	r1, r9
 800caaa:	4638      	mov	r0, r7
 800caac:	47c0      	blx	r8
 800caae:	3001      	adds	r0, #1
 800cab0:	d0e6      	beq.n	800ca80 <_printf_common+0xa4>
 800cab2:	3601      	adds	r6, #1
 800cab4:	e7d9      	b.n	800ca6a <_printf_common+0x8e>
	...

0800cab8 <_printf_i>:
 800cab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cabc:	7e0f      	ldrb	r7, [r1, #24]
 800cabe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cac0:	2f78      	cmp	r7, #120	; 0x78
 800cac2:	4691      	mov	r9, r2
 800cac4:	4680      	mov	r8, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	469a      	mov	sl, r3
 800caca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cace:	d807      	bhi.n	800cae0 <_printf_i+0x28>
 800cad0:	2f62      	cmp	r7, #98	; 0x62
 800cad2:	d80a      	bhi.n	800caea <_printf_i+0x32>
 800cad4:	2f00      	cmp	r7, #0
 800cad6:	f000 80d4 	beq.w	800cc82 <_printf_i+0x1ca>
 800cada:	2f58      	cmp	r7, #88	; 0x58
 800cadc:	f000 80c0 	beq.w	800cc60 <_printf_i+0x1a8>
 800cae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cae8:	e03a      	b.n	800cb60 <_printf_i+0xa8>
 800caea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caee:	2b15      	cmp	r3, #21
 800caf0:	d8f6      	bhi.n	800cae0 <_printf_i+0x28>
 800caf2:	a101      	add	r1, pc, #4	; (adr r1, 800caf8 <_printf_i+0x40>)
 800caf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caf8:	0800cb51 	.word	0x0800cb51
 800cafc:	0800cb65 	.word	0x0800cb65
 800cb00:	0800cae1 	.word	0x0800cae1
 800cb04:	0800cae1 	.word	0x0800cae1
 800cb08:	0800cae1 	.word	0x0800cae1
 800cb0c:	0800cae1 	.word	0x0800cae1
 800cb10:	0800cb65 	.word	0x0800cb65
 800cb14:	0800cae1 	.word	0x0800cae1
 800cb18:	0800cae1 	.word	0x0800cae1
 800cb1c:	0800cae1 	.word	0x0800cae1
 800cb20:	0800cae1 	.word	0x0800cae1
 800cb24:	0800cc69 	.word	0x0800cc69
 800cb28:	0800cb91 	.word	0x0800cb91
 800cb2c:	0800cc23 	.word	0x0800cc23
 800cb30:	0800cae1 	.word	0x0800cae1
 800cb34:	0800cae1 	.word	0x0800cae1
 800cb38:	0800cc8b 	.word	0x0800cc8b
 800cb3c:	0800cae1 	.word	0x0800cae1
 800cb40:	0800cb91 	.word	0x0800cb91
 800cb44:	0800cae1 	.word	0x0800cae1
 800cb48:	0800cae1 	.word	0x0800cae1
 800cb4c:	0800cc2b 	.word	0x0800cc2b
 800cb50:	682b      	ldr	r3, [r5, #0]
 800cb52:	1d1a      	adds	r2, r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	602a      	str	r2, [r5, #0]
 800cb58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb60:	2301      	movs	r3, #1
 800cb62:	e09f      	b.n	800cca4 <_printf_i+0x1ec>
 800cb64:	6820      	ldr	r0, [r4, #0]
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	0607      	lsls	r7, r0, #24
 800cb6a:	f103 0104 	add.w	r1, r3, #4
 800cb6e:	6029      	str	r1, [r5, #0]
 800cb70:	d501      	bpl.n	800cb76 <_printf_i+0xbe>
 800cb72:	681e      	ldr	r6, [r3, #0]
 800cb74:	e003      	b.n	800cb7e <_printf_i+0xc6>
 800cb76:	0646      	lsls	r6, r0, #25
 800cb78:	d5fb      	bpl.n	800cb72 <_printf_i+0xba>
 800cb7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb7e:	2e00      	cmp	r6, #0
 800cb80:	da03      	bge.n	800cb8a <_printf_i+0xd2>
 800cb82:	232d      	movs	r3, #45	; 0x2d
 800cb84:	4276      	negs	r6, r6
 800cb86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb8a:	485a      	ldr	r0, [pc, #360]	; (800ccf4 <_printf_i+0x23c>)
 800cb8c:	230a      	movs	r3, #10
 800cb8e:	e012      	b.n	800cbb6 <_printf_i+0xfe>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	6820      	ldr	r0, [r4, #0]
 800cb94:	1d19      	adds	r1, r3, #4
 800cb96:	6029      	str	r1, [r5, #0]
 800cb98:	0605      	lsls	r5, r0, #24
 800cb9a:	d501      	bpl.n	800cba0 <_printf_i+0xe8>
 800cb9c:	681e      	ldr	r6, [r3, #0]
 800cb9e:	e002      	b.n	800cba6 <_printf_i+0xee>
 800cba0:	0641      	lsls	r1, r0, #25
 800cba2:	d5fb      	bpl.n	800cb9c <_printf_i+0xe4>
 800cba4:	881e      	ldrh	r6, [r3, #0]
 800cba6:	4853      	ldr	r0, [pc, #332]	; (800ccf4 <_printf_i+0x23c>)
 800cba8:	2f6f      	cmp	r7, #111	; 0x6f
 800cbaa:	bf0c      	ite	eq
 800cbac:	2308      	moveq	r3, #8
 800cbae:	230a      	movne	r3, #10
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbb6:	6865      	ldr	r5, [r4, #4]
 800cbb8:	60a5      	str	r5, [r4, #8]
 800cbba:	2d00      	cmp	r5, #0
 800cbbc:	bfa2      	ittt	ge
 800cbbe:	6821      	ldrge	r1, [r4, #0]
 800cbc0:	f021 0104 	bicge.w	r1, r1, #4
 800cbc4:	6021      	strge	r1, [r4, #0]
 800cbc6:	b90e      	cbnz	r6, 800cbcc <_printf_i+0x114>
 800cbc8:	2d00      	cmp	r5, #0
 800cbca:	d04b      	beq.n	800cc64 <_printf_i+0x1ac>
 800cbcc:	4615      	mov	r5, r2
 800cbce:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbd2:	fb03 6711 	mls	r7, r3, r1, r6
 800cbd6:	5dc7      	ldrb	r7, [r0, r7]
 800cbd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbdc:	4637      	mov	r7, r6
 800cbde:	42bb      	cmp	r3, r7
 800cbe0:	460e      	mov	r6, r1
 800cbe2:	d9f4      	bls.n	800cbce <_printf_i+0x116>
 800cbe4:	2b08      	cmp	r3, #8
 800cbe6:	d10b      	bne.n	800cc00 <_printf_i+0x148>
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	07de      	lsls	r6, r3, #31
 800cbec:	d508      	bpl.n	800cc00 <_printf_i+0x148>
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	6861      	ldr	r1, [r4, #4]
 800cbf2:	4299      	cmp	r1, r3
 800cbf4:	bfde      	ittt	le
 800cbf6:	2330      	movle	r3, #48	; 0x30
 800cbf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc00:	1b52      	subs	r2, r2, r5
 800cc02:	6122      	str	r2, [r4, #16]
 800cc04:	f8cd a000 	str.w	sl, [sp]
 800cc08:	464b      	mov	r3, r9
 800cc0a:	aa03      	add	r2, sp, #12
 800cc0c:	4621      	mov	r1, r4
 800cc0e:	4640      	mov	r0, r8
 800cc10:	f7ff fee4 	bl	800c9dc <_printf_common>
 800cc14:	3001      	adds	r0, #1
 800cc16:	d14a      	bne.n	800ccae <_printf_i+0x1f6>
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1c:	b004      	add	sp, #16
 800cc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	f043 0320 	orr.w	r3, r3, #32
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	4833      	ldr	r0, [pc, #204]	; (800ccf8 <_printf_i+0x240>)
 800cc2c:	2778      	movs	r7, #120	; 0x78
 800cc2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	6829      	ldr	r1, [r5, #0]
 800cc36:	061f      	lsls	r7, r3, #24
 800cc38:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc3c:	d402      	bmi.n	800cc44 <_printf_i+0x18c>
 800cc3e:	065f      	lsls	r7, r3, #25
 800cc40:	bf48      	it	mi
 800cc42:	b2b6      	uxthmi	r6, r6
 800cc44:	07df      	lsls	r7, r3, #31
 800cc46:	bf48      	it	mi
 800cc48:	f043 0320 	orrmi.w	r3, r3, #32
 800cc4c:	6029      	str	r1, [r5, #0]
 800cc4e:	bf48      	it	mi
 800cc50:	6023      	strmi	r3, [r4, #0]
 800cc52:	b91e      	cbnz	r6, 800cc5c <_printf_i+0x1a4>
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	f023 0320 	bic.w	r3, r3, #32
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	2310      	movs	r3, #16
 800cc5e:	e7a7      	b.n	800cbb0 <_printf_i+0xf8>
 800cc60:	4824      	ldr	r0, [pc, #144]	; (800ccf4 <_printf_i+0x23c>)
 800cc62:	e7e4      	b.n	800cc2e <_printf_i+0x176>
 800cc64:	4615      	mov	r5, r2
 800cc66:	e7bd      	b.n	800cbe4 <_printf_i+0x12c>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	6826      	ldr	r6, [r4, #0]
 800cc6c:	6961      	ldr	r1, [r4, #20]
 800cc6e:	1d18      	adds	r0, r3, #4
 800cc70:	6028      	str	r0, [r5, #0]
 800cc72:	0635      	lsls	r5, r6, #24
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	d501      	bpl.n	800cc7c <_printf_i+0x1c4>
 800cc78:	6019      	str	r1, [r3, #0]
 800cc7a:	e002      	b.n	800cc82 <_printf_i+0x1ca>
 800cc7c:	0670      	lsls	r0, r6, #25
 800cc7e:	d5fb      	bpl.n	800cc78 <_printf_i+0x1c0>
 800cc80:	8019      	strh	r1, [r3, #0]
 800cc82:	2300      	movs	r3, #0
 800cc84:	6123      	str	r3, [r4, #16]
 800cc86:	4615      	mov	r5, r2
 800cc88:	e7bc      	b.n	800cc04 <_printf_i+0x14c>
 800cc8a:	682b      	ldr	r3, [r5, #0]
 800cc8c:	1d1a      	adds	r2, r3, #4
 800cc8e:	602a      	str	r2, [r5, #0]
 800cc90:	681d      	ldr	r5, [r3, #0]
 800cc92:	6862      	ldr	r2, [r4, #4]
 800cc94:	2100      	movs	r1, #0
 800cc96:	4628      	mov	r0, r5
 800cc98:	f7f7 fa9a 	bl	80041d0 <memchr>
 800cc9c:	b108      	cbz	r0, 800cca2 <_printf_i+0x1ea>
 800cc9e:	1b40      	subs	r0, r0, r5
 800cca0:	6060      	str	r0, [r4, #4]
 800cca2:	6863      	ldr	r3, [r4, #4]
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	2300      	movs	r3, #0
 800cca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccac:	e7aa      	b.n	800cc04 <_printf_i+0x14c>
 800ccae:	6923      	ldr	r3, [r4, #16]
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	47d0      	blx	sl
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d0ad      	beq.n	800cc18 <_printf_i+0x160>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	079b      	lsls	r3, r3, #30
 800ccc0:	d413      	bmi.n	800ccea <_printf_i+0x232>
 800ccc2:	68e0      	ldr	r0, [r4, #12]
 800ccc4:	9b03      	ldr	r3, [sp, #12]
 800ccc6:	4298      	cmp	r0, r3
 800ccc8:	bfb8      	it	lt
 800ccca:	4618      	movlt	r0, r3
 800cccc:	e7a6      	b.n	800cc1c <_printf_i+0x164>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	4632      	mov	r2, r6
 800ccd2:	4649      	mov	r1, r9
 800ccd4:	4640      	mov	r0, r8
 800ccd6:	47d0      	blx	sl
 800ccd8:	3001      	adds	r0, #1
 800ccda:	d09d      	beq.n	800cc18 <_printf_i+0x160>
 800ccdc:	3501      	adds	r5, #1
 800ccde:	68e3      	ldr	r3, [r4, #12]
 800cce0:	9903      	ldr	r1, [sp, #12]
 800cce2:	1a5b      	subs	r3, r3, r1
 800cce4:	42ab      	cmp	r3, r5
 800cce6:	dcf2      	bgt.n	800ccce <_printf_i+0x216>
 800cce8:	e7eb      	b.n	800ccc2 <_printf_i+0x20a>
 800ccea:	2500      	movs	r5, #0
 800ccec:	f104 0619 	add.w	r6, r4, #25
 800ccf0:	e7f5      	b.n	800ccde <_printf_i+0x226>
 800ccf2:	bf00      	nop
 800ccf4:	0800d161 	.word	0x0800d161
 800ccf8:	0800d172 	.word	0x0800d172

0800ccfc <memmove>:
 800ccfc:	4288      	cmp	r0, r1
 800ccfe:	b510      	push	{r4, lr}
 800cd00:	eb01 0402 	add.w	r4, r1, r2
 800cd04:	d902      	bls.n	800cd0c <memmove+0x10>
 800cd06:	4284      	cmp	r4, r0
 800cd08:	4623      	mov	r3, r4
 800cd0a:	d807      	bhi.n	800cd1c <memmove+0x20>
 800cd0c:	1e43      	subs	r3, r0, #1
 800cd0e:	42a1      	cmp	r1, r4
 800cd10:	d008      	beq.n	800cd24 <memmove+0x28>
 800cd12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd1a:	e7f8      	b.n	800cd0e <memmove+0x12>
 800cd1c:	4402      	add	r2, r0
 800cd1e:	4601      	mov	r1, r0
 800cd20:	428a      	cmp	r2, r1
 800cd22:	d100      	bne.n	800cd26 <memmove+0x2a>
 800cd24:	bd10      	pop	{r4, pc}
 800cd26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd2e:	e7f7      	b.n	800cd20 <memmove+0x24>

0800cd30 <_realloc_r>:
 800cd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd34:	4680      	mov	r8, r0
 800cd36:	4614      	mov	r4, r2
 800cd38:	460e      	mov	r6, r1
 800cd3a:	b921      	cbnz	r1, 800cd46 <_realloc_r+0x16>
 800cd3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd40:	4611      	mov	r1, r2
 800cd42:	f7ff bba9 	b.w	800c498 <_malloc_r>
 800cd46:	b92a      	cbnz	r2, 800cd54 <_realloc_r+0x24>
 800cd48:	f7ff fca4 	bl	800c694 <_free_r>
 800cd4c:	4625      	mov	r5, r4
 800cd4e:	4628      	mov	r0, r5
 800cd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd54:	f000 f81b 	bl	800cd8e <_malloc_usable_size_r>
 800cd58:	4284      	cmp	r4, r0
 800cd5a:	4607      	mov	r7, r0
 800cd5c:	d802      	bhi.n	800cd64 <_realloc_r+0x34>
 800cd5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd62:	d812      	bhi.n	800cd8a <_realloc_r+0x5a>
 800cd64:	4621      	mov	r1, r4
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7ff fb96 	bl	800c498 <_malloc_r>
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d0ed      	beq.n	800cd4e <_realloc_r+0x1e>
 800cd72:	42bc      	cmp	r4, r7
 800cd74:	4622      	mov	r2, r4
 800cd76:	4631      	mov	r1, r6
 800cd78:	bf28      	it	cs
 800cd7a:	463a      	movcs	r2, r7
 800cd7c:	f7ff fc7c 	bl	800c678 <memcpy>
 800cd80:	4631      	mov	r1, r6
 800cd82:	4640      	mov	r0, r8
 800cd84:	f7ff fc86 	bl	800c694 <_free_r>
 800cd88:	e7e1      	b.n	800cd4e <_realloc_r+0x1e>
 800cd8a:	4635      	mov	r5, r6
 800cd8c:	e7df      	b.n	800cd4e <_realloc_r+0x1e>

0800cd8e <_malloc_usable_size_r>:
 800cd8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd92:	1f18      	subs	r0, r3, #4
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	bfbc      	itt	lt
 800cd98:	580b      	ldrlt	r3, [r1, r0]
 800cd9a:	18c0      	addlt	r0, r0, r3
 800cd9c:	4770      	bx	lr
	...

0800cda0 <_init>:
 800cda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda2:	bf00      	nop
 800cda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda6:	bc08      	pop	{r3}
 800cda8:	469e      	mov	lr, r3
 800cdaa:	4770      	bx	lr

0800cdac <_fini>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr
